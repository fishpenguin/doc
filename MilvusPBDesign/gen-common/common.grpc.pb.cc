// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: common.proto

#include "common.pb.h"
#include "common.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace demo {

static const char* DemoService_method_names[] = {
  "/demo.DemoService/Search",
  "/demo.DemoService/CreateCollection",
  "/demo.DemoService/ShowCollections",
  "/demo.DemoService/DropCollection",
  "/demo.DemoService/InsertDocs",
  "/demo.DemoService/CreateIndex",
  "/demo.DemoService/DropIndex",
  "/demo.DemoService/DescribeIndex",
  "/demo.DemoService/GetConfig",
  "/demo.DemoService/SetConfig",
};

std::unique_ptr< DemoService::Stub> DemoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DemoService::Stub> stub(new DemoService::Stub(channel));
  return stub;
}

DemoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Search_(DemoService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCollection_(DemoService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowCollections_(DemoService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropCollection_(DemoService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertDocs_(DemoService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIndex_(DemoService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIndex_(DemoService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeIndex_(DemoService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfig_(DemoService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConfig_(DemoService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DemoService::Stub::Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::demo::QueryResponsePB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>* DemoService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::QueryResponsePB>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>* DemoService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::QueryResponsePB>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

::grpc::Status DemoService::Stub::CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::demo::CollectionSchemaResponsePB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>* DemoService::Stub::AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionSchemaResponsePB>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>* DemoService::Stub::PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionSchemaResponsePB>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::demo::CollectionSchemaListPB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowCollections_, context, request, response);
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaListPB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaListPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>* DemoService::Stub::AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionSchemaListPB>::Create(channel_.get(), cq, rpcmethod_ShowCollections_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>* DemoService::Stub::PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionSchemaListPB>::Create(channel_.get(), cq, rpcmethod_ShowCollections_, context, request, false);
}

::grpc::Status DemoService::Stub::DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::GeneralResponsePB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_DropCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_DropCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::demo::GeneralResponsePB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InsertDocs_, context, request, response);
}

void DemoService::Stub::experimental_async::InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InsertDocs_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::InsertDocs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InsertDocs_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InsertDocs_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::InsertDocs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InsertDocs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::AsyncInsertDocsRaw(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_InsertDocs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::PrepareAsyncInsertDocsRaw(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_InsertDocs_, context, request, false);
}

::grpc::Status DemoService::Stub::CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::demo::GeneralResponsePB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateIndex_, context, request, response);
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, false);
}

::grpc::Status DemoService::Stub::DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::GeneralResponsePB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropIndex_, context, request, response);
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::AsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_DropIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* DemoService::Stub::PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::GeneralResponsePB>::Create(channel_.get(), cq, rpcmethod_DropIndex_, context, request, false);
}

::grpc::Status DemoService::Stub::DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::IndexParamPB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeIndex_, context, request, response);
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParamPB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParamPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>* DemoService::Stub::AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::IndexParamPB>::Create(channel_.get(), cq, rpcmethod_DescribeIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>* DemoService::Stub::PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::IndexParamPB>::Create(channel_.get(), cq, rpcmethod_DescribeIndex_, context, request, false);
}

::grpc::Status DemoService::Stub::GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::demo::ConfigPB* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfig_, context, request, response);
}

void DemoService::Stub::experimental_async::GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::GetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::ConfigPB* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::GetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::ConfigPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>* DemoService::Stub::AsyncGetConfigRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::ConfigPB>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>* DemoService::Stub::PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::ConfigPB>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request, false);
}

::grpc::Status DemoService::Stub::SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetConfig_, context, request, response);
}

void DemoService::Stub::experimental_async::SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetConfig_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetConfig_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetConfig_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncSetConfigRaw(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_SetConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_SetConfig_, context, request, false);
}

DemoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::QueryRequestPB, ::demo::QueryResponsePB>(
          std::mem_fn(&DemoService::Service::Search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CreateCollectionRequestPB, ::demo::CollectionSchemaResponsePB>(
          std::mem_fn(&DemoService::Service::CreateCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CommandPB, ::demo::CollectionSchemaListPB>(
          std::mem_fn(&DemoService::Service::ShowCollections), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionNamePB, ::demo::GeneralResponsePB>(
          std::mem_fn(&DemoService::Service::DropCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::InsertRequestPB, ::demo::GeneralResponsePB>(
          std::mem_fn(&DemoService::Service::InsertDocs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::IndexParamPB, ::demo::GeneralResponsePB>(
          std::mem_fn(&DemoService::Service::CreateIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionNamePB, ::demo::GeneralResponsePB>(
          std::mem_fn(&DemoService::Service::DropIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionNamePB, ::demo::IndexParamPB>(
          std::mem_fn(&DemoService::Service::DescribeIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CommandPB, ::demo::ConfigPB>(
          std::mem_fn(&DemoService::Service::GetConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::ConfigPB, ::demo::Status>(
          std::mem_fn(&DemoService::Service::SetConfig), this)));
}

DemoService::Service::~Service() {
}

::grpc::Status DemoService::Service::Search(::grpc::ServerContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::CreateCollection(::grpc::ServerContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::ShowCollections(::grpc::ServerContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DropCollection(::grpc::ServerContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::InsertDocs(::grpc::ServerContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::CreateIndex(::grpc::ServerContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DropIndex(::grpc::ServerContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DescribeIndex(::grpc::ServerContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::GetConfig(::grpc::ServerContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::SetConfig(::grpc::ServerContext* context, const ::demo::ConfigPB* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace demo

