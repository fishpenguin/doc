// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryQueryPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryVectorValuePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionSchemaPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnSchemaPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnTypePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnValuePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompareExprPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVectorValuePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InnerLeafQueryPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeafQueryPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RangeQueryPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowRecordPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TermQueryPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorColumnInfoPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VectorColumnValuePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VectorQueryPB_common_2eproto;
namespace demo {
class VectorColumnInfoPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorColumnInfoPB> _instance;
} _VectorColumnInfoPB_default_instance_;
class ColumnTypePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnTypePB> _instance;
  int type_;
  const ::demo::VectorColumnInfoPB* info_;
} _ColumnTypePB_default_instance_;
class ColumnSchemaPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnSchemaPB> _instance;
} _ColumnSchemaPB_default_instance_;
class CollectionSchemaPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionSchemaPB> _instance;
} _CollectionSchemaPB_default_instance_;
class CreateCollectionRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCollectionRequestPB> _instance;
} _CreateCollectionRequestPB_default_instance_;
class CollectionSchemaResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionSchemaResponsePB> _instance;
} _CollectionSchemaResponsePB_default_instance_;
class BinaryVectorValuePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryVectorValuePB> _instance;
} _BinaryVectorValuePB_default_instance_;
class FloatVectorValuePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVectorValuePB> _instance;
} _FloatVectorValuePB_default_instance_;
class VectorColumnValuePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorColumnValuePB> _instance;
  const ::demo::FloatVectorValuePB* float_value_;
  const ::demo::BinaryVectorValuePB* binary_value_;
} _VectorColumnValuePB_default_instance_;
class ColumnValuePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnValuePB> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 int8_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int16_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
  float float_value_;
  double double_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  bool bool_value_;
  const ::demo::VectorColumnValuePB* vector_value_;
} _ColumnValuePB_default_instance_;
class QueryColumnPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryColumnPB> _instance;
} _QueryColumnPB_default_instance_;
class TermQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TermQueryPB> _instance;
} _TermQueryPB_default_instance_;
class CompareExprPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompareExprPB> _instance;
} _CompareExprPB_default_instance_;
class RangeQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeQueryPB> _instance;
} _RangeQueryPB_default_instance_;
class RowRecordPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RowRecordPB> _instance;
} _RowRecordPB_default_instance_;
class VectorQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorQueryPB> _instance;
} _VectorQueryPB_default_instance_;
class InnerLeafQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InnerLeafQueryPB> _instance;
  const ::demo::TermQueryPB* term_query_;
  const ::demo::RangeQueryPB* range_query_;
  const ::demo::VectorQueryPB* vector_query_;
} _InnerLeafQueryPB_default_instance_;
class LeafQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeafQueryPB> _instance;
} _LeafQueryPB_default_instance_;
class GeneralQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralQueryPB> _instance;
  const ::demo::LeafQueryPB* leaf_;
  const ::demo::BinaryQueryPB* bin_;
} _GeneralQueryPB_default_instance_;
class BinaryQueryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryQueryPB> _instance;
} _BinaryQueryPB_default_instance_;
class QueryRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRequestPB> _instance;
} _QueryRequestPB_default_instance_;
class QueryResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponsePB> _instance;
} _QueryResponsePB_default_instance_;
class CommandPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandPB> _instance;
} _CommandPB_default_instance_;
class CollectionSchemaListPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionSchemaListPB> _instance;
} _CollectionSchemaListPB_default_instance_;
class InsertRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRequestPB> _instance;
} _InsertRequestPB_default_instance_;
class CollectionNamePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionNamePB> _instance;
} _CollectionNamePB_default_instance_;
class ConfigPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigPB> _instance;
} _ConfigPB_default_instance_;
class IndexParamPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexParamPB> _instance;
} _IndexParamPB_default_instance_;
class GeneralResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralResponsePB> _instance;
} _GeneralResponsePB_default_instance_;
}  // namespace demo
static void InitDefaultsscc_info_BinaryQueryPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_GeneralQueryPB_default_instance_;
    new (ptr) ::demo::GeneralQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::demo::_BinaryQueryPB_default_instance_;
    new (ptr) ::demo::BinaryQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::GeneralQueryPB::InitAsDefaultInstance();
  ::demo::BinaryQueryPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryQueryPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BinaryQueryPB_common_2eproto}, {
      &scc_info_LeafQueryPB_common_2eproto.base,}};

static void InitDefaultsscc_info_BinaryVectorValuePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_BinaryVectorValuePB_default_instance_;
    new (ptr) ::demo::BinaryVectorValuePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::BinaryVectorValuePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryVectorValuePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BinaryVectorValuePB_common_2eproto}, {}};

static void InitDefaultsscc_info_CollectionNamePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CollectionNamePB_default_instance_;
    new (ptr) ::demo::CollectionNamePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CollectionNamePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionNamePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CollectionNamePB_common_2eproto}, {}};

static void InitDefaultsscc_info_CollectionSchemaListPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CollectionSchemaListPB_default_instance_;
    new (ptr) ::demo::CollectionSchemaListPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CollectionSchemaListPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CollectionSchemaListPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CollectionSchemaListPB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,
      &scc_info_CollectionSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_CollectionSchemaPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CollectionSchemaPB_default_instance_;
    new (ptr) ::demo::CollectionSchemaPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CollectionSchemaPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionSchemaPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CollectionSchemaPB_common_2eproto}, {
      &scc_info_ColumnSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_CollectionSchemaResponsePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CollectionSchemaResponsePB_default_instance_;
    new (ptr) ::demo::CollectionSchemaResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CollectionSchemaResponsePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CollectionSchemaResponsePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CollectionSchemaResponsePB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,
      &scc_info_CollectionSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_ColumnSchemaPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_ColumnSchemaPB_default_instance_;
    new (ptr) ::demo::ColumnSchemaPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::ColumnSchemaPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnSchemaPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ColumnSchemaPB_common_2eproto}, {
      &scc_info_ColumnTypePB_common_2eproto.base,}};

static void InitDefaultsscc_info_ColumnTypePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_ColumnTypePB_default_instance_;
    new (ptr) ::demo::ColumnTypePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::ColumnTypePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnTypePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ColumnTypePB_common_2eproto}, {
      &scc_info_VectorColumnInfoPB_common_2eproto.base,}};

static void InitDefaultsscc_info_ColumnValuePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_ColumnValuePB_default_instance_;
    new (ptr) ::demo::ColumnValuePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::ColumnValuePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnValuePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ColumnValuePB_common_2eproto}, {
      &scc_info_VectorColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_CommandPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CommandPB_default_instance_;
    new (ptr) ::demo::CommandPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CommandPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CommandPB_common_2eproto}, {}};

static void InitDefaultsscc_info_CompareExprPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CompareExprPB_default_instance_;
    new (ptr) ::demo::CompareExprPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CompareExprPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompareExprPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CompareExprPB_common_2eproto}, {
      &scc_info_ColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_ConfigPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_ConfigPB_default_instance_;
    new (ptr) ::demo::ConfigPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::ConfigPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConfigPB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsscc_info_CreateCollectionRequestPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_CreateCollectionRequestPB_default_instance_;
    new (ptr) ::demo::CreateCollectionRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::CreateCollectionRequestPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCollectionRequestPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateCollectionRequestPB_common_2eproto}, {
      &scc_info_CollectionSchemaPB_common_2eproto.base,}};

static void InitDefaultsscc_info_FloatVectorValuePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_FloatVectorValuePB_default_instance_;
    new (ptr) ::demo::FloatVectorValuePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::FloatVectorValuePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVectorValuePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVectorValuePB_common_2eproto}, {}};

static void InitDefaultsscc_info_GeneralResponsePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_GeneralResponsePB_default_instance_;
    new (ptr) ::demo::GeneralResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::GeneralResponsePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeneralResponsePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GeneralResponsePB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsscc_info_IndexParamPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_IndexParamPB_default_instance_;
    new (ptr) ::demo::IndexParamPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::IndexParamPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexParamPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IndexParamPB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsscc_info_InnerLeafQueryPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_InnerLeafQueryPB_default_instance_;
    new (ptr) ::demo::InnerLeafQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::InnerLeafQueryPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InnerLeafQueryPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_InnerLeafQueryPB_common_2eproto}, {
      &scc_info_TermQueryPB_common_2eproto.base,
      &scc_info_RangeQueryPB_common_2eproto.base,
      &scc_info_VectorQueryPB_common_2eproto.base,}};

static void InitDefaultsscc_info_InsertRequestPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_InsertRequestPB_default_instance_;
    new (ptr) ::demo::InsertRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::InsertRequestPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertRequestPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InsertRequestPB_common_2eproto}, {
      &scc_info_ColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_LeafQueryPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_LeafQueryPB_default_instance_;
    new (ptr) ::demo::LeafQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::LeafQueryPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeafQueryPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LeafQueryPB_common_2eproto}, {
      &scc_info_InnerLeafQueryPB_common_2eproto.base,}};

static void InitDefaultsscc_info_QueryColumnPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_QueryColumnPB_default_instance_;
    new (ptr) ::demo::QueryColumnPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::QueryColumnPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryColumnPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QueryColumnPB_common_2eproto}, {
      &scc_info_ColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_QueryRequestPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_QueryRequestPB_default_instance_;
    new (ptr) ::demo::QueryRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::QueryRequestPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryRequestPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QueryRequestPB_common_2eproto}, {
      &scc_info_BinaryQueryPB_common_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponsePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_QueryResponsePB_default_instance_;
    new (ptr) ::demo::QueryResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::QueryResponsePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponsePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QueryResponsePB_common_2eproto}, {
      &scc_info_Status_status_2eproto.base,}};

static void InitDefaultsscc_info_RangeQueryPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_RangeQueryPB_default_instance_;
    new (ptr) ::demo::RangeQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::RangeQueryPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RangeQueryPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RangeQueryPB_common_2eproto}, {
      &scc_info_CompareExprPB_common_2eproto.base,}};

static void InitDefaultsscc_info_RowRecordPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_RowRecordPB_default_instance_;
    new (ptr) ::demo::RowRecordPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::RowRecordPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowRecordPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RowRecordPB_common_2eproto}, {}};

static void InitDefaultsscc_info_TermQueryPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_TermQueryPB_default_instance_;
    new (ptr) ::demo::TermQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::TermQueryPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TermQueryPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TermQueryPB_common_2eproto}, {
      &scc_info_ColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_VectorColumnInfoPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_VectorColumnInfoPB_default_instance_;
    new (ptr) ::demo::VectorColumnInfoPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::VectorColumnInfoPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorColumnInfoPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VectorColumnInfoPB_common_2eproto}, {}};

static void InitDefaultsscc_info_VectorColumnValuePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_VectorColumnValuePB_default_instance_;
    new (ptr) ::demo::VectorColumnValuePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::VectorColumnValuePB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VectorColumnValuePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VectorColumnValuePB_common_2eproto}, {
      &scc_info_FloatVectorValuePB_common_2eproto.base,
      &scc_info_BinaryVectorValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_VectorQueryPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demo::_VectorQueryPB_default_instance_;
    new (ptr) ::demo::VectorQueryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demo::VectorQueryPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VectorQueryPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VectorQueryPB_common_2eproto}, {
      &scc_info_RowRecordPB_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnInfoPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnInfoPB, dimension_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnInfoPB, element_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnTypePB, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnTypePB, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::demo::ColumnTypePBDefaultTypeInternal, type_),
  offsetof(::demo::ColumnTypePBDefaultTypeInternal, info_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnTypePB, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, id_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, name_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnSchemaPB, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaPB, id_),
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaPB, name_),
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaPB, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CreateCollectionRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CreateCollectionRequestPB, request_id_),
  PROTOBUF_FIELD_OFFSET(::demo::CreateCollectionRequestPB, schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaResponsePB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaResponsePB, schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::BinaryVectorValuePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::BinaryVectorValuePB, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::FloatVectorValuePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::FloatVectorValuePB, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnValuePB, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnValuePB, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::demo::VectorColumnValuePBDefaultTypeInternal, float_value_),
  offsetof(::demo::VectorColumnValuePBDefaultTypeInternal, binary_value_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorColumnValuePB, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnValuePB, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::demo::ColumnValuePB, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, int8_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, int16_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, int32_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, int64_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, float_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, double_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, string_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, bool_value_),
  offsetof(::demo::ColumnValuePBDefaultTypeInternal, vector_value_),
  PROTOBUF_FIELD_OFFSET(::demo::ColumnValuePB, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::QueryColumnPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::QueryColumnPB, name_),
  PROTOBUF_FIELD_OFFSET(::demo::QueryColumnPB, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::TermQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::TermQueryPB, field_name_),
  PROTOBUF_FIELD_OFFSET(::demo::TermQueryPB, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CompareExprPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CompareExprPB, operator__),
  PROTOBUF_FIELD_OFFSET(::demo::CompareExprPB, operand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::RangeQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::RangeQueryPB, field_name_),
  PROTOBUF_FIELD_OFFSET(::demo::RangeQueryPB, operand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::RowRecordPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::RowRecordPB, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, field_name_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, vector_query_param_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, topk_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, nq_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, query_boost_),
  PROTOBUF_FIELD_OFFSET(::demo::VectorQueryPB, records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::InnerLeafQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::demo::InnerLeafQueryPB, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::demo::InnerLeafQueryPBDefaultTypeInternal, term_query_),
  offsetof(::demo::InnerLeafQueryPBDefaultTypeInternal, range_query_),
  offsetof(::demo::InnerLeafQueryPBDefaultTypeInternal, vector_query_),
  PROTOBUF_FIELD_OFFSET(::demo::InnerLeafQueryPB, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::LeafQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::LeafQueryPB, query_),
  PROTOBUF_FIELD_OFFSET(::demo::LeafQueryPB, boost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::GeneralQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::demo::GeneralQueryPB, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::demo::GeneralQueryPBDefaultTypeInternal, leaf_),
  offsetof(::demo::GeneralQueryPBDefaultTypeInternal, bin_),
  PROTOBUF_FIELD_OFFSET(::demo::GeneralQueryPB, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::BinaryQueryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::BinaryQueryPB, left_query_),
  PROTOBUF_FIELD_OFFSET(::demo::BinaryQueryPB, right_query_),
  PROTOBUF_FIELD_OFFSET(::demo::BinaryQueryPB, relation_),
  PROTOBUF_FIELD_OFFSET(::demo::BinaryQueryPB, boost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::QueryRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::QueryRequestPB, request_id_),
  PROTOBUF_FIELD_OFFSET(::demo::QueryRequestPB, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::QueryResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::QueryResponsePB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::QueryResponsePB, hits_),
  PROTOBUF_FIELD_OFFSET(::demo::QueryResponsePB, ids_),
  PROTOBUF_FIELD_OFFSET(::demo::QueryResponsePB, score_),
  PROTOBUF_FIELD_OFFSET(::demo::QueryResponsePB, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CommandPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CommandPB, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaListPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaListPB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::CollectionSchemaListPB, collection_schema_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::InsertRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::InsertRequestPB, field_name_),
  PROTOBUF_FIELD_OFFSET(::demo::InsertRequestPB, column_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionNamePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::CollectionNamePB, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::ConfigPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::ConfigPB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::ConfigPB, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::IndexParamPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::IndexParamPB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::IndexParamPB, collection_name_),
  PROTOBUF_FIELD_OFFSET(::demo::IndexParamPB, index_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demo::GeneralResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demo::GeneralResponsePB, status_),
  PROTOBUF_FIELD_OFFSET(::demo::GeneralResponsePB, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::demo::VectorColumnInfoPB)},
  { 7, -1, sizeof(::demo::ColumnTypePB)},
  { 15, -1, sizeof(::demo::ColumnSchemaPB)},
  { 23, -1, sizeof(::demo::CollectionSchemaPB)},
  { 31, -1, sizeof(::demo::CreateCollectionRequestPB)},
  { 38, -1, sizeof(::demo::CollectionSchemaResponsePB)},
  { 45, -1, sizeof(::demo::BinaryVectorValuePB)},
  { 51, -1, sizeof(::demo::FloatVectorValuePB)},
  { 57, -1, sizeof(::demo::VectorColumnValuePB)},
  { 65, -1, sizeof(::demo::ColumnValuePB)},
  { 80, -1, sizeof(::demo::QueryColumnPB)},
  { 87, -1, sizeof(::demo::TermQueryPB)},
  { 94, -1, sizeof(::demo::CompareExprPB)},
  { 101, -1, sizeof(::demo::RangeQueryPB)},
  { 108, -1, sizeof(::demo::RowRecordPB)},
  { 114, -1, sizeof(::demo::VectorQueryPB)},
  { 125, -1, sizeof(::demo::InnerLeafQueryPB)},
  { 134, -1, sizeof(::demo::LeafQueryPB)},
  { 141, -1, sizeof(::demo::GeneralQueryPB)},
  { 149, -1, sizeof(::demo::BinaryQueryPB)},
  { 158, -1, sizeof(::demo::QueryRequestPB)},
  { 165, -1, sizeof(::demo::QueryResponsePB)},
  { 175, -1, sizeof(::demo::CommandPB)},
  { 181, -1, sizeof(::demo::CollectionSchemaListPB)},
  { 188, -1, sizeof(::demo::InsertRequestPB)},
  { 195, -1, sizeof(::demo::CollectionNamePB)},
  { 201, -1, sizeof(::demo::ConfigPB)},
  { 208, -1, sizeof(::demo::IndexParamPB)},
  { 216, -1, sizeof(::demo::GeneralResponsePB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_VectorColumnInfoPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_ColumnTypePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_ColumnSchemaPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CollectionSchemaPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CreateCollectionRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CollectionSchemaResponsePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_BinaryVectorValuePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_FloatVectorValuePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_VectorColumnValuePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_ColumnValuePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_QueryColumnPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_TermQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CompareExprPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_RangeQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_RowRecordPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_VectorQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_InnerLeafQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_LeafQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_GeneralQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_BinaryQueryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_QueryRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_QueryResponsePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CommandPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CollectionSchemaListPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_InsertRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_CollectionNamePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_ConfigPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_IndexParamPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demo::_GeneralResponsePB_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\004demo\032\014status.proto\"M\n\022Ve"
  "ctorColumnInfoPB\022\021\n\tdimension\030\001 \001(\003\022$\n\014e"
  "lement_type\030\002 \001(\0162\016.demo.DataType\"a\n\014Col"
  "umnTypePB\022\036\n\004type\030\001 \001(\0162\016.demo.DataTypeH"
  "\000\022(\n\004info\030\002 \001(\0132\030.demo.VectorColumnInfoP"
  "BH\000B\007\n\005value\"L\n\016ColumnSchemaPB\022\n\n\002id\030\001 \001"
  "(\004\022\014\n\004name\030\002 \001(\t\022 \n\004type\030\003 \001(\0132\022.demo.Co"
  "lumnTypePB\"U\n\022CollectionSchemaPB\022\n\n\002id\030\001"
  " \001(\004\022\014\n\004name\030\002 \001(\t\022%\n\007columns\030\003 \003(\0132\024.de"
  "mo.ColumnSchemaPB\"Y\n\031CreateCollectionReq"
  "uestPB\022\022\n\nrequest_id\030\001 \001(\004\022(\n\006schema\030\002 \001"
  "(\0132\030.demo.CollectionSchemaPB\"d\n\032Collecti"
  "onSchemaResponsePB\022\034\n\006status\030\001 \001(\0132\014.dem"
  "o.Status\022(\n\006schema\030\002 \001(\0132\030.demo.Collecti"
  "onSchemaPB\"$\n\023BinaryVectorValuePB\022\r\n\005val"
  "ue\030\001 \003(\005\"#\n\022FloatVectorValuePB\022\r\n\005value\030"
  "\001 \003(\002\"\202\001\n\023VectorColumnValuePB\022/\n\013float_v"
  "alue\030\001 \001(\0132\030.demo.FloatVectorValuePBH\000\0221"
  "\n\014binary_value\030\002 \001(\0132\031.demo.BinaryVector"
  "ValuePBH\000B\007\n\005value\"\203\002\n\rColumnValuePB\022\024\n\n"
  "int8_value\030\001 \001(\005H\000\022\025\n\013int16_value\030\002 \001(\005H"
  "\000\022\025\n\013int32_value\030\003 \001(\005H\000\022\025\n\013int64_value\030"
  "\004 \001(\003H\000\022\025\n\013float_value\030\005 \001(\002H\000\022\026\n\014double"
  "_value\030\006 \001(\001H\000\022\026\n\014string_value\030\007 \001(\tH\000\022\024"
  "\n\nbool_value\030\010 \001(\010H\000\0221\n\014vector_value\030\t \001"
  "(\0132\031.demo.VectorColumnValuePBH\000B\007\n\005value"
  "\"A\n\rQueryColumnPB\022\014\n\004name\030\001 \001(\t\022\"\n\005value"
  "\030\002 \001(\0132\023.demo.ColumnValuePB\"F\n\013TermQuery"
  "PB\022\022\n\nfield_name\030\001 \001(\t\022#\n\006values\030\002 \003(\0132\023"
  ".demo.ColumnValuePB\"^\n\rCompareExprPB\022\'\n\010"
  "operator\030\001 \001(\0162\025.demo.CompareOperator\022$\n"
  "\007operand\030\002 \001(\0132\023.demo.ColumnValuePB\"H\n\014R"
  "angeQueryPB\022\022\n\nfield_name\030\001 \001(\t\022$\n\007opera"
  "nd\030\002 \003(\0132\023.demo.CompareExprPB\"\033\n\013RowReco"
  "rdPB\022\014\n\004data\030\001 \003(\002\"\222\001\n\rVectorQueryPB\022\022\n\n"
  "field_name\030\001 \001(\t\022\032\n\022vector_query_param\030\002"
  " \001(\t\022\014\n\004topk\030\003 \001(\003\022\n\n\002nq\030\004 \001(\003\022\023\n\013query_"
  "boost\030\005 \001(\002\022\"\n\007records\030\006 \003(\0132\021.demo.RowR"
  "ecordPB\"\234\001\n\020InnerLeafQueryPB\022\'\n\nterm_que"
  "ry\030\001 \001(\0132\021.demo.TermQueryPBH\000\022)\n\013range_q"
  "uery\030\002 \001(\0132\022.demo.RangeQueryPBH\000\022+\n\014vect"
  "or_query\030\003 \001(\0132\023.demo.VectorQueryPBH\000B\007\n"
  "\005query\"C\n\013LeafQueryPB\022%\n\005query\030\001 \001(\0132\026.d"
  "emo.InnerLeafQueryPB\022\r\n\005boost\030\002 \001(\002\"`\n\016G"
  "eneralQueryPB\022!\n\004leaf\030\001 \001(\0132\021.demo.LeafQ"
  "ueryPBH\000\022\"\n\003bin\030\002 \001(\0132\023.demo.BinaryQuery"
  "PBH\000B\007\n\005query\"\232\001\n\rBinaryQueryPB\022(\n\nleft_"
  "query\030\001 \001(\0132\024.demo.GeneralQueryPB\022)\n\013rig"
  "ht_query\030\002 \001(\0132\024.demo.GeneralQueryPB\022%\n\010"
  "relation\030\003 \001(\0162\023.demo.QueryRelation\022\r\n\005b"
  "oost\030\004 \001(\002\"I\n\016QueryRequestPB\022\022\n\nrequest_"
  "id\030\001 \001(\004\022#\n\005query\030\002 \001(\0132\024.demo.GeneralQu"
  "eryPB\"k\n\017QueryResponsePB\022\034\n\006status\030\001 \001(\013"
  "2\014.demo.Status\022\014\n\004hits\030\002 \001(\004\022\013\n\003ids\030\003 \003("
  "\003\022\r\n\005score\030\004 \003(\002\022\020\n\010distance\030\005 \003(\002\"\030\n\tCo"
  "mmandPB\022\013\n\003cmd\030\001 \001(\t\"p\n\026CollectionSchema"
  "ListPB\022\034\n\006status\030\001 \001(\0132\014.demo.Status\0228\n\026"
  "Collection_schema_list\030\002 \003(\0132\030.demo.Coll"
  "ectionSchemaPB\"P\n\017InsertRequestPB\022\022\n\nfie"
  "ld_name\030\001 \003(\t\022)\n\014column_value\030\002 \003(\0132\023.de"
  "mo.ColumnValuePB\"+\n\020CollectionNamePB\022\027\n\017"
  "Collection_name\030\001 \001(\t\"8\n\010ConfigPB\022\034\n\006sta"
  "tus\030\001 \001(\0132\014.demo.Status\022\016\n\006config\030\002 \001(\t\""
  "Z\n\014IndexParamPB\022\034\n\006status\030\001 \001(\0132\014.demo.S"
  "tatus\022\027\n\017collection_name\030\002 \001(\t\022\023\n\013index_"
  "param\030\003 \001(\t\"A\n\021GeneralResponsePB\022\034\n\006stat"
  "us\030\001 \001(\0132\014.demo.Status\022\016\n\006result\030\002 \001(\t*\225"
  "\001\n\010DataType\022\010\n\004NULL\020\000\022\010\n\004INT8\020\001\022\t\n\005INT16"
  "\020\002\022\t\n\005INT32\020\003\022\t\n\005INT64\020\004\022\n\n\006STRING\020\024\022\010\n\004"
  "BOOL\020\036\022\t\n\005FLOAT\020(\022\r\n\tHALFFLOAT\020)\022\n\n\006DOUB"
  "LE\020*\022\n\n\006VECTOR\020d\022\014\n\007UNKNOWN\020\217N*C\n\017Compar"
  "eOperator\022\006\n\002LT\020\000\022\007\n\003LTE\020\001\022\006\n\002EQ\020\002\022\006\n\002GT"
  "\020\003\022\007\n\003GTE\020\004\022\006\n\002NE\020\005*/\n\rQueryRelation\022\006\n\002"
  "R1\020\000\022\006\n\002R2\020\001\022\006\n\002R3\020\002\022\006\n\002R4\020\0032\202\005\n\013DemoSer"
  "vice\0227\n\006Search\022\024.demo.QueryRequestPB\032\025.d"
  "emo.QueryResponsePB\"\000\022W\n\020CreateCollectio"
  "n\022\037.demo.CreateCollectionRequestPB\032 .dem"
  "o.CollectionSchemaResponsePB\"\000\022B\n\017ShowCo"
  "llections\022\017.demo.CommandPB\032\034.demo.Collec"
  "tionSchemaListPB\"\000\022C\n\016DropCollection\022\026.d"
  "emo.CollectionNamePB\032\027.demo.GeneralRespo"
  "nsePB\"\000\022>\n\nInsertDocs\022\025.demo.InsertReque"
  "stPB\032\027.demo.GeneralResponsePB\"\000\022<\n\013Creat"
  "eIndex\022\022.demo.IndexParamPB\032\027.demo.Genera"
  "lResponsePB\"\000\022>\n\tDropIndex\022\026.demo.Collec"
  "tionNamePB\032\027.demo.GeneralResponsePB\"\000\022=\n"
  "\rDescribeIndex\022\026.demo.CollectionNamePB\032\022"
  ".demo.IndexParamPB\"\000\022.\n\tGetConfig\022\017.demo"
  ".CommandPB\032\016.demo.ConfigPB\"\000\022+\n\tSetConfi"
  "g\022\016.demo.ConfigPB\032\014.demo.Status\"\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[28] = {
  &scc_info_BinaryQueryPB_common_2eproto.base,
  &scc_info_BinaryVectorValuePB_common_2eproto.base,
  &scc_info_CollectionNamePB_common_2eproto.base,
  &scc_info_CollectionSchemaListPB_common_2eproto.base,
  &scc_info_CollectionSchemaPB_common_2eproto.base,
  &scc_info_CollectionSchemaResponsePB_common_2eproto.base,
  &scc_info_ColumnSchemaPB_common_2eproto.base,
  &scc_info_ColumnTypePB_common_2eproto.base,
  &scc_info_ColumnValuePB_common_2eproto.base,
  &scc_info_CommandPB_common_2eproto.base,
  &scc_info_CompareExprPB_common_2eproto.base,
  &scc_info_ConfigPB_common_2eproto.base,
  &scc_info_CreateCollectionRequestPB_common_2eproto.base,
  &scc_info_FloatVectorValuePB_common_2eproto.base,
  &scc_info_GeneralResponsePB_common_2eproto.base,
  &scc_info_IndexParamPB_common_2eproto.base,
  &scc_info_InnerLeafQueryPB_common_2eproto.base,
  &scc_info_InsertRequestPB_common_2eproto.base,
  &scc_info_LeafQueryPB_common_2eproto.base,
  &scc_info_QueryColumnPB_common_2eproto.base,
  &scc_info_QueryRequestPB_common_2eproto.base,
  &scc_info_QueryResponsePB_common_2eproto.base,
  &scc_info_RangeQueryPB_common_2eproto.base,
  &scc_info_RowRecordPB_common_2eproto.base,
  &scc_info_TermQueryPB_common_2eproto.base,
  &scc_info_VectorColumnInfoPB_common_2eproto.base,
  &scc_info_VectorColumnValuePB_common_2eproto.base,
  &scc_info_VectorQueryPB_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
static bool descriptor_table_common_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  &descriptor_table_common_2eproto_initialized, descriptor_table_protodef_common_2eproto, "common.proto", 3601,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 28, 1,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 29, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto), true);
namespace demo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20:
    case 30:
    case 40:
    case 41:
    case 42:
    case 100:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompareOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool CompareOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryRelation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool QueryRelation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VectorColumnInfoPB::InitAsDefaultInstance() {
}
class VectorColumnInfoPB::_Internal {
 public:
};

VectorColumnInfoPB::VectorColumnInfoPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.VectorColumnInfoPB)
}
VectorColumnInfoPB::VectorColumnInfoPB(const VectorColumnInfoPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dimension_, &from.dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_type_) -
    reinterpret_cast<char*>(&dimension_)) + sizeof(element_type_));
  // @@protoc_insertion_point(copy_constructor:demo.VectorColumnInfoPB)
}

void VectorColumnInfoPB::SharedCtor() {
  ::memset(&dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_type_) -
      reinterpret_cast<char*>(&dimension_)) + sizeof(element_type_));
}

VectorColumnInfoPB::~VectorColumnInfoPB() {
  // @@protoc_insertion_point(destructor:demo.VectorColumnInfoPB)
  SharedDtor();
}

void VectorColumnInfoPB::SharedDtor() {
}

void VectorColumnInfoPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorColumnInfoPB& VectorColumnInfoPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorColumnInfoPB_common_2eproto.base);
  return *internal_default_instance();
}


void VectorColumnInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.VectorColumnInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_type_) -
      reinterpret_cast<char*>(&dimension_)) + sizeof(element_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VectorColumnInfoPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.DataType element_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_element_type(static_cast<::demo::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VectorColumnInfoPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.VectorColumnInfoPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 dimension = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.DataType element_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_element_type(static_cast< ::demo::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.VectorColumnInfoPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.VectorColumnInfoPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VectorColumnInfoPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.VectorColumnInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dimension = 1;
  if (this->dimension() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->dimension(), output);
  }

  // .demo.DataType element_type = 2;
  if (this->element_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->element_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.VectorColumnInfoPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorColumnInfoPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.VectorColumnInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dimension = 1;
  if (this->dimension() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->dimension(), target);
  }

  // .demo.DataType element_type = 2;
  if (this->element_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->element_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.VectorColumnInfoPB)
  return target;
}

size_t VectorColumnInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.VectorColumnInfoPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 dimension = 1;
  if (this->dimension() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->dimension());
  }

  // .demo.DataType element_type = 2;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->element_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorColumnInfoPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.VectorColumnInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorColumnInfoPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorColumnInfoPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.VectorColumnInfoPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.VectorColumnInfoPB)
    MergeFrom(*source);
  }
}

void VectorColumnInfoPB::MergeFrom(const VectorColumnInfoPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.VectorColumnInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension() != 0) {
    set_dimension(from.dimension());
  }
  if (from.element_type() != 0) {
    set_element_type(from.element_type());
  }
}

void VectorColumnInfoPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.VectorColumnInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorColumnInfoPB::CopyFrom(const VectorColumnInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.VectorColumnInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorColumnInfoPB::IsInitialized() const {
  return true;
}

void VectorColumnInfoPB::InternalSwap(VectorColumnInfoPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dimension_, other->dimension_);
  swap(element_type_, other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorColumnInfoPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnTypePB::InitAsDefaultInstance() {
  ::demo::_ColumnTypePB_default_instance_.type_ = 0;
  ::demo::_ColumnTypePB_default_instance_.info_ = const_cast< ::demo::VectorColumnInfoPB*>(
      ::demo::VectorColumnInfoPB::internal_default_instance());
}
class ColumnTypePB::_Internal {
 public:
  static const ::demo::VectorColumnInfoPB& info(const ColumnTypePB* msg);
};

const ::demo::VectorColumnInfoPB&
ColumnTypePB::_Internal::info(const ColumnTypePB* msg) {
  return *msg->value_.info_;
}
void ColumnTypePB::set_allocated_info(::demo::VectorColumnInfoPB* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnTypePB.info)
}
ColumnTypePB::ColumnTypePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.ColumnTypePB)
}
ColumnTypePB::ColumnTypePB(const ColumnTypePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case kInfo: {
      mutable_info()->::demo::VectorColumnInfoPB::MergeFrom(from.info());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:demo.ColumnTypePB)
}

void ColumnTypePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnTypePB_common_2eproto.base);
  clear_has_value();
}

ColumnTypePB::~ColumnTypePB() {
  // @@protoc_insertion_point(destructor:demo.ColumnTypePB)
  SharedDtor();
}

void ColumnTypePB::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void ColumnTypePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnTypePB& ColumnTypePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnTypePB_common_2eproto.base);
  return *internal_default_instance();
}


void ColumnTypePB::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:demo.ColumnTypePB)
  switch (value_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ColumnTypePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.ColumnTypePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnTypePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.DataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::demo::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .demo.VectorColumnInfoPB info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnTypePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.ColumnTypePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.DataType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::demo::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.VectorColumnInfoPB info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.ColumnTypePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.ColumnTypePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnTypePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.ColumnTypePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.DataType type = 1;
  if (has_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .demo.VectorColumnInfoPB info = 2;
  if (has_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.ColumnTypePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnTypePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.ColumnTypePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.DataType type = 1;
  if (has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .demo.VectorColumnInfoPB info = 2;
  if (has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.ColumnTypePB)
  return target;
}

size_t ColumnTypePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.ColumnTypePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .demo.DataType type = 1;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    // .demo.VectorColumnInfoPB info = 2;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnTypePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.ColumnTypePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnTypePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnTypePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.ColumnTypePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.ColumnTypePB)
    MergeFrom(*source);
  }
}

void ColumnTypePB::MergeFrom(const ColumnTypePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.ColumnTypePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case kInfo: {
      mutable_info()->::demo::VectorColumnInfoPB::MergeFrom(from.info());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ColumnTypePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.ColumnTypePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnTypePB::CopyFrom(const ColumnTypePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.ColumnTypePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnTypePB::IsInitialized() const {
  return true;
}

void ColumnTypePB::InternalSwap(ColumnTypePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnTypePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnSchemaPB::InitAsDefaultInstance() {
  ::demo::_ColumnSchemaPB_default_instance_._instance.get_mutable()->type_ = const_cast< ::demo::ColumnTypePB*>(
      ::demo::ColumnTypePB::internal_default_instance());
}
class ColumnSchemaPB::_Internal {
 public:
  static const ::demo::ColumnTypePB& type(const ColumnSchemaPB* msg);
};

const ::demo::ColumnTypePB&
ColumnSchemaPB::_Internal::type(const ColumnSchemaPB* msg) {
  return *msg->type_;
}
ColumnSchemaPB::ColumnSchemaPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.ColumnSchemaPB)
}
ColumnSchemaPB::ColumnSchemaPB(const ColumnSchemaPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    type_ = new ::demo::ColumnTypePB(*from.type_);
  } else {
    type_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:demo.ColumnSchemaPB)
}

void ColumnSchemaPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnSchemaPB_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

ColumnSchemaPB::~ColumnSchemaPB() {
  // @@protoc_insertion_point(destructor:demo.ColumnSchemaPB)
  SharedDtor();
}

void ColumnSchemaPB::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void ColumnSchemaPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnSchemaPB& ColumnSchemaPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnSchemaPB_common_2eproto.base);
  return *internal_default_instance();
}


void ColumnSchemaPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.ColumnSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnSchemaPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "demo.ColumnSchemaPB.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.ColumnTypePB type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnSchemaPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.ColumnSchemaPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.ColumnSchemaPB.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.ColumnTypePB type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.ColumnSchemaPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.ColumnSchemaPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnSchemaPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.ColumnSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ColumnSchemaPB.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .demo.ColumnTypePB type = 3;
  if (this->has_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::type(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.ColumnSchemaPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnSchemaPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.ColumnSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ColumnSchemaPB.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .demo.ColumnTypePB type = 3;
  if (this->has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::type(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.ColumnSchemaPB)
  return target;
}

size_t ColumnSchemaPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.ColumnSchemaPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .demo.ColumnTypePB type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnSchemaPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.ColumnSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnSchemaPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnSchemaPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.ColumnSchemaPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.ColumnSchemaPB)
    MergeFrom(*source);
  }
}

void ColumnSchemaPB::MergeFrom(const ColumnSchemaPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.ColumnSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    mutable_type()->::demo::ColumnTypePB::MergeFrom(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ColumnSchemaPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.ColumnSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnSchemaPB::CopyFrom(const ColumnSchemaPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.ColumnSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnSchemaPB::IsInitialized() const {
  return true;
}

void ColumnSchemaPB::InternalSwap(ColumnSchemaPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnSchemaPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionSchemaPB::InitAsDefaultInstance() {
}
class CollectionSchemaPB::_Internal {
 public:
};

CollectionSchemaPB::CollectionSchemaPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CollectionSchemaPB)
}
CollectionSchemaPB::CollectionSchemaPB(const CollectionSchemaPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:demo.CollectionSchemaPB)
}

void CollectionSchemaPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionSchemaPB_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

CollectionSchemaPB::~CollectionSchemaPB() {
  // @@protoc_insertion_point(destructor:demo.CollectionSchemaPB)
  SharedDtor();
}

void CollectionSchemaPB::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CollectionSchemaPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionSchemaPB& CollectionSchemaPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionSchemaPB_common_2eproto.base);
  return *internal_default_instance();
}


void CollectionSchemaPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CollectionSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionSchemaPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "demo.CollectionSchemaPB.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .demo.ColumnSchemaPB columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionSchemaPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CollectionSchemaPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.CollectionSchemaPB.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .demo.ColumnSchemaPB columns = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CollectionSchemaPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CollectionSchemaPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionSchemaPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CollectionSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.CollectionSchemaPB.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .demo.ColumnSchemaPB columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->columns(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CollectionSchemaPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionSchemaPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CollectionSchemaPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.CollectionSchemaPB.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .demo.ColumnSchemaPB columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->columns(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CollectionSchemaPB)
  return target;
}

size_t CollectionSchemaPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CollectionSchemaPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .demo.ColumnSchemaPB columns = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionSchemaPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CollectionSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionSchemaPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionSchemaPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CollectionSchemaPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CollectionSchemaPB)
    MergeFrom(*source);
  }
}

void CollectionSchemaPB::MergeFrom(const CollectionSchemaPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CollectionSchemaPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CollectionSchemaPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CollectionSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionSchemaPB::CopyFrom(const CollectionSchemaPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CollectionSchemaPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionSchemaPB::IsInitialized() const {
  return true;
}

void CollectionSchemaPB::InternalSwap(CollectionSchemaPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionSchemaPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateCollectionRequestPB::InitAsDefaultInstance() {
  ::demo::_CreateCollectionRequestPB_default_instance_._instance.get_mutable()->schema_ = const_cast< ::demo::CollectionSchemaPB*>(
      ::demo::CollectionSchemaPB::internal_default_instance());
}
class CreateCollectionRequestPB::_Internal {
 public:
  static const ::demo::CollectionSchemaPB& schema(const CreateCollectionRequestPB* msg);
};

const ::demo::CollectionSchemaPB&
CreateCollectionRequestPB::_Internal::schema(const CreateCollectionRequestPB* msg) {
  return *msg->schema_;
}
CreateCollectionRequestPB::CreateCollectionRequestPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CreateCollectionRequestPB)
}
CreateCollectionRequestPB::CreateCollectionRequestPB(const CreateCollectionRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_schema()) {
    schema_ = new ::demo::CollectionSchemaPB(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:demo.CreateCollectionRequestPB)
}

void CreateCollectionRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCollectionRequestPB_common_2eproto.base);
  ::memset(&schema_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&schema_)) + sizeof(request_id_));
}

CreateCollectionRequestPB::~CreateCollectionRequestPB() {
  // @@protoc_insertion_point(destructor:demo.CreateCollectionRequestPB)
  SharedDtor();
}

void CreateCollectionRequestPB::SharedDtor() {
  if (this != internal_default_instance()) delete schema_;
}

void CreateCollectionRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCollectionRequestPB& CreateCollectionRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCollectionRequestPB_common_2eproto.base);
  return *internal_default_instance();
}


void CreateCollectionRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CreateCollectionRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  request_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateCollectionRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.CollectionSchemaPB schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateCollectionRequestPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CreateCollectionRequestPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 request_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.CollectionSchemaPB schema = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CreateCollectionRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CreateCollectionRequestPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateCollectionRequestPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CreateCollectionRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // .demo.CollectionSchemaPB schema = 2;
  if (this->has_schema()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::schema(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CreateCollectionRequestPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCollectionRequestPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CreateCollectionRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // .demo.CollectionSchemaPB schema = 2;
  if (this->has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::schema(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CreateCollectionRequestPB)
  return target;
}

size_t CreateCollectionRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CreateCollectionRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.CollectionSchemaPB schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCollectionRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CreateCollectionRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCollectionRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCollectionRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CreateCollectionRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CreateCollectionRequestPB)
    MergeFrom(*source);
  }
}

void CreateCollectionRequestPB::MergeFrom(const CreateCollectionRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CreateCollectionRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schema()) {
    mutable_schema()->::demo::CollectionSchemaPB::MergeFrom(from.schema());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void CreateCollectionRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CreateCollectionRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCollectionRequestPB::CopyFrom(const CreateCollectionRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CreateCollectionRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCollectionRequestPB::IsInitialized() const {
  return true;
}

void CreateCollectionRequestPB::InternalSwap(CreateCollectionRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(schema_, other->schema_);
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCollectionRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionSchemaResponsePB::InitAsDefaultInstance() {
  ::demo::_CollectionSchemaResponsePB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
  ::demo::_CollectionSchemaResponsePB_default_instance_._instance.get_mutable()->schema_ = const_cast< ::demo::CollectionSchemaPB*>(
      ::demo::CollectionSchemaPB::internal_default_instance());
}
class CollectionSchemaResponsePB::_Internal {
 public:
  static const ::demo::Status& status(const CollectionSchemaResponsePB* msg);
  static const ::demo::CollectionSchemaPB& schema(const CollectionSchemaResponsePB* msg);
};

const ::demo::Status&
CollectionSchemaResponsePB::_Internal::status(const CollectionSchemaResponsePB* msg) {
  return *msg->status_;
}
const ::demo::CollectionSchemaPB&
CollectionSchemaResponsePB::_Internal::schema(const CollectionSchemaResponsePB* msg) {
  return *msg->schema_;
}
void CollectionSchemaResponsePB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
CollectionSchemaResponsePB::CollectionSchemaResponsePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CollectionSchemaResponsePB)
}
CollectionSchemaResponsePB::CollectionSchemaResponsePB(const CollectionSchemaResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_schema()) {
    schema_ = new ::demo::CollectionSchemaPB(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.CollectionSchemaResponsePB)
}

void CollectionSchemaResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionSchemaResponsePB_common_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_) -
      reinterpret_cast<char*>(&status_)) + sizeof(schema_));
}

CollectionSchemaResponsePB::~CollectionSchemaResponsePB() {
  // @@protoc_insertion_point(destructor:demo.CollectionSchemaResponsePB)
  SharedDtor();
}

void CollectionSchemaResponsePB::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete schema_;
}

void CollectionSchemaResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionSchemaResponsePB& CollectionSchemaResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionSchemaResponsePB_common_2eproto.base);
  return *internal_default_instance();
}


void CollectionSchemaResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CollectionSchemaResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionSchemaResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.CollectionSchemaPB schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionSchemaResponsePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CollectionSchemaResponsePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.CollectionSchemaPB schema = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CollectionSchemaResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CollectionSchemaResponsePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionSchemaResponsePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CollectionSchemaResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .demo.CollectionSchemaPB schema = 2;
  if (this->has_schema()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::schema(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CollectionSchemaResponsePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionSchemaResponsePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CollectionSchemaResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .demo.CollectionSchemaPB schema = 2;
  if (this->has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::schema(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CollectionSchemaResponsePB)
  return target;
}

size_t CollectionSchemaResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CollectionSchemaResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .demo.CollectionSchemaPB schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionSchemaResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CollectionSchemaResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionSchemaResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionSchemaResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CollectionSchemaResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CollectionSchemaResponsePB)
    MergeFrom(*source);
  }
}

void CollectionSchemaResponsePB::MergeFrom(const CollectionSchemaResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CollectionSchemaResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::demo::Status::MergeFrom(from.status());
  }
  if (from.has_schema()) {
    mutable_schema()->::demo::CollectionSchemaPB::MergeFrom(from.schema());
  }
}

void CollectionSchemaResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CollectionSchemaResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionSchemaResponsePB::CopyFrom(const CollectionSchemaResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CollectionSchemaResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionSchemaResponsePB::IsInitialized() const {
  return true;
}

void CollectionSchemaResponsePB::InternalSwap(CollectionSchemaResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(schema_, other->schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionSchemaResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryVectorValuePB::InitAsDefaultInstance() {
}
class BinaryVectorValuePB::_Internal {
 public:
};

BinaryVectorValuePB::BinaryVectorValuePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.BinaryVectorValuePB)
}
BinaryVectorValuePB::BinaryVectorValuePB(const BinaryVectorValuePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:demo.BinaryVectorValuePB)
}

void BinaryVectorValuePB::SharedCtor() {
}

BinaryVectorValuePB::~BinaryVectorValuePB() {
  // @@protoc_insertion_point(destructor:demo.BinaryVectorValuePB)
  SharedDtor();
}

void BinaryVectorValuePB::SharedDtor() {
}

void BinaryVectorValuePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryVectorValuePB& BinaryVectorValuePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryVectorValuePB_common_2eproto.base);
  return *internal_default_instance();
}


void BinaryVectorValuePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.BinaryVectorValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryVectorValuePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryVectorValuePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.BinaryVectorValuePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.BinaryVectorValuePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.BinaryVectorValuePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryVectorValuePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.BinaryVectorValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  if (this->value_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.BinaryVectorValuePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryVectorValuePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.BinaryVectorValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  if (this->value_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _value_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.BinaryVectorValuePB)
  return target;
}

size_t BinaryVectorValuePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.BinaryVectorValuePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryVectorValuePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.BinaryVectorValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryVectorValuePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryVectorValuePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.BinaryVectorValuePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.BinaryVectorValuePB)
    MergeFrom(*source);
  }
}

void BinaryVectorValuePB::MergeFrom(const BinaryVectorValuePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.BinaryVectorValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void BinaryVectorValuePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.BinaryVectorValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryVectorValuePB::CopyFrom(const BinaryVectorValuePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.BinaryVectorValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryVectorValuePB::IsInitialized() const {
  return true;
}

void BinaryVectorValuePB::InternalSwap(BinaryVectorValuePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryVectorValuePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVectorValuePB::InitAsDefaultInstance() {
}
class FloatVectorValuePB::_Internal {
 public:
};

FloatVectorValuePB::FloatVectorValuePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.FloatVectorValuePB)
}
FloatVectorValuePB::FloatVectorValuePB(const FloatVectorValuePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:demo.FloatVectorValuePB)
}

void FloatVectorValuePB::SharedCtor() {
}

FloatVectorValuePB::~FloatVectorValuePB() {
  // @@protoc_insertion_point(destructor:demo.FloatVectorValuePB)
  SharedDtor();
}

void FloatVectorValuePB::SharedDtor() {
}

void FloatVectorValuePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVectorValuePB& FloatVectorValuePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVectorValuePB_common_2eproto.base);
  return *internal_default_instance();
}


void FloatVectorValuePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.FloatVectorValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVectorValuePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVectorValuePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.FloatVectorValuePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.FloatVectorValuePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.FloatVectorValuePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVectorValuePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.FloatVectorValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.FloatVectorValuePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVectorValuePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.FloatVectorValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _value_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.FloatVectorValuePB)
  return target;
}

size_t FloatVectorValuePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.FloatVectorValuePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVectorValuePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.FloatVectorValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVectorValuePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVectorValuePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.FloatVectorValuePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.FloatVectorValuePB)
    MergeFrom(*source);
  }
}

void FloatVectorValuePB::MergeFrom(const FloatVectorValuePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.FloatVectorValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void FloatVectorValuePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.FloatVectorValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVectorValuePB::CopyFrom(const FloatVectorValuePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.FloatVectorValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVectorValuePB::IsInitialized() const {
  return true;
}

void FloatVectorValuePB::InternalSwap(FloatVectorValuePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVectorValuePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VectorColumnValuePB::InitAsDefaultInstance() {
  ::demo::_VectorColumnValuePB_default_instance_.float_value_ = const_cast< ::demo::FloatVectorValuePB*>(
      ::demo::FloatVectorValuePB::internal_default_instance());
  ::demo::_VectorColumnValuePB_default_instance_.binary_value_ = const_cast< ::demo::BinaryVectorValuePB*>(
      ::demo::BinaryVectorValuePB::internal_default_instance());
}
class VectorColumnValuePB::_Internal {
 public:
  static const ::demo::FloatVectorValuePB& float_value(const VectorColumnValuePB* msg);
  static const ::demo::BinaryVectorValuePB& binary_value(const VectorColumnValuePB* msg);
};

const ::demo::FloatVectorValuePB&
VectorColumnValuePB::_Internal::float_value(const VectorColumnValuePB* msg) {
  return *msg->value_.float_value_;
}
const ::demo::BinaryVectorValuePB&
VectorColumnValuePB::_Internal::binary_value(const VectorColumnValuePB* msg) {
  return *msg->value_.binary_value_;
}
void VectorColumnValuePB::set_allocated_float_value(::demo::FloatVectorValuePB* float_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (float_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      float_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_value, submessage_arena);
    }
    set_has_float_value();
    value_.float_value_ = float_value;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.VectorColumnValuePB.float_value)
}
void VectorColumnValuePB::set_allocated_binary_value(::demo::BinaryVectorValuePB* binary_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (binary_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binary_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_value, submessage_arena);
    }
    set_has_binary_value();
    value_.binary_value_ = binary_value;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.VectorColumnValuePB.binary_value)
}
VectorColumnValuePB::VectorColumnValuePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.VectorColumnValuePB)
}
VectorColumnValuePB::VectorColumnValuePB(const VectorColumnValuePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kFloatValue: {
      mutable_float_value()->::demo::FloatVectorValuePB::MergeFrom(from.float_value());
      break;
    }
    case kBinaryValue: {
      mutable_binary_value()->::demo::BinaryVectorValuePB::MergeFrom(from.binary_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:demo.VectorColumnValuePB)
}

void VectorColumnValuePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorColumnValuePB_common_2eproto.base);
  clear_has_value();
}

VectorColumnValuePB::~VectorColumnValuePB() {
  // @@protoc_insertion_point(destructor:demo.VectorColumnValuePB)
  SharedDtor();
}

void VectorColumnValuePB::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void VectorColumnValuePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorColumnValuePB& VectorColumnValuePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorColumnValuePB_common_2eproto.base);
  return *internal_default_instance();
}


void VectorColumnValuePB::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:demo.VectorColumnValuePB)
  switch (value_case()) {
    case kFloatValue: {
      delete value_.float_value_;
      break;
    }
    case kBinaryValue: {
      delete value_.binary_value_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void VectorColumnValuePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.VectorColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VectorColumnValuePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.FloatVectorValuePB float_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_float_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.BinaryVectorValuePB binary_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_binary_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VectorColumnValuePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.VectorColumnValuePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.FloatVectorValuePB float_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_float_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.BinaryVectorValuePB binary_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_binary_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.VectorColumnValuePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.VectorColumnValuePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VectorColumnValuePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.VectorColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.FloatVectorValuePB float_value = 1;
  if (has_float_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::float_value(this), output);
  }

  // .demo.BinaryVectorValuePB binary_value = 2;
  if (has_binary_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::binary_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.VectorColumnValuePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorColumnValuePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.VectorColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.FloatVectorValuePB float_value = 1;
  if (has_float_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::float_value(this), target);
  }

  // .demo.BinaryVectorValuePB binary_value = 2;
  if (has_binary_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::binary_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.VectorColumnValuePB)
  return target;
}

size_t VectorColumnValuePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.VectorColumnValuePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .demo.FloatVectorValuePB float_value = 1;
    case kFloatValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.float_value_);
      break;
    }
    // .demo.BinaryVectorValuePB binary_value = 2;
    case kBinaryValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.binary_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorColumnValuePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.VectorColumnValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorColumnValuePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorColumnValuePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.VectorColumnValuePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.VectorColumnValuePB)
    MergeFrom(*source);
  }
}

void VectorColumnValuePB::MergeFrom(const VectorColumnValuePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.VectorColumnValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kFloatValue: {
      mutable_float_value()->::demo::FloatVectorValuePB::MergeFrom(from.float_value());
      break;
    }
    case kBinaryValue: {
      mutable_binary_value()->::demo::BinaryVectorValuePB::MergeFrom(from.binary_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void VectorColumnValuePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.VectorColumnValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorColumnValuePB::CopyFrom(const VectorColumnValuePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.VectorColumnValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorColumnValuePB::IsInitialized() const {
  return true;
}

void VectorColumnValuePB::InternalSwap(VectorColumnValuePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorColumnValuePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnValuePB::InitAsDefaultInstance() {
  ::demo::_ColumnValuePB_default_instance_.int8_value_ = 0;
  ::demo::_ColumnValuePB_default_instance_.int16_value_ = 0;
  ::demo::_ColumnValuePB_default_instance_.int32_value_ = 0;
  ::demo::_ColumnValuePB_default_instance_.int64_value_ = PROTOBUF_LONGLONG(0);
  ::demo::_ColumnValuePB_default_instance_.float_value_ = 0;
  ::demo::_ColumnValuePB_default_instance_.double_value_ = 0;
  ::demo::_ColumnValuePB_default_instance_.string_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::demo::_ColumnValuePB_default_instance_.bool_value_ = false;
  ::demo::_ColumnValuePB_default_instance_.vector_value_ = const_cast< ::demo::VectorColumnValuePB*>(
      ::demo::VectorColumnValuePB::internal_default_instance());
}
class ColumnValuePB::_Internal {
 public:
  static const ::demo::VectorColumnValuePB& vector_value(const ColumnValuePB* msg);
};

const ::demo::VectorColumnValuePB&
ColumnValuePB::_Internal::vector_value(const ColumnValuePB* msg) {
  return *msg->value_.vector_value_;
}
void ColumnValuePB::set_allocated_vector_value(::demo::VectorColumnValuePB* vector_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (vector_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_value, submessage_arena);
    }
    set_has_vector_value();
    value_.vector_value_ = vector_value;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.ColumnValuePB.vector_value)
}
ColumnValuePB::ColumnValuePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.ColumnValuePB)
}
ColumnValuePB::ColumnValuePB(const ColumnValuePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInt8Value: {
      set_int8_value(from.int8_value());
      break;
    }
    case kInt16Value: {
      set_int16_value(from.int16_value());
      break;
    }
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kVectorValue: {
      mutable_vector_value()->::demo::VectorColumnValuePB::MergeFrom(from.vector_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:demo.ColumnValuePB)
}

void ColumnValuePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnValuePB_common_2eproto.base);
  clear_has_value();
}

ColumnValuePB::~ColumnValuePB() {
  // @@protoc_insertion_point(destructor:demo.ColumnValuePB)
  SharedDtor();
}

void ColumnValuePB::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void ColumnValuePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnValuePB& ColumnValuePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnValuePB_common_2eproto.base);
  return *internal_default_instance();
}


void ColumnValuePB::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:demo.ColumnValuePB)
  switch (value_case()) {
    case kInt8Value: {
      // No need to clear
      break;
    }
    case kInt16Value: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kVectorValue: {
      delete value_.vector_value_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ColumnValuePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.ColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnValuePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 int8_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_int8_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int16_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_int16_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_string_value(), ptr, ctx, "demo.ColumnValuePB.string_value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.VectorColumnValuePB vector_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_vector_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnValuePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.ColumnValuePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 int8_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int8_value_)));
          set_has_int8_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int16_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int16_value_)));
          set_has_int16_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int32_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int64_value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float_value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.ColumnValuePB.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.VectorColumnValuePB vector_value = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vector_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.ColumnValuePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.ColumnValuePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnValuePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.ColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 int8_value = 1;
  if (has_int8_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->int8_value(), output);
  }

  // int32 int16_value = 2;
  if (has_int16_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->int16_value(), output);
  }

  // int32 int32_value = 3;
  if (has_int32_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }

  // int64 int64_value = 4;
  if (has_int64_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->int64_value(), output);
  }

  // float float_value = 5;
  if (has_float_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->float_value(), output);
  }

  // double double_value = 6;
  if (has_double_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->double_value(), output);
  }

  // string string_value = 7;
  if (has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ColumnValuePB.string_value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->string_value(), output);
  }

  // bool bool_value = 8;
  if (has_bool_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->bool_value(), output);
  }

  // .demo.VectorColumnValuePB vector_value = 9;
  if (has_vector_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::vector_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.ColumnValuePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnValuePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.ColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 int8_value = 1;
  if (has_int8_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->int8_value(), target);
  }

  // int32 int16_value = 2;
  if (has_int16_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->int16_value(), target);
  }

  // int32 int32_value = 3;
  if (has_int32_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_value(), target);
  }

  // int64 int64_value = 4;
  if (has_int64_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->int64_value(), target);
  }

  // float float_value = 5;
  if (has_float_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->float_value(), target);
  }

  // double double_value = 6;
  if (has_double_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->double_value(), target);
  }

  // string string_value = 7;
  if (has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ColumnValuePB.string_value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->string_value(), target);
  }

  // bool bool_value = 8;
  if (has_bool_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->bool_value(), target);
  }

  // .demo.VectorColumnValuePB vector_value = 9;
  if (has_vector_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::vector_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.ColumnValuePB)
  return target;
}

size_t ColumnValuePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.ColumnValuePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int32 int8_value = 1;
    case kInt8Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->int8_value());
      break;
    }
    // int32 int16_value = 2;
    case kInt16Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->int16_value());
      break;
    }
    // int32 int32_value = 3;
    case kInt32Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->int32_value());
      break;
    }
    // int64 int64_value = 4;
    case kInt64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // float float_value = 5;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 6;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 7;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // bool bool_value = 8;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // .demo.VectorColumnValuePB vector_value = 9;
    case kVectorValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.vector_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnValuePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.ColumnValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnValuePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnValuePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.ColumnValuePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.ColumnValuePB)
    MergeFrom(*source);
  }
}

void ColumnValuePB::MergeFrom(const ColumnValuePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.ColumnValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kInt8Value: {
      set_int8_value(from.int8_value());
      break;
    }
    case kInt16Value: {
      set_int16_value(from.int16_value());
      break;
    }
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kVectorValue: {
      mutable_vector_value()->::demo::VectorColumnValuePB::MergeFrom(from.vector_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ColumnValuePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.ColumnValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnValuePB::CopyFrom(const ColumnValuePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.ColumnValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnValuePB::IsInitialized() const {
  return true;
}

void ColumnValuePB::InternalSwap(ColumnValuePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnValuePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryColumnPB::InitAsDefaultInstance() {
  ::demo::_QueryColumnPB_default_instance_._instance.get_mutable()->value_ = const_cast< ::demo::ColumnValuePB*>(
      ::demo::ColumnValuePB::internal_default_instance());
}
class QueryColumnPB::_Internal {
 public:
  static const ::demo::ColumnValuePB& value(const QueryColumnPB* msg);
};

const ::demo::ColumnValuePB&
QueryColumnPB::_Internal::value(const QueryColumnPB* msg) {
  return *msg->value_;
}
QueryColumnPB::QueryColumnPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.QueryColumnPB)
}
QueryColumnPB::QueryColumnPB(const QueryColumnPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::demo::ColumnValuePB(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.QueryColumnPB)
}

void QueryColumnPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryColumnPB_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

QueryColumnPB::~QueryColumnPB() {
  // @@protoc_insertion_point(destructor:demo.QueryColumnPB)
  SharedDtor();
}

void QueryColumnPB::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void QueryColumnPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryColumnPB& QueryColumnPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryColumnPB_common_2eproto.base);
  return *internal_default_instance();
}


void QueryColumnPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.QueryColumnPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryColumnPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "demo.QueryColumnPB.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.ColumnValuePB value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryColumnPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.QueryColumnPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.QueryColumnPB.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.ColumnValuePB value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.QueryColumnPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.QueryColumnPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryColumnPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.QueryColumnPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.QueryColumnPB.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .demo.ColumnValuePB value = 2;
  if (this->has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.QueryColumnPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryColumnPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.QueryColumnPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.QueryColumnPB.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .demo.ColumnValuePB value = 2;
  if (this->has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.QueryColumnPB)
  return target;
}

size_t QueryColumnPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.QueryColumnPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .demo.ColumnValuePB value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryColumnPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.QueryColumnPB)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryColumnPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryColumnPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.QueryColumnPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.QueryColumnPB)
    MergeFrom(*source);
  }
}

void QueryColumnPB::MergeFrom(const QueryColumnPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.QueryColumnPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::demo::ColumnValuePB::MergeFrom(from.value());
  }
}

void QueryColumnPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.QueryColumnPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryColumnPB::CopyFrom(const QueryColumnPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.QueryColumnPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryColumnPB::IsInitialized() const {
  return true;
}

void QueryColumnPB::InternalSwap(QueryColumnPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryColumnPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TermQueryPB::InitAsDefaultInstance() {
}
class TermQueryPB::_Internal {
 public:
};

TermQueryPB::TermQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.TermQueryPB)
}
TermQueryPB::TermQueryPB(const TermQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  // @@protoc_insertion_point(copy_constructor:demo.TermQueryPB)
}

void TermQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TermQueryPB_common_2eproto.base);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TermQueryPB::~TermQueryPB() {
  // @@protoc_insertion_point(destructor:demo.TermQueryPB)
  SharedDtor();
}

void TermQueryPB::SharedDtor() {
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TermQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TermQueryPB& TermQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TermQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void TermQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.TermQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TermQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "demo.TermQueryPB.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .demo.ColumnValuePB values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TermQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.TermQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.TermQueryPB.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .demo.ColumnValuePB values = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.TermQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.TermQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TermQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.TermQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.TermQueryPB.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // repeated .demo.ColumnValuePB values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.TermQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* TermQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.TermQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.TermQueryPB.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // repeated .demo.ColumnValuePB values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.TermQueryPB)
  return target;
}

size_t TermQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.TermQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .demo.ColumnValuePB values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TermQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.TermQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const TermQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TermQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.TermQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.TermQueryPB)
    MergeFrom(*source);
  }
}

void TermQueryPB::MergeFrom(const TermQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.TermQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
}

void TermQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.TermQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermQueryPB::CopyFrom(const TermQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.TermQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermQueryPB::IsInitialized() const {
  return true;
}

void TermQueryPB::InternalSwap(TermQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TermQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompareExprPB::InitAsDefaultInstance() {
  ::demo::_CompareExprPB_default_instance_._instance.get_mutable()->operand_ = const_cast< ::demo::ColumnValuePB*>(
      ::demo::ColumnValuePB::internal_default_instance());
}
class CompareExprPB::_Internal {
 public:
  static const ::demo::ColumnValuePB& operand(const CompareExprPB* msg);
};

const ::demo::ColumnValuePB&
CompareExprPB::_Internal::operand(const CompareExprPB* msg) {
  return *msg->operand_;
}
CompareExprPB::CompareExprPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CompareExprPB)
}
CompareExprPB::CompareExprPB(const CompareExprPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operand()) {
    operand_ = new ::demo::ColumnValuePB(*from.operand_);
  } else {
    operand_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:demo.CompareExprPB)
}

void CompareExprPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompareExprPB_common_2eproto.base);
  ::memset(&operand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&operand_)) + sizeof(operator__));
}

CompareExprPB::~CompareExprPB() {
  // @@protoc_insertion_point(destructor:demo.CompareExprPB)
  SharedDtor();
}

void CompareExprPB::SharedDtor() {
  if (this != internal_default_instance()) delete operand_;
}

void CompareExprPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompareExprPB& CompareExprPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompareExprPB_common_2eproto.base);
  return *internal_default_instance();
}


void CompareExprPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CompareExprPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && operand_ != nullptr) {
    delete operand_;
  }
  operand_ = nullptr;
  operator__ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompareExprPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.CompareOperator operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_operator_(static_cast<::demo::CompareOperator>(val));
        } else goto handle_unusual;
        continue;
      // .demo.ColumnValuePB operand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_operand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompareExprPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CompareExprPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.CompareOperator operator = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::demo::CompareOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.ColumnValuePB operand = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CompareExprPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CompareExprPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompareExprPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CompareExprPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.CompareOperator operator = 1;
  if (this->operator_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operator_(), output);
  }

  // .demo.ColumnValuePB operand = 2;
  if (this->has_operand()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::operand(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CompareExprPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareExprPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CompareExprPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.CompareOperator operator = 1;
  if (this->operator_() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->operator_(), target);
  }

  // .demo.ColumnValuePB operand = 2;
  if (this->has_operand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::operand(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CompareExprPB)
  return target;
}

size_t CompareExprPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CompareExprPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.ColumnValuePB operand = 2;
  if (this->has_operand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operand_);
  }

  // .demo.CompareOperator operator = 1;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompareExprPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CompareExprPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CompareExprPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompareExprPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CompareExprPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CompareExprPB)
    MergeFrom(*source);
  }
}

void CompareExprPB::MergeFrom(const CompareExprPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CompareExprPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_operand()) {
    mutable_operand()->::demo::ColumnValuePB::MergeFrom(from.operand());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void CompareExprPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CompareExprPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareExprPB::CopyFrom(const CompareExprPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CompareExprPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareExprPB::IsInitialized() const {
  return true;
}

void CompareExprPB::InternalSwap(CompareExprPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operand_, other->operand_);
  swap(operator__, other->operator__);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareExprPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RangeQueryPB::InitAsDefaultInstance() {
}
class RangeQueryPB::_Internal {
 public:
};

RangeQueryPB::RangeQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.RangeQueryPB)
}
RangeQueryPB::RangeQueryPB(const RangeQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      operand_(from.operand_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  // @@protoc_insertion_point(copy_constructor:demo.RangeQueryPB)
}

void RangeQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangeQueryPB_common_2eproto.base);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RangeQueryPB::~RangeQueryPB() {
  // @@protoc_insertion_point(destructor:demo.RangeQueryPB)
  SharedDtor();
}

void RangeQueryPB::SharedDtor() {
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RangeQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeQueryPB& RangeQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void RangeQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.RangeQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operand_.Clear();
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RangeQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "demo.RangeQueryPB.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .demo.CompareExprPB operand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_operand(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RangeQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.RangeQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.RangeQueryPB.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .demo.CompareExprPB operand = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_operand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.RangeQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.RangeQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RangeQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.RangeQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.RangeQueryPB.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // repeated .demo.CompareExprPB operand = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operand_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->operand(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.RangeQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.RangeQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.RangeQueryPB.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // repeated .demo.CompareExprPB operand = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operand_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->operand(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.RangeQueryPB)
  return target;
}

size_t RangeQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.RangeQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .demo.CompareExprPB operand = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->operand_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->operand(static_cast<int>(i)));
    }
  }

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.RangeQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.RangeQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.RangeQueryPB)
    MergeFrom(*source);
  }
}

void RangeQueryPB::MergeFrom(const RangeQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.RangeQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operand_.MergeFrom(from.operand_);
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
}

void RangeQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.RangeQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeQueryPB::CopyFrom(const RangeQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.RangeQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeQueryPB::IsInitialized() const {
  return true;
}

void RangeQueryPB::InternalSwap(RangeQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&operand_)->InternalSwap(CastToBase(&other->operand_));
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RowRecordPB::InitAsDefaultInstance() {
}
class RowRecordPB::_Internal {
 public:
};

RowRecordPB::RowRecordPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.RowRecordPB)
}
RowRecordPB::RowRecordPB(const RowRecordPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:demo.RowRecordPB)
}

void RowRecordPB::SharedCtor() {
}

RowRecordPB::~RowRecordPB() {
  // @@protoc_insertion_point(destructor:demo.RowRecordPB)
  SharedDtor();
}

void RowRecordPB::SharedDtor() {
}

void RowRecordPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RowRecordPB& RowRecordPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RowRecordPB_common_2eproto.base);
  return *internal_default_instance();
}


void RowRecordPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.RowRecordPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RowRecordPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RowRecordPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.RowRecordPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.RowRecordPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.RowRecordPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RowRecordPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.RowRecordPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->data_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.RowRecordPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* RowRecordPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.RowRecordPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->data_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _data_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.RowRecordPB)
  return target;
}

size_t RowRecordPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.RowRecordPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowRecordPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.RowRecordPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RowRecordPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RowRecordPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.RowRecordPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.RowRecordPB)
    MergeFrom(*source);
  }
}

void RowRecordPB::MergeFrom(const RowRecordPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.RowRecordPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void RowRecordPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.RowRecordPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowRecordPB::CopyFrom(const RowRecordPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.RowRecordPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowRecordPB::IsInitialized() const {
  return true;
}

void RowRecordPB::InternalSwap(RowRecordPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RowRecordPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VectorQueryPB::InitAsDefaultInstance() {
}
class VectorQueryPB::_Internal {
 public:
};

VectorQueryPB::VectorQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.VectorQueryPB)
}
VectorQueryPB::VectorQueryPB(const VectorQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  vector_query_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vector_query_param().empty()) {
    vector_query_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vector_query_param_);
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_boost_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(query_boost_));
  // @@protoc_insertion_point(copy_constructor:demo.VectorQueryPB)
}

void VectorQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorQueryPB_common_2eproto.base);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vector_query_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_boost_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(query_boost_));
}

VectorQueryPB::~VectorQueryPB() {
  // @@protoc_insertion_point(destructor:demo.VectorQueryPB)
  SharedDtor();
}

void VectorQueryPB::SharedDtor() {
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vector_query_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorQueryPB& VectorQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void VectorQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.VectorQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vector_query_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_boost_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(query_boost_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VectorQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "demo.VectorQueryPB.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vector_query_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_vector_query_param(), ptr, ctx, "demo.VectorQueryPB.vector_query_param");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 topk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 nq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float query_boost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          query_boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .demo.RowRecordPB records = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VectorQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.VectorQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.VectorQueryPB.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vector_query_param = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vector_query_param()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->vector_query_param().data(), static_cast<int>(this->vector_query_param().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.VectorQueryPB.vector_query_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 topk = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &topk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nq = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float query_boost = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &query_boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .demo.RowRecordPB records = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.VectorQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.VectorQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VectorQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.VectorQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.VectorQueryPB.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // string vector_query_param = 2;
  if (this->vector_query_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vector_query_param().data(), static_cast<int>(this->vector_query_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.VectorQueryPB.vector_query_param");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vector_query_param(), output);
  }

  // int64 topk = 3;
  if (this->topk() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->topk(), output);
  }

  // int64 nq = 4;
  if (this->nq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->nq(), output);
  }

  // float query_boost = 5;
  if (!(this->query_boost() <= 0 && this->query_boost() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->query_boost(), output);
  }

  // repeated .demo.RowRecordPB records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.VectorQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.VectorQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.VectorQueryPB.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // string vector_query_param = 2;
  if (this->vector_query_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vector_query_param().data(), static_cast<int>(this->vector_query_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.VectorQueryPB.vector_query_param");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->vector_query_param(), target);
  }

  // int64 topk = 3;
  if (this->topk() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->topk(), target);
  }

  // int64 nq = 4;
  if (this->nq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->nq(), target);
  }

  // float query_boost = 5;
  if (!(this->query_boost() <= 0 && this->query_boost() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->query_boost(), target);
  }

  // repeated .demo.RowRecordPB records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->records(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.VectorQueryPB)
  return target;
}

size_t VectorQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.VectorQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .demo.RowRecordPB records = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // string vector_query_param = 2;
  if (this->vector_query_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->vector_query_param());
  }

  // int64 topk = 3;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->topk());
  }

  // int64 nq = 4;
  if (this->nq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->nq());
  }

  // float query_boost = 5;
  if (!(this->query_boost() <= 0 && this->query_boost() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.VectorQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.VectorQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.VectorQueryPB)
    MergeFrom(*source);
  }
}

void VectorQueryPB::MergeFrom(const VectorQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.VectorQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.vector_query_param().size() > 0) {

    vector_query_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vector_query_param_);
  }
  if (from.topk() != 0) {
    set_topk(from.topk());
  }
  if (from.nq() != 0) {
    set_nq(from.nq());
  }
  if (!(from.query_boost() <= 0 && from.query_boost() >= 0)) {
    set_query_boost(from.query_boost());
  }
}

void VectorQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.VectorQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorQueryPB::CopyFrom(const VectorQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.VectorQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorQueryPB::IsInitialized() const {
  return true;
}

void VectorQueryPB::InternalSwap(VectorQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vector_query_param_.Swap(&other->vector_query_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(topk_, other->topk_);
  swap(nq_, other->nq_);
  swap(query_boost_, other->query_boost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InnerLeafQueryPB::InitAsDefaultInstance() {
  ::demo::_InnerLeafQueryPB_default_instance_.term_query_ = const_cast< ::demo::TermQueryPB*>(
      ::demo::TermQueryPB::internal_default_instance());
  ::demo::_InnerLeafQueryPB_default_instance_.range_query_ = const_cast< ::demo::RangeQueryPB*>(
      ::demo::RangeQueryPB::internal_default_instance());
  ::demo::_InnerLeafQueryPB_default_instance_.vector_query_ = const_cast< ::demo::VectorQueryPB*>(
      ::demo::VectorQueryPB::internal_default_instance());
}
class InnerLeafQueryPB::_Internal {
 public:
  static const ::demo::TermQueryPB& term_query(const InnerLeafQueryPB* msg);
  static const ::demo::RangeQueryPB& range_query(const InnerLeafQueryPB* msg);
  static const ::demo::VectorQueryPB& vector_query(const InnerLeafQueryPB* msg);
};

const ::demo::TermQueryPB&
InnerLeafQueryPB::_Internal::term_query(const InnerLeafQueryPB* msg) {
  return *msg->query_.term_query_;
}
const ::demo::RangeQueryPB&
InnerLeafQueryPB::_Internal::range_query(const InnerLeafQueryPB* msg) {
  return *msg->query_.range_query_;
}
const ::demo::VectorQueryPB&
InnerLeafQueryPB::_Internal::vector_query(const InnerLeafQueryPB* msg) {
  return *msg->query_.vector_query_;
}
void InnerLeafQueryPB::set_allocated_term_query(::demo::TermQueryPB* term_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_query();
  if (term_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      term_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, term_query, submessage_arena);
    }
    set_has_term_query();
    query_.term_query_ = term_query;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.InnerLeafQueryPB.term_query)
}
void InnerLeafQueryPB::set_allocated_range_query(::demo::RangeQueryPB* range_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_query();
  if (range_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_query, submessage_arena);
    }
    set_has_range_query();
    query_.range_query_ = range_query;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.InnerLeafQueryPB.range_query)
}
void InnerLeafQueryPB::set_allocated_vector_query(::demo::VectorQueryPB* vector_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_query();
  if (vector_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_query, submessage_arena);
    }
    set_has_vector_query();
    query_.vector_query_ = vector_query;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.InnerLeafQueryPB.vector_query)
}
InnerLeafQueryPB::InnerLeafQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.InnerLeafQueryPB)
}
InnerLeafQueryPB::InnerLeafQueryPB(const InnerLeafQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_query();
  switch (from.query_case()) {
    case kTermQuery: {
      mutable_term_query()->::demo::TermQueryPB::MergeFrom(from.term_query());
      break;
    }
    case kRangeQuery: {
      mutable_range_query()->::demo::RangeQueryPB::MergeFrom(from.range_query());
      break;
    }
    case kVectorQuery: {
      mutable_vector_query()->::demo::VectorQueryPB::MergeFrom(from.vector_query());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:demo.InnerLeafQueryPB)
}

void InnerLeafQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InnerLeafQueryPB_common_2eproto.base);
  clear_has_query();
}

InnerLeafQueryPB::~InnerLeafQueryPB() {
  // @@protoc_insertion_point(destructor:demo.InnerLeafQueryPB)
  SharedDtor();
}

void InnerLeafQueryPB::SharedDtor() {
  if (has_query()) {
    clear_query();
  }
}

void InnerLeafQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InnerLeafQueryPB& InnerLeafQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InnerLeafQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void InnerLeafQueryPB::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:demo.InnerLeafQueryPB)
  switch (query_case()) {
    case kTermQuery: {
      delete query_.term_query_;
      break;
    }
    case kRangeQuery: {
      delete query_.range_query_;
      break;
    }
    case kVectorQuery: {
      delete query_.vector_query_;
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void InnerLeafQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.InnerLeafQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_query();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InnerLeafQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.TermQueryPB term_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_term_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.RangeQueryPB range_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_range_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.VectorQueryPB vector_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_vector_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InnerLeafQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.InnerLeafQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.TermQueryPB term_query = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_term_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.RangeQueryPB range_query = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_range_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.VectorQueryPB vector_query = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vector_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.InnerLeafQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.InnerLeafQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InnerLeafQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.InnerLeafQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.TermQueryPB term_query = 1;
  if (has_term_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::term_query(this), output);
  }

  // .demo.RangeQueryPB range_query = 2;
  if (has_range_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::range_query(this), output);
  }

  // .demo.VectorQueryPB vector_query = 3;
  if (has_vector_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::vector_query(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.InnerLeafQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* InnerLeafQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.InnerLeafQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.TermQueryPB term_query = 1;
  if (has_term_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::term_query(this), target);
  }

  // .demo.RangeQueryPB range_query = 2;
  if (has_range_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::range_query(this), target);
  }

  // .demo.VectorQueryPB vector_query = 3;
  if (has_vector_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::vector_query(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.InnerLeafQueryPB)
  return target;
}

size_t InnerLeafQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.InnerLeafQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (query_case()) {
    // .demo.TermQueryPB term_query = 1;
    case kTermQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.term_query_);
      break;
    }
    // .demo.RangeQueryPB range_query = 2;
    case kRangeQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.range_query_);
      break;
    }
    // .demo.VectorQueryPB vector_query = 3;
    case kVectorQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.vector_query_);
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerLeafQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.InnerLeafQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerLeafQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InnerLeafQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.InnerLeafQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.InnerLeafQueryPB)
    MergeFrom(*source);
  }
}

void InnerLeafQueryPB::MergeFrom(const InnerLeafQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.InnerLeafQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.query_case()) {
    case kTermQuery: {
      mutable_term_query()->::demo::TermQueryPB::MergeFrom(from.term_query());
      break;
    }
    case kRangeQuery: {
      mutable_range_query()->::demo::RangeQueryPB::MergeFrom(from.range_query());
      break;
    }
    case kVectorQuery: {
      mutable_vector_query()->::demo::VectorQueryPB::MergeFrom(from.vector_query());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
}

void InnerLeafQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.InnerLeafQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerLeafQueryPB::CopyFrom(const InnerLeafQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.InnerLeafQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerLeafQueryPB::IsInitialized() const {
  return true;
}

void InnerLeafQueryPB::InternalSwap(InnerLeafQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerLeafQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeafQueryPB::InitAsDefaultInstance() {
  ::demo::_LeafQueryPB_default_instance_._instance.get_mutable()->query_ = const_cast< ::demo::InnerLeafQueryPB*>(
      ::demo::InnerLeafQueryPB::internal_default_instance());
}
class LeafQueryPB::_Internal {
 public:
  static const ::demo::InnerLeafQueryPB& query(const LeafQueryPB* msg);
};

const ::demo::InnerLeafQueryPB&
LeafQueryPB::_Internal::query(const LeafQueryPB* msg) {
  return *msg->query_;
}
LeafQueryPB::LeafQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.LeafQueryPB)
}
LeafQueryPB::LeafQueryPB(const LeafQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query()) {
    query_ = new ::demo::InnerLeafQueryPB(*from.query_);
  } else {
    query_ = nullptr;
  }
  boost_ = from.boost_;
  // @@protoc_insertion_point(copy_constructor:demo.LeafQueryPB)
}

void LeafQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeafQueryPB_common_2eproto.base);
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boost_) -
      reinterpret_cast<char*>(&query_)) + sizeof(boost_));
}

LeafQueryPB::~LeafQueryPB() {
  // @@protoc_insertion_point(destructor:demo.LeafQueryPB)
  SharedDtor();
}

void LeafQueryPB::SharedDtor() {
  if (this != internal_default_instance()) delete query_;
}

void LeafQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafQueryPB& LeafQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeafQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void LeafQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.LeafQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  boost_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeafQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.InnerLeafQueryPB query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float boost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeafQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.LeafQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.InnerLeafQueryPB query = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float boost = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.LeafQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.LeafQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeafQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.LeafQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.InnerLeafQueryPB query = 1;
  if (this->has_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::query(this), output);
  }

  // float boost = 2;
  if (!(this->boost() <= 0 && this->boost() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->boost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.LeafQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* LeafQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.LeafQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.InnerLeafQueryPB query = 1;
  if (this->has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::query(this), target);
  }

  // float boost = 2;
  if (!(this->boost() <= 0 && this->boost() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->boost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.LeafQueryPB)
  return target;
}

size_t LeafQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.LeafQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.InnerLeafQueryPB query = 1;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // float boost = 2;
  if (!(this->boost() <= 0 && this->boost() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.LeafQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeafQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.LeafQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.LeafQueryPB)
    MergeFrom(*source);
  }
}

void LeafQueryPB::MergeFrom(const LeafQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.LeafQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_query()) {
    mutable_query()->::demo::InnerLeafQueryPB::MergeFrom(from.query());
  }
  if (!(from.boost() <= 0 && from.boost() >= 0)) {
    set_boost(from.boost());
  }
}

void LeafQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.LeafQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafQueryPB::CopyFrom(const LeafQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.LeafQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafQueryPB::IsInitialized() const {
  return true;
}

void LeafQueryPB::InternalSwap(LeafQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(boost_, other->boost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeafQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneralQueryPB::InitAsDefaultInstance() {
  ::demo::_GeneralQueryPB_default_instance_.leaf_ = const_cast< ::demo::LeafQueryPB*>(
      ::demo::LeafQueryPB::internal_default_instance());
  ::demo::_GeneralQueryPB_default_instance_.bin_ = const_cast< ::demo::BinaryQueryPB*>(
      ::demo::BinaryQueryPB::internal_default_instance());
}
class GeneralQueryPB::_Internal {
 public:
  static const ::demo::LeafQueryPB& leaf(const GeneralQueryPB* msg);
  static const ::demo::BinaryQueryPB& bin(const GeneralQueryPB* msg);
};

const ::demo::LeafQueryPB&
GeneralQueryPB::_Internal::leaf(const GeneralQueryPB* msg) {
  return *msg->query_.leaf_;
}
const ::demo::BinaryQueryPB&
GeneralQueryPB::_Internal::bin(const GeneralQueryPB* msg) {
  return *msg->query_.bin_;
}
void GeneralQueryPB::set_allocated_leaf(::demo::LeafQueryPB* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_query();
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    query_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.GeneralQueryPB.leaf)
}
void GeneralQueryPB::set_allocated_bin(::demo::BinaryQueryPB* bin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_query();
  if (bin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin, submessage_arena);
    }
    set_has_bin();
    query_.bin_ = bin;
  }
  // @@protoc_insertion_point(field_set_allocated:demo.GeneralQueryPB.bin)
}
GeneralQueryPB::GeneralQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.GeneralQueryPB)
}
GeneralQueryPB::GeneralQueryPB(const GeneralQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_query();
  switch (from.query_case()) {
    case kLeaf: {
      mutable_leaf()->::demo::LeafQueryPB::MergeFrom(from.leaf());
      break;
    }
    case kBin: {
      mutable_bin()->::demo::BinaryQueryPB::MergeFrom(from.bin());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:demo.GeneralQueryPB)
}

void GeneralQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryQueryPB_common_2eproto.base);
  clear_has_query();
}

GeneralQueryPB::~GeneralQueryPB() {
  // @@protoc_insertion_point(destructor:demo.GeneralQueryPB)
  SharedDtor();
}

void GeneralQueryPB::SharedDtor() {
  if (has_query()) {
    clear_query();
  }
}

void GeneralQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralQueryPB& GeneralQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void GeneralQueryPB::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:demo.GeneralQueryPB)
  switch (query_case()) {
    case kLeaf: {
      delete query_.leaf_;
      break;
    }
    case kBin: {
      delete query_.bin_;
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void GeneralQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.GeneralQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_query();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeneralQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.LeafQueryPB leaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.BinaryQueryPB bin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_bin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeneralQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.GeneralQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.LeafQueryPB leaf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.BinaryQueryPB bin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.GeneralQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.GeneralQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeneralQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.GeneralQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.LeafQueryPB leaf = 1;
  if (has_leaf()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::leaf(this), output);
  }

  // .demo.BinaryQueryPB bin = 2;
  if (has_bin()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::bin(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.GeneralQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.GeneralQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.LeafQueryPB leaf = 1;
  if (has_leaf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::leaf(this), target);
  }

  // .demo.BinaryQueryPB bin = 2;
  if (has_bin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::bin(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.GeneralQueryPB)
  return target;
}

size_t GeneralQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.GeneralQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (query_case()) {
    // .demo.LeafQueryPB leaf = 1;
    case kLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.leaf_);
      break;
    }
    // .demo.BinaryQueryPB bin = 2;
    case kBin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.bin_);
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.GeneralQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.GeneralQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.GeneralQueryPB)
    MergeFrom(*source);
  }
}

void GeneralQueryPB::MergeFrom(const GeneralQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.GeneralQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.query_case()) {
    case kLeaf: {
      mutable_leaf()->::demo::LeafQueryPB::MergeFrom(from.leaf());
      break;
    }
    case kBin: {
      mutable_bin()->::demo::BinaryQueryPB::MergeFrom(from.bin());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
}

void GeneralQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.GeneralQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralQueryPB::CopyFrom(const GeneralQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.GeneralQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralQueryPB::IsInitialized() const {
  return true;
}

void GeneralQueryPB::InternalSwap(GeneralQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryQueryPB::InitAsDefaultInstance() {
  ::demo::_BinaryQueryPB_default_instance_._instance.get_mutable()->left_query_ = const_cast< ::demo::GeneralQueryPB*>(
      ::demo::GeneralQueryPB::internal_default_instance());
  ::demo::_BinaryQueryPB_default_instance_._instance.get_mutable()->right_query_ = const_cast< ::demo::GeneralQueryPB*>(
      ::demo::GeneralQueryPB::internal_default_instance());
}
class BinaryQueryPB::_Internal {
 public:
  static const ::demo::GeneralQueryPB& left_query(const BinaryQueryPB* msg);
  static const ::demo::GeneralQueryPB& right_query(const BinaryQueryPB* msg);
};

const ::demo::GeneralQueryPB&
BinaryQueryPB::_Internal::left_query(const BinaryQueryPB* msg) {
  return *msg->left_query_;
}
const ::demo::GeneralQueryPB&
BinaryQueryPB::_Internal::right_query(const BinaryQueryPB* msg) {
  return *msg->right_query_;
}
BinaryQueryPB::BinaryQueryPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.BinaryQueryPB)
}
BinaryQueryPB::BinaryQueryPB(const BinaryQueryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_query()) {
    left_query_ = new ::demo::GeneralQueryPB(*from.left_query_);
  } else {
    left_query_ = nullptr;
  }
  if (from.has_right_query()) {
    right_query_ = new ::demo::GeneralQueryPB(*from.right_query_);
  } else {
    right_query_ = nullptr;
  }
  ::memcpy(&relation_, &from.relation_,
    static_cast<size_t>(reinterpret_cast<char*>(&boost_) -
    reinterpret_cast<char*>(&relation_)) + sizeof(boost_));
  // @@protoc_insertion_point(copy_constructor:demo.BinaryQueryPB)
}

void BinaryQueryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryQueryPB_common_2eproto.base);
  ::memset(&left_query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boost_) -
      reinterpret_cast<char*>(&left_query_)) + sizeof(boost_));
}

BinaryQueryPB::~BinaryQueryPB() {
  // @@protoc_insertion_point(destructor:demo.BinaryQueryPB)
  SharedDtor();
}

void BinaryQueryPB::SharedDtor() {
  if (this != internal_default_instance()) delete left_query_;
  if (this != internal_default_instance()) delete right_query_;
}

void BinaryQueryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryQueryPB& BinaryQueryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryQueryPB_common_2eproto.base);
  return *internal_default_instance();
}


void BinaryQueryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.BinaryQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && left_query_ != nullptr) {
    delete left_query_;
  }
  left_query_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_query_ != nullptr) {
    delete right_query_;
  }
  right_query_ = nullptr;
  ::memset(&relation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boost_) -
      reinterpret_cast<char*>(&relation_)) + sizeof(boost_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryQueryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.GeneralQueryPB left_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_left_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.GeneralQueryPB right_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_right_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.QueryRelation relation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_relation(static_cast<::demo::QueryRelation>(val));
        } else goto handle_unusual;
        continue;
      // float boost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryQueryPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.BinaryQueryPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.GeneralQueryPB left_query = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.GeneralQueryPB right_query = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.QueryRelation relation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relation(static_cast< ::demo::QueryRelation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float boost = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.BinaryQueryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.BinaryQueryPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryQueryPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.BinaryQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.GeneralQueryPB left_query = 1;
  if (this->has_left_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::left_query(this), output);
  }

  // .demo.GeneralQueryPB right_query = 2;
  if (this->has_right_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::right_query(this), output);
  }

  // .demo.QueryRelation relation = 3;
  if (this->relation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->relation(), output);
  }

  // float boost = 4;
  if (!(this->boost() <= 0 && this->boost() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->boost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.BinaryQueryPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryQueryPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.BinaryQueryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.GeneralQueryPB left_query = 1;
  if (this->has_left_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::left_query(this), target);
  }

  // .demo.GeneralQueryPB right_query = 2;
  if (this->has_right_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::right_query(this), target);
  }

  // .demo.QueryRelation relation = 3;
  if (this->relation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->relation(), target);
  }

  // float boost = 4;
  if (!(this->boost() <= 0 && this->boost() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->boost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.BinaryQueryPB)
  return target;
}

size_t BinaryQueryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.BinaryQueryPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.GeneralQueryPB left_query = 1;
  if (this->has_left_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_query_);
  }

  // .demo.GeneralQueryPB right_query = 2;
  if (this->has_right_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_query_);
  }

  // .demo.QueryRelation relation = 3;
  if (this->relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->relation());
  }

  // float boost = 4;
  if (!(this->boost() <= 0 && this->boost() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryQueryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.BinaryQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryQueryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryQueryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.BinaryQueryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.BinaryQueryPB)
    MergeFrom(*source);
  }
}

void BinaryQueryPB::MergeFrom(const BinaryQueryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.BinaryQueryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_query()) {
    mutable_left_query()->::demo::GeneralQueryPB::MergeFrom(from.left_query());
  }
  if (from.has_right_query()) {
    mutable_right_query()->::demo::GeneralQueryPB::MergeFrom(from.right_query());
  }
  if (from.relation() != 0) {
    set_relation(from.relation());
  }
  if (!(from.boost() <= 0 && from.boost() >= 0)) {
    set_boost(from.boost());
  }
}

void BinaryQueryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.BinaryQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryQueryPB::CopyFrom(const BinaryQueryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.BinaryQueryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryQueryPB::IsInitialized() const {
  return true;
}

void BinaryQueryPB::InternalSwap(BinaryQueryPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(left_query_, other->left_query_);
  swap(right_query_, other->right_query_);
  swap(relation_, other->relation_);
  swap(boost_, other->boost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryQueryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryRequestPB::InitAsDefaultInstance() {
  ::demo::_QueryRequestPB_default_instance_._instance.get_mutable()->query_ = const_cast< ::demo::GeneralQueryPB*>(
      ::demo::GeneralQueryPB::internal_default_instance());
}
class QueryRequestPB::_Internal {
 public:
  static const ::demo::GeneralQueryPB& query(const QueryRequestPB* msg);
};

const ::demo::GeneralQueryPB&
QueryRequestPB::_Internal::query(const QueryRequestPB* msg) {
  return *msg->query_;
}
QueryRequestPB::QueryRequestPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.QueryRequestPB)
}
QueryRequestPB::QueryRequestPB(const QueryRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query()) {
    query_ = new ::demo::GeneralQueryPB(*from.query_);
  } else {
    query_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:demo.QueryRequestPB)
}

void QueryRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryRequestPB_common_2eproto.base);
  ::memset(&query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&query_)) + sizeof(request_id_));
}

QueryRequestPB::~QueryRequestPB() {
  // @@protoc_insertion_point(destructor:demo.QueryRequestPB)
  SharedDtor();
}

void QueryRequestPB::SharedDtor() {
  if (this != internal_default_instance()) delete query_;
}

void QueryRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRequestPB& QueryRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryRequestPB_common_2eproto.base);
  return *internal_default_instance();
}


void QueryRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.QueryRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  request_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demo.GeneralQueryPB query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryRequestPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.QueryRequestPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 request_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .demo.GeneralQueryPB query = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.QueryRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.QueryRequestPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryRequestPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.QueryRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // .demo.GeneralQueryPB query = 2;
  if (this->has_query()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::query(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.QueryRequestPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRequestPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.QueryRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // .demo.GeneralQueryPB query = 2;
  if (this->has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::query(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.QueryRequestPB)
  return target;
}

size_t QueryRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.QueryRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .demo.GeneralQueryPB query = 2;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.QueryRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.QueryRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.QueryRequestPB)
    MergeFrom(*source);
  }
}

void QueryRequestPB::MergeFrom(const QueryRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.QueryRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_query()) {
    mutable_query()->::demo::GeneralQueryPB::MergeFrom(from.query());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void QueryRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.QueryRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequestPB::CopyFrom(const QueryRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.QueryRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequestPB::IsInitialized() const {
  return true;
}

void QueryRequestPB::InternalSwap(QueryRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponsePB::InitAsDefaultInstance() {
  ::demo::_QueryResponsePB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
}
class QueryResponsePB::_Internal {
 public:
  static const ::demo::Status& status(const QueryResponsePB* msg);
};

const ::demo::Status&
QueryResponsePB::_Internal::status(const QueryResponsePB* msg) {
  return *msg->status_;
}
void QueryResponsePB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
QueryResponsePB::QueryResponsePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.QueryResponsePB)
}
QueryResponsePB::QueryResponsePB(const QueryResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      score_(from.score_),
      distance_(from.distance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  hits_ = from.hits_;
  // @@protoc_insertion_point(copy_constructor:demo.QueryResponsePB)
}

void QueryResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponsePB_common_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hits_) -
      reinterpret_cast<char*>(&status_)) + sizeof(hits_));
}

QueryResponsePB::~QueryResponsePB() {
  // @@protoc_insertion_point(destructor:demo.QueryResponsePB)
  SharedDtor();
}

void QueryResponsePB::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void QueryResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponsePB& QueryResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponsePB_common_2eproto.base);
  return *internal_default_instance();
}


void QueryResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.QueryResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  score_.Clear();
  distance_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  hits_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_distance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_distance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryResponsePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.QueryResponsePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hits = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 ids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float score = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float distance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distance())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_distance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.QueryResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.QueryResponsePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryResponsePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.QueryResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // uint64 hits = 2;
  if (this->hits() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->hits(), output);
  }

  // repeated int64 ids = 3;
  if (this->ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // repeated float score = 4;
  if (this->score_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_score_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->score().data(), this->score_size(), output);
  }

  // repeated float distance = 5;
  if (this->distance_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_distance_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->distance().data(), this->distance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.QueryResponsePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponsePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.QueryResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // uint64 hits = 2;
  if (this->hits() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->hits(), target);
  }

  // repeated int64 ids = 3;
  if (this->ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids_, target);
  }

  // repeated float score = 4;
  if (this->score_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _score_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->score_, target);
  }

  // repeated float distance = 5;
  if (this->distance_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _distance_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->distance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.QueryResponsePB)
  return target;
}

size_t QueryResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.QueryResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float score = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->score_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float distance = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->distance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint64 hits = 2;
  if (this->hits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->hits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.QueryResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.QueryResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.QueryResponsePB)
    MergeFrom(*source);
  }
}

void QueryResponsePB::MergeFrom(const QueryResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.QueryResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  score_.MergeFrom(from.score_);
  distance_.MergeFrom(from.distance_);
  if (from.has_status()) {
    mutable_status()->::demo::Status::MergeFrom(from.status());
  }
  if (from.hits() != 0) {
    set_hits(from.hits());
  }
}

void QueryResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.QueryResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponsePB::CopyFrom(const QueryResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.QueryResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponsePB::IsInitialized() const {
  return true;
}

void QueryResponsePB::InternalSwap(QueryResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  score_.InternalSwap(&other->score_);
  distance_.InternalSwap(&other->distance_);
  swap(status_, other->status_);
  swap(hits_, other->hits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandPB::InitAsDefaultInstance() {
}
class CommandPB::_Internal {
 public:
};

CommandPB::CommandPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CommandPB)
}
CommandPB::CommandPB(const CommandPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cmd().empty()) {
    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:demo.CommandPB)
}

void CommandPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandPB_common_2eproto.base);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandPB::~CommandPB() {
  // @@protoc_insertion_point(destructor:demo.CommandPB)
  SharedDtor();
}

void CommandPB::SharedDtor() {
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandPB& CommandPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandPB_common_2eproto.base);
  return *internal_default_instance();
}


void CommandPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CommandPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommandPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cmd(), ptr, ctx, "demo.CommandPB.cmd");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommandPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CommandPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cmd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.CommandPB.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CommandPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CommandPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommandPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CommandPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.CommandPB.cmd");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CommandPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CommandPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.CommandPB.cmd");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CommandPB)
  return target;
}

size_t CommandPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CommandPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CommandPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CommandPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CommandPB)
    MergeFrom(*source);
  }
}

void CommandPB::MergeFrom(const CommandPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CommandPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void CommandPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CommandPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPB::CopyFrom(const CommandPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CommandPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPB::IsInitialized() const {
  return true;
}

void CommandPB::InternalSwap(CommandPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmd_.Swap(&other->cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionSchemaListPB::InitAsDefaultInstance() {
  ::demo::_CollectionSchemaListPB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
}
class CollectionSchemaListPB::_Internal {
 public:
  static const ::demo::Status& status(const CollectionSchemaListPB* msg);
};

const ::demo::Status&
CollectionSchemaListPB::_Internal::status(const CollectionSchemaListPB* msg) {
  return *msg->status_;
}
void CollectionSchemaListPB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
CollectionSchemaListPB::CollectionSchemaListPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CollectionSchemaListPB)
}
CollectionSchemaListPB::CollectionSchemaListPB(const CollectionSchemaListPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collection_schema_list_(from.collection_schema_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.CollectionSchemaListPB)
}

void CollectionSchemaListPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionSchemaListPB_common_2eproto.base);
  status_ = nullptr;
}

CollectionSchemaListPB::~CollectionSchemaListPB() {
  // @@protoc_insertion_point(destructor:demo.CollectionSchemaListPB)
  SharedDtor();
}

void CollectionSchemaListPB::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void CollectionSchemaListPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionSchemaListPB& CollectionSchemaListPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionSchemaListPB_common_2eproto.base);
  return *internal_default_instance();
}


void CollectionSchemaListPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CollectionSchemaListPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_schema_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionSchemaListPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .demo.CollectionSchemaPB Collection_schema_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_collection_schema_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionSchemaListPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CollectionSchemaListPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .demo.CollectionSchemaPB Collection_schema_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_collection_schema_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CollectionSchemaListPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CollectionSchemaListPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionSchemaListPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CollectionSchemaListPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .demo.CollectionSchemaPB Collection_schema_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collection_schema_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->collection_schema_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CollectionSchemaListPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionSchemaListPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CollectionSchemaListPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .demo.CollectionSchemaPB Collection_schema_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collection_schema_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->collection_schema_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CollectionSchemaListPB)
  return target;
}

size_t CollectionSchemaListPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CollectionSchemaListPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .demo.CollectionSchemaPB Collection_schema_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->collection_schema_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->collection_schema_list(static_cast<int>(i)));
    }
  }

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionSchemaListPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CollectionSchemaListPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionSchemaListPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionSchemaListPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CollectionSchemaListPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CollectionSchemaListPB)
    MergeFrom(*source);
  }
}

void CollectionSchemaListPB::MergeFrom(const CollectionSchemaListPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CollectionSchemaListPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_schema_list_.MergeFrom(from.collection_schema_list_);
  if (from.has_status()) {
    mutable_status()->::demo::Status::MergeFrom(from.status());
  }
}

void CollectionSchemaListPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CollectionSchemaListPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionSchemaListPB::CopyFrom(const CollectionSchemaListPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CollectionSchemaListPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionSchemaListPB::IsInitialized() const {
  return true;
}

void CollectionSchemaListPB::InternalSwap(CollectionSchemaListPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&collection_schema_list_)->InternalSwap(CastToBase(&other->collection_schema_list_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionSchemaListPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertRequestPB::InitAsDefaultInstance() {
}
class InsertRequestPB::_Internal {
 public:
};

InsertRequestPB::InsertRequestPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.InsertRequestPB)
}
InsertRequestPB::InsertRequestPB(const InsertRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      field_name_(from.field_name_),
      column_value_(from.column_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:demo.InsertRequestPB)
}

void InsertRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRequestPB_common_2eproto.base);
}

InsertRequestPB::~InsertRequestPB() {
  // @@protoc_insertion_point(destructor:demo.InsertRequestPB)
  SharedDtor();
}

void InsertRequestPB::SharedDtor() {
}

void InsertRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRequestPB& InsertRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRequestPB_common_2eproto.base);
  return *internal_default_instance();
}


void InsertRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.InsertRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.Clear();
  column_value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InsertRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_field_name(), ptr, ctx, "demo.InsertRequestPB.field_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .demo.ColumnValuePB column_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_column_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InsertRequestPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.InsertRequestPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string field_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name(this->field_name_size() - 1).data(),
            static_cast<int>(this->field_name(this->field_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.InsertRequestPB.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .demo.ColumnValuePB column_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_column_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.InsertRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.InsertRequestPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InsertRequestPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.InsertRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field_name = 1;
  for (int i = 0, n = this->field_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name(i).data(), static_cast<int>(this->field_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.InsertRequestPB.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->field_name(i), output);
  }

  // repeated .demo.ColumnValuePB column_value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_value_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->column_value(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.InsertRequestPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRequestPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.InsertRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field_name = 1;
  for (int i = 0, n = this->field_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name(i).data(), static_cast<int>(this->field_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.InsertRequestPB.field_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->field_name(i), target);
  }

  // repeated .demo.ColumnValuePB column_value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_value_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->column_value(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.InsertRequestPB)
  return target;
}

size_t InsertRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.InsertRequestPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->field_name_size());
  for (int i = 0, n = this->field_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->field_name(i));
  }

  // repeated .demo.ColumnValuePB column_value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->column_value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->column_value(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.InsertRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.InsertRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.InsertRequestPB)
    MergeFrom(*source);
  }
}

void InsertRequestPB::MergeFrom(const InsertRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.InsertRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_name_.MergeFrom(from.field_name_);
  column_value_.MergeFrom(from.column_value_);
}

void InsertRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.InsertRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRequestPB::CopyFrom(const InsertRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.InsertRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequestPB::IsInitialized() const {
  return true;
}

void InsertRequestPB::InternalSwap(InsertRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_name_.InternalSwap(CastToBase(&other->field_name_));
  CastToBase(&column_value_)->InternalSwap(CastToBase(&other->column_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionNamePB::InitAsDefaultInstance() {
}
class CollectionNamePB::_Internal {
 public:
};

CollectionNamePB::CollectionNamePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CollectionNamePB)
}
CollectionNamePB::CollectionNamePB(const CollectionNamePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  // @@protoc_insertion_point(copy_constructor:demo.CollectionNamePB)
}

void CollectionNamePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionNamePB_common_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CollectionNamePB::~CollectionNamePB() {
  // @@protoc_insertion_point(destructor:demo.CollectionNamePB)
  SharedDtor();
}

void CollectionNamePB::SharedDtor() {
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CollectionNamePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionNamePB& CollectionNamePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionNamePB_common_2eproto.base);
  return *internal_default_instance();
}


void CollectionNamePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.CollectionNamePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionNamePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Collection_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "demo.CollectionNamePB.Collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionNamePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CollectionNamePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Collection_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.CollectionNamePB.Collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CollectionNamePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CollectionNamePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionNamePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CollectionNamePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.CollectionNamePB.Collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CollectionNamePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionNamePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CollectionNamePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Collection_name = 1;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.CollectionNamePB.Collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->collection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CollectionNamePB)
  return target;
}

size_t CollectionNamePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.CollectionNamePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Collection_name = 1;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionNamePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.CollectionNamePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionNamePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionNamePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.CollectionNamePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.CollectionNamePB)
    MergeFrom(*source);
  }
}

void CollectionNamePB::MergeFrom(const CollectionNamePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.CollectionNamePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
}

void CollectionNamePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.CollectionNamePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionNamePB::CopyFrom(const CollectionNamePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.CollectionNamePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionNamePB::IsInitialized() const {
  return true;
}

void CollectionNamePB::InternalSwap(CollectionNamePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionNamePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigPB::InitAsDefaultInstance() {
  ::demo::_ConfigPB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
}
class ConfigPB::_Internal {
 public:
  static const ::demo::Status& status(const ConfigPB* msg);
};

const ::demo::Status&
ConfigPB::_Internal::status(const ConfigPB* msg) {
  return *msg->status_;
}
void ConfigPB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ConfigPB::ConfigPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.ConfigPB)
}
ConfigPB::ConfigPB(const ConfigPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.config().empty()) {
    config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  if (from.has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.ConfigPB)
}

void ConfigPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigPB_common_2eproto.base);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

ConfigPB::~ConfigPB() {
  // @@protoc_insertion_point(destructor:demo.ConfigPB)
  SharedDtor();
}

void ConfigPB::SharedDtor() {
  config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ConfigPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigPB& ConfigPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigPB_common_2eproto.base);
  return *internal_default_instance();
}


void ConfigPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.ConfigPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_config(), ptr, ctx, "demo.ConfigPB.config");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.ConfigPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->config().data(), static_cast<int>(this->config().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.ConfigPB.config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.ConfigPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.ConfigPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.ConfigPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // string config = 2;
  if (this->config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), static_cast<int>(this->config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ConfigPB.config");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.ConfigPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.ConfigPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // string config = 2;
  if (this->config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), static_cast<int>(this->config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.ConfigPB.config");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.ConfigPB)
  return target;
}

size_t ConfigPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.ConfigPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config = 2;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->config());
  }

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.ConfigPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.ConfigPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.ConfigPB)
    MergeFrom(*source);
  }
}

void ConfigPB::MergeFrom(const ConfigPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.ConfigPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config().size() > 0) {

    config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  if (from.has_status()) {
    mutable_status()->::demo::Status::MergeFrom(from.status());
  }
}

void ConfigPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.ConfigPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPB::CopyFrom(const ConfigPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.ConfigPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigPB::IsInitialized() const {
  return true;
}

void ConfigPB::InternalSwap(ConfigPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_.Swap(&other->config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexParamPB::InitAsDefaultInstance() {
  ::demo::_IndexParamPB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
}
class IndexParamPB::_Internal {
 public:
  static const ::demo::Status& status(const IndexParamPB* msg);
};

const ::demo::Status&
IndexParamPB::_Internal::status(const IndexParamPB* msg) {
  return *msg->status_;
}
void IndexParamPB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
IndexParamPB::IndexParamPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.IndexParamPB)
}
IndexParamPB::IndexParamPB(const IndexParamPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  index_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.index_param().empty()) {
    index_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_param_);
  }
  if (from.has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.IndexParamPB)
}

void IndexParamPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexParamPB_common_2eproto.base);
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

IndexParamPB::~IndexParamPB() {
  // @@protoc_insertion_point(destructor:demo.IndexParamPB)
  SharedDtor();
}

void IndexParamPB::SharedDtor() {
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void IndexParamPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexParamPB& IndexParamPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexParamPB_common_2eproto.base);
  return *internal_default_instance();
}


void IndexParamPB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.IndexParamPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndexParamPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "demo.IndexParamPB.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index_param(), ptr, ctx, "demo.IndexParamPB.index_param");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndexParamPB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.IndexParamPB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.IndexParamPB.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string index_param = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index_param()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_param().data(), static_cast<int>(this->index_param().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.IndexParamPB.index_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.IndexParamPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.IndexParamPB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndexParamPB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.IndexParamPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.IndexParamPB.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection_name(), output);
  }

  // string index_param = 3;
  if (this->index_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_param().data(), static_cast<int>(this->index_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.IndexParamPB.index_param");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->index_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.IndexParamPB)
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexParamPB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.IndexParamPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.IndexParamPB.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->collection_name(), target);
  }

  // string index_param = 3;
  if (this->index_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_param().data(), static_cast<int>(this->index_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.IndexParamPB.index_param");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->index_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.IndexParamPB)
  return target;
}

size_t IndexParamPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.IndexParamPB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collection_name = 2;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string index_param = 3;
  if (this->index_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index_param());
  }

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexParamPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.IndexParamPB)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexParamPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexParamPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.IndexParamPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.IndexParamPB)
    MergeFrom(*source);
  }
}

void IndexParamPB::MergeFrom(const IndexParamPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.IndexParamPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.index_param().size() > 0) {

    index_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_param_);
  }
  if (from.has_status()) {
    mutable_status()->::demo::Status::MergeFrom(from.status());
  }
}

void IndexParamPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.IndexParamPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexParamPB::CopyFrom(const IndexParamPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.IndexParamPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexParamPB::IsInitialized() const {
  return true;
}

void IndexParamPB::InternalSwap(IndexParamPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_param_.Swap(&other->index_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexParamPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneralResponsePB::InitAsDefaultInstance() {
  ::demo::_GeneralResponsePB_default_instance_._instance.get_mutable()->status_ = const_cast< ::demo::Status*>(
      ::demo::Status::internal_default_instance());
}
class GeneralResponsePB::_Internal {
 public:
  static const ::demo::Status& status(const GeneralResponsePB* msg);
};

const ::demo::Status&
GeneralResponsePB::_Internal::status(const GeneralResponsePB* msg) {
  return *msg->status_;
}
void GeneralResponsePB::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GeneralResponsePB::GeneralResponsePB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.GeneralResponsePB)
}
GeneralResponsePB::GeneralResponsePB(const GeneralResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.result().empty()) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_status()) {
    status_ = new ::demo::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:demo.GeneralResponsePB)
}

void GeneralResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralResponsePB_common_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

GeneralResponsePB::~GeneralResponsePB() {
  // @@protoc_insertion_point(destructor:demo.GeneralResponsePB)
  SharedDtor();
}

void GeneralResponsePB::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GeneralResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralResponsePB& GeneralResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralResponsePB_common_2eproto.base);
  return *internal_default_instance();
}


void GeneralResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.GeneralResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeneralResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "demo.GeneralResponsePB.result");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeneralResponsePB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.GeneralResponsePB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .demo.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "demo.GeneralResponsePB.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.GeneralResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.GeneralResponsePB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeneralResponsePB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.GeneralResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.GeneralResponsePB.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.GeneralResponsePB)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralResponsePB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.GeneralResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demo.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // string result = 2;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demo.GeneralResponsePB.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.GeneralResponsePB)
  return target;
}

size_t GeneralResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demo.GeneralResponsePB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // .demo.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.GeneralResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.GeneralResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.GeneralResponsePB)
    MergeFrom(*source);
  }
}

void GeneralResponsePB::MergeFrom(const GeneralResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.GeneralResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_status()) {
    mutable_status()->::demo::Status::MergeFrom(from.status());
  }
}

void GeneralResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.GeneralResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralResponsePB::CopyFrom(const GeneralResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.GeneralResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralResponsePB::IsInitialized() const {
  return true;
}

void GeneralResponsePB::InternalSwap(GeneralResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::demo::VectorColumnInfoPB* Arena::CreateMaybeMessage< ::demo::VectorColumnInfoPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::VectorColumnInfoPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::ColumnTypePB* Arena::CreateMaybeMessage< ::demo::ColumnTypePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::ColumnTypePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::ColumnSchemaPB* Arena::CreateMaybeMessage< ::demo::ColumnSchemaPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::ColumnSchemaPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CollectionSchemaPB* Arena::CreateMaybeMessage< ::demo::CollectionSchemaPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CollectionSchemaPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CreateCollectionRequestPB* Arena::CreateMaybeMessage< ::demo::CreateCollectionRequestPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CreateCollectionRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CollectionSchemaResponsePB* Arena::CreateMaybeMessage< ::demo::CollectionSchemaResponsePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CollectionSchemaResponsePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::BinaryVectorValuePB* Arena::CreateMaybeMessage< ::demo::BinaryVectorValuePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::BinaryVectorValuePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::FloatVectorValuePB* Arena::CreateMaybeMessage< ::demo::FloatVectorValuePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::FloatVectorValuePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::VectorColumnValuePB* Arena::CreateMaybeMessage< ::demo::VectorColumnValuePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::VectorColumnValuePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::ColumnValuePB* Arena::CreateMaybeMessage< ::demo::ColumnValuePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::ColumnValuePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::QueryColumnPB* Arena::CreateMaybeMessage< ::demo::QueryColumnPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::QueryColumnPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::TermQueryPB* Arena::CreateMaybeMessage< ::demo::TermQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::TermQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CompareExprPB* Arena::CreateMaybeMessage< ::demo::CompareExprPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CompareExprPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::RangeQueryPB* Arena::CreateMaybeMessage< ::demo::RangeQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::RangeQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::RowRecordPB* Arena::CreateMaybeMessage< ::demo::RowRecordPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::RowRecordPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::VectorQueryPB* Arena::CreateMaybeMessage< ::demo::VectorQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::VectorQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::InnerLeafQueryPB* Arena::CreateMaybeMessage< ::demo::InnerLeafQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::InnerLeafQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::LeafQueryPB* Arena::CreateMaybeMessage< ::demo::LeafQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::LeafQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::GeneralQueryPB* Arena::CreateMaybeMessage< ::demo::GeneralQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::GeneralQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::BinaryQueryPB* Arena::CreateMaybeMessage< ::demo::BinaryQueryPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::BinaryQueryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::QueryRequestPB* Arena::CreateMaybeMessage< ::demo::QueryRequestPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::QueryRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::QueryResponsePB* Arena::CreateMaybeMessage< ::demo::QueryResponsePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::QueryResponsePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CommandPB* Arena::CreateMaybeMessage< ::demo::CommandPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CommandPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CollectionSchemaListPB* Arena::CreateMaybeMessage< ::demo::CollectionSchemaListPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CollectionSchemaListPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::InsertRequestPB* Arena::CreateMaybeMessage< ::demo::InsertRequestPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::InsertRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::CollectionNamePB* Arena::CreateMaybeMessage< ::demo::CollectionNamePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::CollectionNamePB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::ConfigPB* Arena::CreateMaybeMessage< ::demo::ConfigPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::ConfigPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::IndexParamPB* Arena::CreateMaybeMessage< ::demo::IndexParamPB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::IndexParamPB >(arena);
}
template<> PROTOBUF_NOINLINE ::demo::GeneralResponsePB* Arena::CreateMaybeMessage< ::demo::GeneralResponsePB >(Arena* arena) {
  return Arena::CreateInternal< ::demo::GeneralResponsePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
