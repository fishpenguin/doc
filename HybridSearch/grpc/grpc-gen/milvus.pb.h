// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_milvus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_milvus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_milvus_2eproto;
namespace demo {
class BoolReply;
class BoolReplyDefaultTypeInternal;
extern BoolReplyDefaultTypeInternal _BoolReply_default_instance_;
class BooleanQuery;
class BooleanQueryDefaultTypeInternal;
extern BooleanQueryDefaultTypeInternal _BooleanQuery_default_instance_;
class CollectionInfo;
class CollectionInfoDefaultTypeInternal;
extern CollectionInfoDefaultTypeInternal _CollectionInfo_default_instance_;
class CollectionName;
class CollectionNameDefaultTypeInternal;
extern CollectionNameDefaultTypeInternal _CollectionName_default_instance_;
class CollectionRowCount;
class CollectionRowCountDefaultTypeInternal;
extern CollectionRowCountDefaultTypeInternal _CollectionRowCount_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CompareExpr;
class CompareExprDefaultTypeInternal;
extern CompareExprDefaultTypeInternal _CompareExpr_default_instance_;
class DeleteByIDParam;
class DeleteByIDParamDefaultTypeInternal;
extern DeleteByIDParamDefaultTypeInternal _DeleteByIDParam_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityIDs;
class EntityIDsDefaultTypeInternal;
extern EntityIDsDefaultTypeInternal _EntityIDs_default_instance_;
class EntityIdentity;
class EntityIdentityDefaultTypeInternal;
extern EntityIdentityDefaultTypeInternal _EntityIdentity_default_instance_;
class FieldParam;
class FieldParamDefaultTypeInternal;
extern FieldParamDefaultTypeInternal _FieldParam_default_instance_;
class FieldType;
class FieldTypeDefaultTypeInternal;
extern FieldTypeDefaultTypeInternal _FieldType_default_instance_;
class FlushParam;
class FlushParamDefaultTypeInternal;
extern FlushParamDefaultTypeInternal _FlushParam_default_instance_;
class GeneralQuery;
class GeneralQueryDefaultTypeInternal;
extern GeneralQueryDefaultTypeInternal _GeneralQuery_default_instance_;
class GetEntityIDsParam;
class GetEntityIDsParamDefaultTypeInternal;
extern GetEntityIDsParamDefaultTypeInternal _GetEntityIDsParam_default_instance_;
class IndexParam;
class IndexParamDefaultTypeInternal;
extern IndexParamDefaultTypeInternal _IndexParam_default_instance_;
class InsertParam;
class InsertParamDefaultTypeInternal;
extern InsertParamDefaultTypeInternal _InsertParam_default_instance_;
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class Mapping;
class MappingDefaultTypeInternal;
extern MappingDefaultTypeInternal _Mapping_default_instance_;
class MappingList;
class MappingListDefaultTypeInternal;
extern MappingListDefaultTypeInternal _MappingList_default_instance_;
class PartitionList;
class PartitionListDefaultTypeInternal;
extern PartitionListDefaultTypeInternal _PartitionList_default_instance_;
class PartitionParam;
class PartitionParamDefaultTypeInternal;
extern PartitionParamDefaultTypeInternal _PartitionParam_default_instance_;
class PartitionStat;
class PartitionStatDefaultTypeInternal;
extern PartitionStatDefaultTypeInternal _PartitionStat_default_instance_;
class QueryResult;
class QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class RangeQuery;
class RangeQueryDefaultTypeInternal;
extern RangeQueryDefaultTypeInternal _RangeQuery_default_instance_;
class SearchInFilesParam;
class SearchInFilesParamDefaultTypeInternal;
extern SearchInFilesParamDefaultTypeInternal _SearchInFilesParam_default_instance_;
class SearchParam;
class SearchParamDefaultTypeInternal;
extern SearchParamDefaultTypeInternal _SearchParam_default_instance_;
class SegmentStat;
class SegmentStatDefaultTypeInternal;
extern SegmentStatDefaultTypeInternal _SegmentStat_default_instance_;
class StringReply;
class StringReplyDefaultTypeInternal;
extern StringReplyDefaultTypeInternal _StringReply_default_instance_;
class TermQuery;
class TermQueryDefaultTypeInternal;
extern TermQueryDefaultTypeInternal _TermQuery_default_instance_;
class VectorFieldInfo;
class VectorFieldInfoDefaultTypeInternal;
extern VectorFieldInfoDefaultTypeInternal _VectorFieldInfo_default_instance_;
class VectorFieldValue;
class VectorFieldValueDefaultTypeInternal;
extern VectorFieldValueDefaultTypeInternal _VectorFieldValue_default_instance_;
class VectorQuery;
class VectorQueryDefaultTypeInternal;
extern VectorQueryDefaultTypeInternal _VectorQuery_default_instance_;
class VectorRecord;
class VectorRecordDefaultTypeInternal;
extern VectorRecordDefaultTypeInternal _VectorRecord_default_instance_;
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::BoolReply* Arena::CreateMaybeMessage<::demo::BoolReply>(Arena*);
template<> ::demo::BooleanQuery* Arena::CreateMaybeMessage<::demo::BooleanQuery>(Arena*);
template<> ::demo::CollectionInfo* Arena::CreateMaybeMessage<::demo::CollectionInfo>(Arena*);
template<> ::demo::CollectionName* Arena::CreateMaybeMessage<::demo::CollectionName>(Arena*);
template<> ::demo::CollectionRowCount* Arena::CreateMaybeMessage<::demo::CollectionRowCount>(Arena*);
template<> ::demo::Command* Arena::CreateMaybeMessage<::demo::Command>(Arena*);
template<> ::demo::CompareExpr* Arena::CreateMaybeMessage<::demo::CompareExpr>(Arena*);
template<> ::demo::DeleteByIDParam* Arena::CreateMaybeMessage<::demo::DeleteByIDParam>(Arena*);
template<> ::demo::Entity* Arena::CreateMaybeMessage<::demo::Entity>(Arena*);
template<> ::demo::EntityIDs* Arena::CreateMaybeMessage<::demo::EntityIDs>(Arena*);
template<> ::demo::EntityIdentity* Arena::CreateMaybeMessage<::demo::EntityIdentity>(Arena*);
template<> ::demo::FieldParam* Arena::CreateMaybeMessage<::demo::FieldParam>(Arena*);
template<> ::demo::FieldType* Arena::CreateMaybeMessage<::demo::FieldType>(Arena*);
template<> ::demo::FlushParam* Arena::CreateMaybeMessage<::demo::FlushParam>(Arena*);
template<> ::demo::GeneralQuery* Arena::CreateMaybeMessage<::demo::GeneralQuery>(Arena*);
template<> ::demo::GetEntityIDsParam* Arena::CreateMaybeMessage<::demo::GetEntityIDsParam>(Arena*);
template<> ::demo::IndexParam* Arena::CreateMaybeMessage<::demo::IndexParam>(Arena*);
template<> ::demo::InsertParam* Arena::CreateMaybeMessage<::demo::InsertParam>(Arena*);
template<> ::demo::KeyValuePair* Arena::CreateMaybeMessage<::demo::KeyValuePair>(Arena*);
template<> ::demo::Mapping* Arena::CreateMaybeMessage<::demo::Mapping>(Arena*);
template<> ::demo::MappingList* Arena::CreateMaybeMessage<::demo::MappingList>(Arena*);
template<> ::demo::PartitionList* Arena::CreateMaybeMessage<::demo::PartitionList>(Arena*);
template<> ::demo::PartitionParam* Arena::CreateMaybeMessage<::demo::PartitionParam>(Arena*);
template<> ::demo::PartitionStat* Arena::CreateMaybeMessage<::demo::PartitionStat>(Arena*);
template<> ::demo::QueryResult* Arena::CreateMaybeMessage<::demo::QueryResult>(Arena*);
template<> ::demo::RangeQuery* Arena::CreateMaybeMessage<::demo::RangeQuery>(Arena*);
template<> ::demo::SearchInFilesParam* Arena::CreateMaybeMessage<::demo::SearchInFilesParam>(Arena*);
template<> ::demo::SearchParam* Arena::CreateMaybeMessage<::demo::SearchParam>(Arena*);
template<> ::demo::SegmentStat* Arena::CreateMaybeMessage<::demo::SegmentStat>(Arena*);
template<> ::demo::StringReply* Arena::CreateMaybeMessage<::demo::StringReply>(Arena*);
template<> ::demo::TermQuery* Arena::CreateMaybeMessage<::demo::TermQuery>(Arena*);
template<> ::demo::VectorFieldInfo* Arena::CreateMaybeMessage<::demo::VectorFieldInfo>(Arena*);
template<> ::demo::VectorFieldValue* Arena::CreateMaybeMessage<::demo::VectorFieldValue>(Arena*);
template<> ::demo::VectorQuery* Arena::CreateMaybeMessage<::demo::VectorQuery>(Arena*);
template<> ::demo::VectorRecord* Arena::CreateMaybeMessage<::demo::VectorRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {

enum DataType : int {
  NULL_ = 0,
  INT16 = 2,
  INT32 = 3,
  INT64 = 4,
  STRING = 20,
  BOOL = 30,
  FLOAT = 40,
  DOUBLE = 41,
  VECTOR = 100,
  UNKNOWN = 9999,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = NULL_;
constexpr DataType DataType_MAX = UNKNOWN;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum CompareOperator : int {
  LT = 0,
  LTE = 1,
  EQ = 2,
  GT = 3,
  GTE = 4,
  NE = 5,
  CompareOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompareOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompareOperator_IsValid(int value);
constexpr CompareOperator CompareOperator_MIN = LT;
constexpr CompareOperator CompareOperator_MAX = NE;
constexpr int CompareOperator_ARRAYSIZE = CompareOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompareOperator_descriptor();
template<typename T>
inline const std::string& CompareOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompareOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompareOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompareOperator_descriptor(), enum_t_value);
}
inline bool CompareOperator_Parse(
    const std::string& name, CompareOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompareOperator>(
    CompareOperator_descriptor(), name, value);
}
enum Occur : int {
  INVALID = 0,
  MUST = 1,
  SHOULD = 2,
  MUST_NOT = 3,
  Occur_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Occur_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Occur_IsValid(int value);
constexpr Occur Occur_MIN = INVALID;
constexpr Occur Occur_MAX = MUST_NOT;
constexpr int Occur_ARRAYSIZE = Occur_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Occur_descriptor();
template<typename T>
inline const std::string& Occur_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Occur>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Occur_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Occur_descriptor(), enum_t_value);
}
inline bool Occur_Parse(
    const std::string& name, Occur* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Occur>(
    Occur_descriptor(), name, value);
}
// ===================================================================

class KeyValuePair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.KeyValuePair) */ {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.KeyValuePair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:demo.KeyValuePair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorFieldInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorFieldInfo) */ {
 public:
  VectorFieldInfo();
  virtual ~VectorFieldInfo();

  VectorFieldInfo(const VectorFieldInfo& from);
  VectorFieldInfo(VectorFieldInfo&& from) noexcept
    : VectorFieldInfo() {
    *this = ::std::move(from);
  }

  inline VectorFieldInfo& operator=(const VectorFieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorFieldInfo& operator=(VectorFieldInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorFieldInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorFieldInfo* internal_default_instance() {
    return reinterpret_cast<const VectorFieldInfo*>(
               &_VectorFieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorFieldInfo& a, VectorFieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorFieldInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorFieldInfo* New() const final {
    return CreateMaybeMessage<VectorFieldInfo>(nullptr);
  }

  VectorFieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorFieldInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorFieldInfo& from);
  void MergeFrom(const VectorFieldInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorFieldInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorFieldInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementTypeFieldNumber = 2,
    kDimensionFieldNumber = 1,
    kDistanceMetricFieldNumber = 3,
  };
  // string element_type = 2;
  void clear_element_type();
  const std::string& element_type() const;
  void set_element_type(const std::string& value);
  void set_element_type(std::string&& value);
  void set_element_type(const char* value);
  void set_element_type(const char* value, size_t size);
  std::string* mutable_element_type();
  std::string* release_element_type();
  void set_allocated_element_type(std::string* element_type);

  // int64 dimension = 1;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::int64 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 distance_metric = 3;
  void clear_distance_metric();
  ::PROTOBUF_NAMESPACE_ID::int64 distance_metric() const;
  void set_distance_metric(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.VectorFieldInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 dimension_;
  ::PROTOBUF_NAMESPACE_ID::int64 distance_metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FieldType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.FieldType) */ {
 public:
  FieldType();
  virtual ~FieldType();

  FieldType(const FieldType& from);
  FieldType(FieldType&& from) noexcept
    : FieldType() {
    *this = ::std::move(from);
  }

  inline FieldType& operator=(const FieldType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldType& operator=(FieldType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldType& default_instance();

  enum ValueCase {
    kType = 1,
    kInfo = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldType* internal_default_instance() {
    return reinterpret_cast<const FieldType*>(
               &_FieldType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldType& a, FieldType& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldType* New() const final {
    return CreateMaybeMessage<FieldType>(nullptr);
  }

  FieldType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldType& from);
  void MergeFrom(const FieldType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.FieldType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .demo.DataType type = 1;
  private:
  bool has_type() const;
  public:
  void clear_type();
  ::demo::DataType type() const;
  void set_type(::demo::DataType value);

  // .demo.VectorFieldInfo info = 2;
  bool has_info() const;
  void clear_info();
  const ::demo::VectorFieldInfo& info() const;
  ::demo::VectorFieldInfo* release_info();
  ::demo::VectorFieldInfo* mutable_info();
  void set_allocated_info(::demo::VectorFieldInfo* info);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:demo.FieldType)
 private:
  class _Internal;
  void set_has_type();
  void set_has_info();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    int type_;
    ::demo::VectorFieldInfo* info_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FieldParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.FieldParam) */ {
 public:
  FieldParam();
  virtual ~FieldParam();

  FieldParam(const FieldParam& from);
  FieldParam(FieldParam&& from) noexcept
    : FieldParam() {
    *this = ::std::move(from);
  }

  inline FieldParam& operator=(const FieldParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldParam& operator=(FieldParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldParam* internal_default_instance() {
    return reinterpret_cast<const FieldParam*>(
               &_FieldParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldParam& a, FieldParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldParam* New() const final {
    return CreateMaybeMessage<FieldParam>(nullptr);
  }

  FieldParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldParam& from);
  void MergeFrom(const FieldParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.FieldParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .demo.FieldType type = 3;
  bool has_type() const;
  void clear_type();
  const ::demo::FieldType& type() const;
  ::demo::FieldType* release_type();
  ::demo::FieldType* mutable_type();
  void set_allocated_type(::demo::FieldType* type);

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:demo.FieldParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::demo::FieldType* type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorFieldValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorFieldValue) */ {
 public:
  VectorFieldValue();
  virtual ~VectorFieldValue();

  VectorFieldValue(const VectorFieldValue& from);
  VectorFieldValue(VectorFieldValue&& from) noexcept
    : VectorFieldValue() {
    *this = ::std::move(from);
  }

  inline VectorFieldValue& operator=(const VectorFieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorFieldValue& operator=(VectorFieldValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorFieldValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorFieldValue* internal_default_instance() {
    return reinterpret_cast<const VectorFieldValue*>(
               &_VectorFieldValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VectorFieldValue& a, VectorFieldValue& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorFieldValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorFieldValue* New() const final {
    return CreateMaybeMessage<VectorFieldValue>(nullptr);
  }

  VectorFieldValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorFieldValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorFieldValue& from);
  void MergeFrom(const VectorFieldValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorFieldValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorFieldValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValueFieldNumber = 1,
    kBinaryValueFieldNumber = 2,
  };
  // repeated float float_value = 1;
  int float_value_size() const;
  void clear_float_value();
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_value();

  // bytes binary_value = 2;
  void clear_binary_value();
  const std::string& binary_value() const;
  void set_binary_value(const std::string& value);
  void set_binary_value(std::string&& value);
  void set_binary_value(const char* value);
  void set_binary_value(const void* value, size_t size);
  std::string* mutable_binary_value();
  std::string* release_binary_value();
  void set_allocated_binary_value(std::string* binary_value);

  // @@protoc_insertion_point(class_scope:demo.VectorFieldValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_value_;
  mutable std::atomic<int> _float_value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CollectionName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CollectionName) */ {
 public:
  CollectionName();
  virtual ~CollectionName();

  CollectionName(const CollectionName& from);
  CollectionName(CollectionName&& from) noexcept
    : CollectionName() {
    *this = ::std::move(from);
  }

  inline CollectionName& operator=(const CollectionName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionName& operator=(CollectionName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionName* internal_default_instance() {
    return reinterpret_cast<const CollectionName*>(
               &_CollectionName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CollectionName& a, CollectionName& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionName* New() const final {
    return CreateMaybeMessage<CollectionName>(nullptr);
  }

  CollectionName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionName& from);
  void MergeFrom(const CollectionName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CollectionName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 1,
  };
  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // @@protoc_insertion_point(class_scope:demo.CollectionName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class Mapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.Mapping) */ {
 public:
  Mapping();
  virtual ~Mapping();

  Mapping(const Mapping& from);
  Mapping(Mapping&& from) noexcept
    : Mapping() {
    *this = ::std::move(from);
  }

  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mapping& operator=(Mapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mapping* internal_default_instance() {
    return reinterpret_cast<const Mapping*>(
               &_Mapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Mapping& a, Mapping& b) {
    a.Swap(&b);
  }
  inline void Swap(Mapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mapping* New() const final {
    return CreateMaybeMessage<Mapping>(nullptr);
  }

  Mapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mapping& from);
  void MergeFrom(const Mapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.Mapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .demo.FieldParam fields = 3;
  int fields_size() const;
  void clear_fields();
  ::demo::FieldParam* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::FieldParam >*
      mutable_fields();
  const ::demo::FieldParam& fields(int index) const;
  ::demo::FieldParam* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::FieldParam >&
      fields() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:demo.Mapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::FieldParam > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class MappingList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.MappingList) */ {
 public:
  MappingList();
  virtual ~MappingList();

  MappingList(const MappingList& from);
  MappingList(MappingList&& from) noexcept
    : MappingList() {
    *this = ::std::move(from);
  }

  inline MappingList& operator=(const MappingList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MappingList& operator=(MappingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MappingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MappingList* internal_default_instance() {
    return reinterpret_cast<const MappingList*>(
               &_MappingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MappingList& a, MappingList& b) {
    a.Swap(&b);
  }
  inline void Swap(MappingList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MappingList* New() const final {
    return CreateMaybeMessage<MappingList>(nullptr);
  }

  MappingList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MappingList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MappingList& from);
  void MergeFrom(const MappingList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MappingList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.MappingList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingListFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .demo.Mapping mapping_list = 2;
  int mapping_list_size() const;
  void clear_mapping_list();
  ::demo::Mapping* mutable_mapping_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Mapping >*
      mutable_mapping_list();
  const ::demo::Mapping& mapping_list(int index) const;
  ::demo::Mapping* add_mapping_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Mapping >&
      mapping_list() const;

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // @@protoc_insertion_point(class_scope:demo.MappingList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Mapping > mapping_list_;
  ::demo::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class TermQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.TermQuery) */ {
 public:
  TermQuery();
  virtual ~TermQuery();

  TermQuery(const TermQuery& from);
  TermQuery(TermQuery&& from) noexcept
    : TermQuery() {
    *this = ::std::move(from);
  }

  inline TermQuery& operator=(const TermQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TermQuery& operator=(TermQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TermQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermQuery* internal_default_instance() {
    return reinterpret_cast<const TermQuery*>(
               &_TermQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TermQuery& a, TermQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(TermQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TermQuery* New() const final {
    return CreateMaybeMessage<TermQuery>(nullptr);
  }

  TermQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TermQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TermQuery& from);
  void MergeFrom(const TermQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TermQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.TermQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kFieldNameFieldNumber = 1,
    kBoostFieldNumber = 3,
  };
  // repeated string values = 2;
  int values_size() const;
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();

  // string field_name = 1;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // float boost = 3;
  void clear_boost();
  float boost() const;
  void set_boost(float value);

  // @@protoc_insertion_point(class_scope:demo.TermQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  float boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CompareExpr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CompareExpr) */ {
 public:
  CompareExpr();
  virtual ~CompareExpr();

  CompareExpr(const CompareExpr& from);
  CompareExpr(CompareExpr&& from) noexcept
    : CompareExpr() {
    *this = ::std::move(from);
  }

  inline CompareExpr& operator=(const CompareExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareExpr& operator=(CompareExpr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompareExpr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompareExpr* internal_default_instance() {
    return reinterpret_cast<const CompareExpr*>(
               &_CompareExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CompareExpr& a, CompareExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(CompareExpr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompareExpr* New() const final {
    return CreateMaybeMessage<CompareExpr>(nullptr);
  }

  CompareExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompareExpr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompareExpr& from);
  void MergeFrom(const CompareExpr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareExpr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CompareExpr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // string operand = 2;
  void clear_operand();
  const std::string& operand() const;
  void set_operand(const std::string& value);
  void set_operand(std::string&& value);
  void set_operand(const char* value);
  void set_operand(const char* value, size_t size);
  std::string* mutable_operand();
  std::string* release_operand();
  void set_allocated_operand(std::string* operand);

  // .demo.CompareOperator operator = 1;
  void clear_operator_();
  ::demo::CompareOperator operator_() const;
  void set_operator_(::demo::CompareOperator value);

  // @@protoc_insertion_point(class_scope:demo.CompareExpr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operand_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class RangeQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.RangeQuery) */ {
 public:
  RangeQuery();
  virtual ~RangeQuery();

  RangeQuery(const RangeQuery& from);
  RangeQuery(RangeQuery&& from) noexcept
    : RangeQuery() {
    *this = ::std::move(from);
  }

  inline RangeQuery& operator=(const RangeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeQuery& operator=(RangeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeQuery* internal_default_instance() {
    return reinterpret_cast<const RangeQuery*>(
               &_RangeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RangeQuery& a, RangeQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeQuery* New() const final {
    return CreateMaybeMessage<RangeQuery>(nullptr);
  }

  RangeQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeQuery& from);
  void MergeFrom(const RangeQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.RangeQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandFieldNumber = 2,
    kFieldNameFieldNumber = 1,
    kBoostFieldNumber = 3,
  };
  // repeated .demo.CompareExpr operand = 2;
  int operand_size() const;
  void clear_operand();
  ::demo::CompareExpr* mutable_operand(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExpr >*
      mutable_operand();
  const ::demo::CompareExpr& operand(int index) const;
  ::demo::CompareExpr* add_operand();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExpr >&
      operand() const;

  // string field_name = 1;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // float boost = 3;
  void clear_boost();
  float boost() const;
  void set_boost(float value);

  // @@protoc_insertion_point(class_scope:demo.RangeQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExpr > operand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  float boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorRecord) */ {
 public:
  VectorRecord();
  virtual ~VectorRecord();

  VectorRecord(const VectorRecord& from);
  VectorRecord(VectorRecord&& from) noexcept
    : VectorRecord() {
    *this = ::std::move(from);
  }

  inline VectorRecord& operator=(const VectorRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorRecord& operator=(VectorRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorRecord* internal_default_instance() {
    return reinterpret_cast<const VectorRecord*>(
               &_VectorRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VectorRecord& a, VectorRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorRecord* New() const final {
    return CreateMaybeMessage<VectorRecord>(nullptr);
  }

  VectorRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorRecord& from);
  void MergeFrom(const VectorRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 1,
    kBinaryDataFieldNumber = 2,
  };
  // repeated float float_data = 1;
  int float_data_size() const;
  void clear_float_data();
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // bytes binary_data = 2;
  void clear_binary_data();
  const std::string& binary_data() const;
  void set_binary_data(const std::string& value);
  void set_binary_data(std::string&& value);
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  std::string* mutable_binary_data();
  std::string* release_binary_data();
  void set_allocated_binary_data(std::string* binary_data);

  // @@protoc_insertion_point(class_scope:demo.VectorRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  mutable std::atomic<int> _float_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class VectorQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.VectorQuery) */ {
 public:
  VectorQuery();
  virtual ~VectorQuery();

  VectorQuery(const VectorQuery& from);
  VectorQuery(VectorQuery&& from) noexcept
    : VectorQuery() {
    *this = ::std::move(from);
  }

  inline VectorQuery& operator=(const VectorQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorQuery& operator=(VectorQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorQuery* internal_default_instance() {
    return reinterpret_cast<const VectorQuery*>(
               &_VectorQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VectorQuery& a, VectorQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorQuery* New() const final {
    return CreateMaybeMessage<VectorQuery>(nullptr);
  }

  VectorQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorQuery& from);
  void MergeFrom(const VectorQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.VectorQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 4,
    kExtraParamsFieldNumber = 5,
    kFieldNameFieldNumber = 1,
    kTopkFieldNumber = 2,
    kQueryBoostFieldNumber = 3,
  };
  // repeated .demo.VectorRecord records = 4;
  int records_size() const;
  void clear_records();
  ::demo::VectorRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::VectorRecord >*
      mutable_records();
  const ::demo::VectorRecord& records(int index) const;
  ::demo::VectorRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::VectorRecord >&
      records() const;

  // repeated .demo.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  ::demo::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
      mutable_extra_params();
  const ::demo::KeyValuePair& extra_params(int index) const;
  ::demo::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
      extra_params() const;

  // string field_name = 1;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);

  // int64 topk = 2;
  void clear_topk();
  ::PROTOBUF_NAMESPACE_ID::int64 topk() const;
  void set_topk(::PROTOBUF_NAMESPACE_ID::int64 value);

  // float query_boost = 3;
  void clear_query_boost();
  float query_boost() const;
  void set_query_boost(float value);

  // @@protoc_insertion_point(class_scope:demo.VectorQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::VectorRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair > extra_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 topk_;
  float query_boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class BooleanQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.BooleanQuery) */ {
 public:
  BooleanQuery();
  virtual ~BooleanQuery();

  BooleanQuery(const BooleanQuery& from);
  BooleanQuery(BooleanQuery&& from) noexcept
    : BooleanQuery() {
    *this = ::std::move(from);
  }

  inline BooleanQuery& operator=(const BooleanQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanQuery& operator=(BooleanQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BooleanQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BooleanQuery* internal_default_instance() {
    return reinterpret_cast<const BooleanQuery*>(
               &_BooleanQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BooleanQuery& a, BooleanQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanQuery* New() const final {
    return CreateMaybeMessage<BooleanQuery>(nullptr);
  }

  BooleanQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BooleanQuery& from);
  void MergeFrom(const BooleanQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.BooleanQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneralQueryFieldNumber = 2,
    kOccurFieldNumber = 1,
  };
  // repeated .demo.GeneralQuery general_query = 2;
  int general_query_size() const;
  void clear_general_query();
  ::demo::GeneralQuery* mutable_general_query(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >*
      mutable_general_query();
  const ::demo::GeneralQuery& general_query(int index) const;
  ::demo::GeneralQuery* add_general_query();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >&
      general_query() const;

  // .demo.Occur occur = 1;
  void clear_occur();
  ::demo::Occur occur() const;
  void set_occur(::demo::Occur value);

  // @@protoc_insertion_point(class_scope:demo.BooleanQuery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery > general_query_;
  int occur_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GeneralQuery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.GeneralQuery) */ {
 public:
  GeneralQuery();
  virtual ~GeneralQuery();

  GeneralQuery(const GeneralQuery& from);
  GeneralQuery(GeneralQuery&& from) noexcept
    : GeneralQuery() {
    *this = ::std::move(from);
  }

  inline GeneralQuery& operator=(const GeneralQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralQuery& operator=(GeneralQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneralQuery& default_instance();

  enum QueryCase {
    kBooleanQuery = 1,
    kTermQuery = 2,
    kRangeQuery = 3,
    kVectorQuery = 4,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralQuery* internal_default_instance() {
    return reinterpret_cast<const GeneralQuery*>(
               &_GeneralQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GeneralQuery& a, GeneralQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneralQuery* New() const final {
    return CreateMaybeMessage<GeneralQuery>(nullptr);
  }

  GeneralQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralQuery& from);
  void MergeFrom(const GeneralQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.GeneralQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBooleanQueryFieldNumber = 1,
    kTermQueryFieldNumber = 2,
    kRangeQueryFieldNumber = 3,
    kVectorQueryFieldNumber = 4,
  };
  // .demo.BooleanQuery boolean_query = 1;
  bool has_boolean_query() const;
  void clear_boolean_query();
  const ::demo::BooleanQuery& boolean_query() const;
  ::demo::BooleanQuery* release_boolean_query();
  ::demo::BooleanQuery* mutable_boolean_query();
  void set_allocated_boolean_query(::demo::BooleanQuery* boolean_query);

  // .demo.TermQuery term_query = 2;
  bool has_term_query() const;
  void clear_term_query();
  const ::demo::TermQuery& term_query() const;
  ::demo::TermQuery* release_term_query();
  ::demo::TermQuery* mutable_term_query();
  void set_allocated_term_query(::demo::TermQuery* term_query);

  // .demo.RangeQuery range_query = 3;
  bool has_range_query() const;
  void clear_range_query();
  const ::demo::RangeQuery& range_query() const;
  ::demo::RangeQuery* release_range_query();
  ::demo::RangeQuery* mutable_range_query();
  void set_allocated_range_query(::demo::RangeQuery* range_query);

  // .demo.VectorQuery vector_query = 4;
  bool has_vector_query() const;
  void clear_vector_query();
  const ::demo::VectorQuery& vector_query() const;
  ::demo::VectorQuery* release_vector_query();
  ::demo::VectorQuery* mutable_vector_query();
  void set_allocated_vector_query(::demo::VectorQuery* vector_query);

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:demo.GeneralQuery)
 private:
  class _Internal;
  void set_has_boolean_query();
  void set_has_term_query();
  void set_has_range_query();
  void set_has_vector_query();

  inline bool has_query() const;
  inline void clear_has_query();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryUnion {
    QueryUnion() {}
    ::demo::BooleanQuery* boolean_query_;
    ::demo::TermQuery* term_query_;
    ::demo::RangeQuery* range_query_;
    ::demo::VectorQuery* vector_query_;
  } query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SearchParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.SearchParam) */ {
 public:
  SearchParam();
  virtual ~SearchParam();

  SearchParam(const SearchParam& from);
  SearchParam(SearchParam&& from) noexcept
    : SearchParam() {
    *this = ::std::move(from);
  }

  inline SearchParam& operator=(const SearchParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchParam& operator=(SearchParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchParam* internal_default_instance() {
    return reinterpret_cast<const SearchParam*>(
               &_SearchParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SearchParam& a, SearchParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchParam* New() const final {
    return CreateMaybeMessage<SearchParam>(nullptr);
  }

  SearchParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchParam& from);
  void MergeFrom(const SearchParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.SearchParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionTagArrayFieldNumber = 2,
    kGeneralQueryFieldNumber = 3,
    kExtraParamsFieldNumber = 4,
    kCollectionNameFieldNumber = 1,
  };
  // repeated string partition_tag_array = 2;
  int partition_tag_array_size() const;
  void clear_partition_tag_array();
  const std::string& partition_tag_array(int index) const;
  std::string* mutable_partition_tag_array(int index);
  void set_partition_tag_array(int index, const std::string& value);
  void set_partition_tag_array(int index, std::string&& value);
  void set_partition_tag_array(int index, const char* value);
  void set_partition_tag_array(int index, const char* value, size_t size);
  std::string* add_partition_tag_array();
  void add_partition_tag_array(const std::string& value);
  void add_partition_tag_array(std::string&& value);
  void add_partition_tag_array(const char* value);
  void add_partition_tag_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_tag_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_tag_array();

  // repeated .demo.GeneralQuery general_query = 3;
  int general_query_size() const;
  void clear_general_query();
  ::demo::GeneralQuery* mutable_general_query(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >*
      mutable_general_query();
  const ::demo::GeneralQuery& general_query(int index) const;
  ::demo::GeneralQuery* add_general_query();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >&
      general_query() const;

  // repeated .demo.KeyValuePair extra_params = 4;
  int extra_params_size() const;
  void clear_extra_params();
  ::demo::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
      mutable_extra_params();
  const ::demo::KeyValuePair& extra_params(int index) const;
  ::demo::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
      extra_params() const;

  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // @@protoc_insertion_point(class_scope:demo.SearchParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_tag_array_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery > general_query_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair > extra_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SearchInFilesParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.SearchInFilesParam) */ {
 public:
  SearchInFilesParam();
  virtual ~SearchInFilesParam();

  SearchInFilesParam(const SearchInFilesParam& from);
  SearchInFilesParam(SearchInFilesParam&& from) noexcept
    : SearchInFilesParam() {
    *this = ::std::move(from);
  }

  inline SearchInFilesParam& operator=(const SearchInFilesParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchInFilesParam& operator=(SearchInFilesParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchInFilesParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchInFilesParam* internal_default_instance() {
    return reinterpret_cast<const SearchInFilesParam*>(
               &_SearchInFilesParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SearchInFilesParam& a, SearchInFilesParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchInFilesParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchInFilesParam* New() const final {
    return CreateMaybeMessage<SearchInFilesParam>(nullptr);
  }

  SearchInFilesParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchInFilesParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchInFilesParam& from);
  void MergeFrom(const SearchInFilesParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchInFilesParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.SearchInFilesParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdArrayFieldNumber = 1,
    kSearchParamFieldNumber = 2,
  };
  // repeated string file_id_array = 1;
  int file_id_array_size() const;
  void clear_file_id_array();
  const std::string& file_id_array(int index) const;
  std::string* mutable_file_id_array(int index);
  void set_file_id_array(int index, const std::string& value);
  void set_file_id_array(int index, std::string&& value);
  void set_file_id_array(int index, const char* value);
  void set_file_id_array(int index, const char* value, size_t size);
  std::string* add_file_id_array();
  void add_file_id_array(const std::string& value);
  void add_file_id_array(std::string&& value);
  void add_file_id_array(const char* value);
  void add_file_id_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_id_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_id_array();

  // .demo.SearchParam search_param = 2;
  bool has_search_param() const;
  void clear_search_param();
  const ::demo::SearchParam& search_param() const;
  ::demo::SearchParam* release_search_param();
  ::demo::SearchParam* mutable_search_param();
  void set_allocated_search_param(::demo::SearchParam* search_param);

  // @@protoc_insertion_point(class_scope:demo.SearchInFilesParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_id_array_;
  ::demo::SearchParam* search_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class Entity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(nullptr);
  }

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.Entity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNamesFieldNumber = 3,
    kVaulesFieldNumber = 4,
    kStatusFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // repeated string field_names = 3;
  int field_names_size() const;
  void clear_field_names();
  const std::string& field_names(int index) const;
  std::string* mutable_field_names(int index);
  void set_field_names(int index, const std::string& value);
  void set_field_names(int index, std::string&& value);
  void set_field_names(int index, const char* value);
  void set_field_names(int index, const char* value, size_t size);
  std::string* add_field_names();
  void add_field_names(const std::string& value);
  void add_field_names(std::string&& value);
  void add_field_names(const char* value);
  void add_field_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field_names();

  // repeated string vaules = 4;
  int vaules_size() const;
  void clear_vaules();
  const std::string& vaules(int index) const;
  std::string* mutable_vaules(int index);
  void set_vaules(int index, const std::string& value);
  void set_vaules(int index, std::string&& value);
  void set_vaules(int index, const char* value);
  void set_vaules(int index, const char* value, size_t size);
  std::string* add_vaules();
  void add_vaules(const std::string& value);
  void add_vaules(std::string&& value);
  void add_vaules(const char* value);
  void add_vaules(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vaules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vaules();

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // int64 entity_id = 2;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.Entity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vaules_;
  ::demo::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class QueryResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.QueryResult) */ {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResult* New() const final {
    return CreateMaybeMessage<QueryResult>(nullptr);
  }

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.QueryResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 2,
    kScoreFieldNumber = 4,
    kDistanceFieldNumber = 5,
    kStatusFieldNumber = 1,
    kRowNumFieldNumber = 3,
  };
  // repeated .demo.Entity entities = 2;
  int entities_size() const;
  void clear_entities();
  ::demo::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >*
      mutable_entities();
  const ::demo::Entity& entities(int index) const;
  ::demo::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >&
      entities() const;

  // repeated float score = 4;
  int score_size() const;
  void clear_score();
  float score(int index) const;
  void set_score(int index, float value);
  void add_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_score();

  // repeated float distance = 5;
  int distance_size() const;
  void clear_distance();
  float distance(int index) const;
  void set_distance(int index, float value);
  void add_distance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distance();

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // int64 row_num = 3;
  void clear_row_num();
  ::PROTOBUF_NAMESPACE_ID::int64 row_num() const;
  void set_row_num(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.QueryResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity > entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > score_;
  mutable std::atomic<int> _score_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::demo::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 row_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class InsertParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.InsertParam) */ {
 public:
  InsertParam();
  virtual ~InsertParam();

  InsertParam(const InsertParam& from);
  InsertParam(InsertParam&& from) noexcept
    : InsertParam() {
    *this = ::std::move(from);
  }

  inline InsertParam& operator=(const InsertParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertParam& operator=(InsertParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertParam* internal_default_instance() {
    return reinterpret_cast<const InsertParam*>(
               &_InsertParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(InsertParam& a, InsertParam& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertParam* New() const final {
    return CreateMaybeMessage<InsertParam>(nullptr);
  }

  InsertParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertParam& from);
  void MergeFrom(const InsertParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.InsertParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 3,
    kEntityIdArrayFieldNumber = 4,
    kExtraParamsFieldNumber = 5,
    kCollectionNameFieldNumber = 1,
    kPartitionTagFieldNumber = 2,
  };
  // repeated .demo.Entity entities = 3;
  int entities_size() const;
  void clear_entities();
  ::demo::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >*
      mutable_entities();
  const ::demo::Entity& entities(int index) const;
  ::demo::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >&
      entities() const;

  // repeated int64 entity_id_array = 4;
  int entity_id_array_size() const;
  void clear_entity_id_array();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_array(int index) const;
  void set_entity_id_array(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_entity_id_array(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      entity_id_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_entity_id_array();

  // repeated .demo.KeyValuePair extra_params = 5;
  int extra_params_size() const;
  void clear_extra_params();
  ::demo::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
      mutable_extra_params();
  const ::demo::KeyValuePair& extra_params(int index) const;
  ::demo::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
      extra_params() const;

  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string partition_tag = 2;
  void clear_partition_tag();
  const std::string& partition_tag() const;
  void set_partition_tag(const std::string& value);
  void set_partition_tag(std::string&& value);
  void set_partition_tag(const char* value);
  void set_partition_tag(const char* value, size_t size);
  std::string* mutable_partition_tag();
  std::string* release_partition_tag();
  void set_allocated_partition_tag(std::string* partition_tag);

  // @@protoc_insertion_point(class_scope:demo.InsertParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity > entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > entity_id_array_;
  mutable std::atomic<int> _entity_id_array_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair > extra_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class EntityIdentity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.EntityIdentity) */ {
 public:
  EntityIdentity();
  virtual ~EntityIdentity();

  EntityIdentity(const EntityIdentity& from);
  EntityIdentity(EntityIdentity&& from) noexcept
    : EntityIdentity() {
    *this = ::std::move(from);
  }

  inline EntityIdentity& operator=(const EntityIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityIdentity& operator=(EntityIdentity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityIdentity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityIdentity* internal_default_instance() {
    return reinterpret_cast<const EntityIdentity*>(
               &_EntityIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(EntityIdentity& a, EntityIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityIdentity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityIdentity* New() const final {
    return CreateMaybeMessage<EntityIdentity>(nullptr);
  }

  EntityIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityIdentity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityIdentity& from);
  void MergeFrom(const EntityIdentity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityIdentity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.EntityIdentity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.EntityIdentity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class EntityIDs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.EntityIDs) */ {
 public:
  EntityIDs();
  virtual ~EntityIDs();

  EntityIDs(const EntityIDs& from);
  EntityIDs(EntityIDs&& from) noexcept
    : EntityIDs() {
    *this = ::std::move(from);
  }

  inline EntityIDs& operator=(const EntityIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityIDs& operator=(EntityIDs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityIDs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityIDs* internal_default_instance() {
    return reinterpret_cast<const EntityIDs*>(
               &_EntityIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EntityIDs& a, EntityIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityIDs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityIDs* New() const final {
    return CreateMaybeMessage<EntityIDs>(nullptr);
  }

  EntityIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityIDs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityIDs& from);
  void MergeFrom(const EntityIDs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityIDs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.EntityIDs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdArrayFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int64 entity_id_array = 2;
  int entity_id_array_size() const;
  void clear_entity_id_array();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_array(int index) const;
  void set_entity_id_array(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_entity_id_array(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      entity_id_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_entity_id_array();

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // @@protoc_insertion_point(class_scope:demo.EntityIDs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > entity_id_array_;
  mutable std::atomic<int> _entity_id_array_cached_byte_size_;
  ::demo::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class GetEntityIDsParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.GetEntityIDsParam) */ {
 public:
  GetEntityIDsParam();
  virtual ~GetEntityIDsParam();

  GetEntityIDsParam(const GetEntityIDsParam& from);
  GetEntityIDsParam(GetEntityIDsParam&& from) noexcept
    : GetEntityIDsParam() {
    *this = ::std::move(from);
  }

  inline GetEntityIDsParam& operator=(const GetEntityIDsParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityIDsParam& operator=(GetEntityIDsParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityIDsParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEntityIDsParam* internal_default_instance() {
    return reinterpret_cast<const GetEntityIDsParam*>(
               &_GetEntityIDsParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetEntityIDsParam& a, GetEntityIDsParam& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityIDsParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityIDsParam* New() const final {
    return CreateMaybeMessage<GetEntityIDsParam>(nullptr);
  }

  GetEntityIDsParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityIDsParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityIDsParam& from);
  void MergeFrom(const GetEntityIDsParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityIDsParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.GetEntityIDsParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 1,
    kSegmentNameFieldNumber = 2,
  };
  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string segment_name = 2;
  void clear_segment_name();
  const std::string& segment_name() const;
  void set_segment_name(const std::string& value);
  void set_segment_name(std::string&& value);
  void set_segment_name(const char* value);
  void set_segment_name(const char* value, size_t size);
  std::string* mutable_segment_name();
  std::string* release_segment_name();
  void set_allocated_segment_name(std::string* segment_name);

  // @@protoc_insertion_point(class_scope:demo.GetEntityIDsParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr segment_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class DeleteByIDParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.DeleteByIDParam) */ {
 public:
  DeleteByIDParam();
  virtual ~DeleteByIDParam();

  DeleteByIDParam(const DeleteByIDParam& from);
  DeleteByIDParam(DeleteByIDParam&& from) noexcept
    : DeleteByIDParam() {
    *this = ::std::move(from);
  }

  inline DeleteByIDParam& operator=(const DeleteByIDParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteByIDParam& operator=(DeleteByIDParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteByIDParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteByIDParam* internal_default_instance() {
    return reinterpret_cast<const DeleteByIDParam*>(
               &_DeleteByIDParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeleteByIDParam& a, DeleteByIDParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteByIDParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteByIDParam* New() const final {
    return CreateMaybeMessage<DeleteByIDParam>(nullptr);
  }

  DeleteByIDParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteByIDParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteByIDParam& from);
  void MergeFrom(const DeleteByIDParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteByIDParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.DeleteByIDParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdArrayFieldNumber = 2,
    kCollectionNameFieldNumber = 1,
  };
  // repeated int64 id_array = 2;
  int id_array_size() const;
  void clear_id_array();
  ::PROTOBUF_NAMESPACE_ID::int64 id_array(int index) const;
  void set_id_array(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_id_array(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      id_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_id_array();

  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // @@protoc_insertion_point(class_scope:demo.DeleteByIDParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > id_array_;
  mutable std::atomic<int> _id_array_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PartitionParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.PartitionParam) */ {
 public:
  PartitionParam();
  virtual ~PartitionParam();

  PartitionParam(const PartitionParam& from);
  PartitionParam(PartitionParam&& from) noexcept
    : PartitionParam() {
    *this = ::std::move(from);
  }

  inline PartitionParam& operator=(const PartitionParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionParam& operator=(PartitionParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartitionParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartitionParam* internal_default_instance() {
    return reinterpret_cast<const PartitionParam*>(
               &_PartitionParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PartitionParam& a, PartitionParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartitionParam* New() const final {
    return CreateMaybeMessage<PartitionParam>(nullptr);
  }

  PartitionParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartitionParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartitionParam& from);
  void MergeFrom(const PartitionParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.PartitionParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // string collection_name = 1;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // string tag = 2;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // @@protoc_insertion_point(class_scope:demo.PartitionParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PartitionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.PartitionList) */ {
 public:
  PartitionList();
  virtual ~PartitionList();

  PartitionList(const PartitionList& from);
  PartitionList(PartitionList&& from) noexcept
    : PartitionList() {
    *this = ::std::move(from);
  }

  inline PartitionList& operator=(const PartitionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionList& operator=(PartitionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartitionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartitionList* internal_default_instance() {
    return reinterpret_cast<const PartitionList*>(
               &_PartitionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PartitionList& a, PartitionList& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartitionList* New() const final {
    return CreateMaybeMessage<PartitionList>(nullptr);
  }

  PartitionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartitionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartitionList& from);
  void MergeFrom(const PartitionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.PartitionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionTagArrayFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string partition_tag_array = 2;
  int partition_tag_array_size() const;
  void clear_partition_tag_array();
  const std::string& partition_tag_array(int index) const;
  std::string* mutable_partition_tag_array(int index);
  void set_partition_tag_array(int index, const std::string& value);
  void set_partition_tag_array(int index, std::string&& value);
  void set_partition_tag_array(int index, const char* value);
  void set_partition_tag_array(int index, const char* value, size_t size);
  std::string* add_partition_tag_array();
  void add_partition_tag_array(const std::string& value);
  void add_partition_tag_array(std::string&& value);
  void add_partition_tag_array(const char* value);
  void add_partition_tag_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_tag_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_tag_array();

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // @@protoc_insertion_point(class_scope:demo.PartitionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_tag_array_;
  ::demo::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class BoolReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.BoolReply) */ {
 public:
  BoolReply();
  virtual ~BoolReply();

  BoolReply(const BoolReply& from);
  BoolReply(BoolReply&& from) noexcept
    : BoolReply() {
    *this = ::std::move(from);
  }

  inline BoolReply& operator=(const BoolReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolReply& operator=(BoolReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolReply* internal_default_instance() {
    return reinterpret_cast<const BoolReply*>(
               &_BoolReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BoolReply& a, BoolReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolReply* New() const final {
    return CreateMaybeMessage<BoolReply>(nullptr);
  }

  BoolReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolReply& from);
  void MergeFrom(const BoolReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.BoolReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kBoolReplyFieldNumber = 2,
  };
  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // bool bool_reply = 2;
  void clear_bool_reply();
  bool bool_reply() const;
  void set_bool_reply(bool value);

  // @@protoc_insertion_point(class_scope:demo.BoolReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::Status* status_;
  bool bool_reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CollectionRowCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CollectionRowCount) */ {
 public:
  CollectionRowCount();
  virtual ~CollectionRowCount();

  CollectionRowCount(const CollectionRowCount& from);
  CollectionRowCount(CollectionRowCount&& from) noexcept
    : CollectionRowCount() {
    *this = ::std::move(from);
  }

  inline CollectionRowCount& operator=(const CollectionRowCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionRowCount& operator=(CollectionRowCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionRowCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionRowCount* internal_default_instance() {
    return reinterpret_cast<const CollectionRowCount*>(
               &_CollectionRowCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CollectionRowCount& a, CollectionRowCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionRowCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionRowCount* New() const final {
    return CreateMaybeMessage<CollectionRowCount>(nullptr);
  }

  CollectionRowCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionRowCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionRowCount& from);
  void MergeFrom(const CollectionRowCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionRowCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CollectionRowCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kCollectionRowCountFieldNumber = 2,
  };
  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // int64 collection_row_count = 2;
  void clear_collection_row_count();
  ::PROTOBUF_NAMESPACE_ID::int64 collection_row_count() const;
  void set_collection_row_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.CollectionRowCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::demo::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 collection_row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class SegmentStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.SegmentStat) */ {
 public:
  SegmentStat();
  virtual ~SegmentStat();

  SegmentStat(const SegmentStat& from);
  SegmentStat(SegmentStat&& from) noexcept
    : SegmentStat() {
    *this = ::std::move(from);
  }

  inline SegmentStat& operator=(const SegmentStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentStat& operator=(SegmentStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentStat* internal_default_instance() {
    return reinterpret_cast<const SegmentStat*>(
               &_SegmentStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SegmentStat& a, SegmentStat& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentStat* New() const final {
    return CreateMaybeMessage<SegmentStat>(nullptr);
  }

  SegmentStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentStat& from);
  void MergeFrom(const SegmentStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.SegmentStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentNameFieldNumber = 1,
    kIndexNameFieldNumber = 3,
    kRowCountFieldNumber = 2,
    kDataSizeFieldNumber = 4,
  };
  // string segment_name = 1;
  void clear_segment_name();
  const std::string& segment_name() const;
  void set_segment_name(const std::string& value);
  void set_segment_name(std::string&& value);
  void set_segment_name(const char* value);
  void set_segment_name(const char* value, size_t size);
  std::string* mutable_segment_name();
  std::string* release_segment_name();
  void set_allocated_segment_name(std::string* segment_name);

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);

  // int64 row_count = 2;
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::int64 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 data_size = 4;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.SegmentStat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr segment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 row_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class PartitionStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.PartitionStat) */ {
 public:
  PartitionStat();
  virtual ~PartitionStat();

  PartitionStat(const PartitionStat& from);
  PartitionStat(PartitionStat&& from) noexcept
    : PartitionStat() {
    *this = ::std::move(from);
  }

  inline PartitionStat& operator=(const PartitionStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionStat& operator=(PartitionStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartitionStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartitionStat* internal_default_instance() {
    return reinterpret_cast<const PartitionStat*>(
               &_PartitionStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PartitionStat& a, PartitionStat& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartitionStat* New() const final {
    return CreateMaybeMessage<PartitionStat>(nullptr);
  }

  PartitionStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartitionStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartitionStat& from);
  void MergeFrom(const PartitionStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.PartitionStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsStatFieldNumber = 3,
    kTagFieldNumber = 1,
    kTotalRowCountFieldNumber = 2,
  };
  // repeated .demo.SegmentStat segments_stat = 3;
  int segments_stat_size() const;
  void clear_segments_stat();
  ::demo::SegmentStat* mutable_segments_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::SegmentStat >*
      mutable_segments_stat();
  const ::demo::SegmentStat& segments_stat(int index) const;
  ::demo::SegmentStat* add_segments_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::SegmentStat >&
      segments_stat() const;

  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // int64 total_row_count = 2;
  void clear_total_row_count();
  ::PROTOBUF_NAMESPACE_ID::int64 total_row_count() const;
  void set_total_row_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.PartitionStat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::SegmentStat > segments_stat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class CollectionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.CollectionInfo) */ {
 public:
  CollectionInfo();
  virtual ~CollectionInfo();

  CollectionInfo(const CollectionInfo& from);
  CollectionInfo(CollectionInfo&& from) noexcept
    : CollectionInfo() {
    *this = ::std::move(from);
  }

  inline CollectionInfo& operator=(const CollectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionInfo& operator=(CollectionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionInfo* internal_default_instance() {
    return reinterpret_cast<const CollectionInfo*>(
               &_CollectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CollectionInfo& a, CollectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionInfo* New() const final {
    return CreateMaybeMessage<CollectionInfo>(nullptr);
  }

  CollectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionInfo& from);
  void MergeFrom(const CollectionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.CollectionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsStatFieldNumber = 3,
    kStatusFieldNumber = 1,
    kTotalRowCountFieldNumber = 2,
  };
  // repeated .demo.PartitionStat partitions_stat = 3;
  int partitions_stat_size() const;
  void clear_partitions_stat();
  ::demo::PartitionStat* mutable_partitions_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::PartitionStat >*
      mutable_partitions_stat();
  const ::demo::PartitionStat& partitions_stat(int index) const;
  ::demo::PartitionStat* add_partitions_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::PartitionStat >&
      partitions_stat() const;

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // int64 total_row_count = 2;
  void clear_total_row_count();
  ::PROTOBUF_NAMESPACE_ID::int64 total_row_count() const;
  void set_total_row_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:demo.CollectionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::PartitionStat > partitions_stat_;
  ::demo::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class IndexParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.IndexParam) */ {
 public:
  IndexParam();
  virtual ~IndexParam();

  IndexParam(const IndexParam& from);
  IndexParam(IndexParam&& from) noexcept
    : IndexParam() {
    *this = ::std::move(from);
  }

  inline IndexParam& operator=(const IndexParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexParam& operator=(IndexParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexParam* internal_default_instance() {
    return reinterpret_cast<const IndexParam*>(
               &_IndexParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(IndexParam& a, IndexParam& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexParam* New() const final {
    return CreateMaybeMessage<IndexParam>(nullptr);
  }

  IndexParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexParam& from);
  void MergeFrom(const IndexParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.IndexParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraParamsFieldNumber = 4,
    kCollectionNameFieldNumber = 2,
    kStatusFieldNumber = 1,
    kIndexTypeFieldNumber = 3,
  };
  // repeated .demo.KeyValuePair extra_params = 4;
  int extra_params_size() const;
  void clear_extra_params();
  ::demo::KeyValuePair* mutable_extra_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
      mutable_extra_params();
  const ::demo::KeyValuePair& extra_params(int index) const;
  ::demo::KeyValuePair* add_extra_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
      extra_params() const;

  // string collection_name = 2;
  void clear_collection_name();
  const std::string& collection_name() const;
  void set_collection_name(const std::string& value);
  void set_collection_name(std::string&& value);
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  std::string* mutable_collection_name();
  std::string* release_collection_name();
  void set_allocated_collection_name(std::string* collection_name);

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // int32 index_type = 3;
  void clear_index_type();
  ::PROTOBUF_NAMESPACE_ID::int32 index_type() const;
  void set_index_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:demo.IndexParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair > extra_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_name_;
  ::demo::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);

  // @@protoc_insertion_point(class_scope:demo.Command)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class StringReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.StringReply) */ {
 public:
  StringReply();
  virtual ~StringReply();

  StringReply(const StringReply& from);
  StringReply(StringReply&& from) noexcept
    : StringReply() {
    *this = ::std::move(from);
  }

  inline StringReply& operator=(const StringReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringReply& operator=(StringReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringReply* internal_default_instance() {
    return reinterpret_cast<const StringReply*>(
               &_StringReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(StringReply& a, StringReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StringReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringReply* New() const final {
    return CreateMaybeMessage<StringReply>(nullptr);
  }

  StringReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringReply& from);
  void MergeFrom(const StringReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.StringReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringReplyFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string string_reply = 2;
  void clear_string_reply();
  const std::string& string_reply() const;
  void set_string_reply(const std::string& value);
  void set_string_reply(std::string&& value);
  void set_string_reply(const char* value);
  void set_string_reply(const char* value, size_t size);
  std::string* mutable_string_reply();
  std::string* release_string_reply();
  void set_allocated_string_reply(std::string* string_reply);

  // .demo.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::demo::Status& status() const;
  ::demo::Status* release_status();
  ::demo::Status* mutable_status();
  void set_allocated_status(::demo::Status* status);

  // @@protoc_insertion_point(class_scope:demo.StringReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_reply_;
  ::demo::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// -------------------------------------------------------------------

class FlushParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.FlushParam) */ {
 public:
  FlushParam();
  virtual ~FlushParam();

  FlushParam(const FlushParam& from);
  FlushParam(FlushParam&& from) noexcept
    : FlushParam() {
    *this = ::std::move(from);
  }

  inline FlushParam& operator=(const FlushParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushParam& operator=(FlushParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushParam* internal_default_instance() {
    return reinterpret_cast<const FlushParam*>(
               &_FlushParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FlushParam& a, FlushParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushParam* New() const final {
    return CreateMaybeMessage<FlushParam>(nullptr);
  }

  FlushParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushParam& from);
  void MergeFrom(const FlushParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.FlushParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_milvus_2eproto);
    return ::descriptor_table_milvus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameArrayFieldNumber = 1,
  };
  // repeated string collection_name_array = 1;
  int collection_name_array_size() const;
  void clear_collection_name_array();
  const std::string& collection_name_array(int index) const;
  std::string* mutable_collection_name_array(int index);
  void set_collection_name_array(int index, const std::string& value);
  void set_collection_name_array(int index, std::string&& value);
  void set_collection_name_array(int index, const char* value);
  void set_collection_name_array(int index, const char* value, size_t size);
  std::string* add_collection_name_array();
  void add_collection_name_array(const std::string& value);
  void add_collection_name_array(std::string&& value);
  void add_collection_name_array(const char* value);
  void add_collection_name_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collection_name_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collection_name_array();

  // @@protoc_insertion_point(class_scope:demo.FlushParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collection_name_array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_milvus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:demo.KeyValuePair.key)
  return key_.GetNoArena();
}
inline void KeyValuePair::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.KeyValuePair.key)
}
inline void KeyValuePair::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:demo.KeyValuePair.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:demo.KeyValuePair.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:demo.KeyValuePair.key)
}

// string value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:demo.KeyValuePair.value)
  return value_.GetNoArena();
}
inline void KeyValuePair::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.KeyValuePair.value)
}
inline void KeyValuePair::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:demo.KeyValuePair.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:demo.KeyValuePair.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:demo.KeyValuePair.value)
}

// -------------------------------------------------------------------

// VectorFieldInfo

// int64 dimension = 1;
inline void VectorFieldInfo::clear_dimension() {
  dimension_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorFieldInfo::dimension() const {
  // @@protoc_insertion_point(field_get:demo.VectorFieldInfo.dimension)
  return dimension_;
}
inline void VectorFieldInfo::set_dimension(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:demo.VectorFieldInfo.dimension)
}

// string element_type = 2;
inline void VectorFieldInfo::clear_element_type() {
  element_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorFieldInfo::element_type() const {
  // @@protoc_insertion_point(field_get:demo.VectorFieldInfo.element_type)
  return element_type_.GetNoArena();
}
inline void VectorFieldInfo::set_element_type(const std::string& value) {
  
  element_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.VectorFieldInfo.element_type)
}
inline void VectorFieldInfo::set_element_type(std::string&& value) {
  
  element_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.VectorFieldInfo.element_type)
}
inline void VectorFieldInfo::set_element_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  element_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.VectorFieldInfo.element_type)
}
inline void VectorFieldInfo::set_element_type(const char* value, size_t size) {
  
  element_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.VectorFieldInfo.element_type)
}
inline std::string* VectorFieldInfo::mutable_element_type() {
  
  // @@protoc_insertion_point(field_mutable:demo.VectorFieldInfo.element_type)
  return element_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorFieldInfo::release_element_type() {
  // @@protoc_insertion_point(field_release:demo.VectorFieldInfo.element_type)
  
  return element_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorFieldInfo::set_allocated_element_type(std::string* element_type) {
  if (element_type != nullptr) {
    
  } else {
    
  }
  element_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), element_type);
  // @@protoc_insertion_point(field_set_allocated:demo.VectorFieldInfo.element_type)
}

// int64 distance_metric = 3;
inline void VectorFieldInfo::clear_distance_metric() {
  distance_metric_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorFieldInfo::distance_metric() const {
  // @@protoc_insertion_point(field_get:demo.VectorFieldInfo.distance_metric)
  return distance_metric_;
}
inline void VectorFieldInfo::set_distance_metric(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  distance_metric_ = value;
  // @@protoc_insertion_point(field_set:demo.VectorFieldInfo.distance_metric)
}

// -------------------------------------------------------------------

// FieldType

// .demo.DataType type = 1;
inline bool FieldType::has_type() const {
  return value_case() == kType;
}
inline void FieldType::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void FieldType::clear_type() {
  if (has_type()) {
    value_.type_ = 0;
    clear_has_value();
  }
}
inline ::demo::DataType FieldType::type() const {
  // @@protoc_insertion_point(field_get:demo.FieldType.type)
  if (has_type()) {
    return static_cast< ::demo::DataType >(value_.type_);
  }
  return static_cast< ::demo::DataType >(0);
}
inline void FieldType::set_type(::demo::DataType value) {
  if (!has_type()) {
    clear_value();
    set_has_type();
  }
  value_.type_ = value;
  // @@protoc_insertion_point(field_set:demo.FieldType.type)
}

// .demo.VectorFieldInfo info = 2;
inline bool FieldType::has_info() const {
  return value_case() == kInfo;
}
inline void FieldType::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void FieldType::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
inline ::demo::VectorFieldInfo* FieldType::release_info() {
  // @@protoc_insertion_point(field_release:demo.FieldType.info)
  if (has_info()) {
    clear_has_value();
      ::demo::VectorFieldInfo* temp = value_.info_;
    value_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::VectorFieldInfo& FieldType::info() const {
  // @@protoc_insertion_point(field_get:demo.FieldType.info)
  return has_info()
      ? *value_.info_
      : *reinterpret_cast< ::demo::VectorFieldInfo*>(&::demo::_VectorFieldInfo_default_instance_);
}
inline ::demo::VectorFieldInfo* FieldType::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = CreateMaybeMessage< ::demo::VectorFieldInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:demo.FieldType.info)
  return value_.info_;
}

inline bool FieldType::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void FieldType::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FieldType::ValueCase FieldType::value_case() const {
  return FieldType::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FieldParam

// uint64 id = 1;
inline void FieldParam::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldParam::id() const {
  // @@protoc_insertion_point(field_get:demo.FieldParam.id)
  return id_;
}
inline void FieldParam::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:demo.FieldParam.id)
}

// string name = 2;
inline void FieldParam::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldParam::name() const {
  // @@protoc_insertion_point(field_get:demo.FieldParam.name)
  return name_.GetNoArena();
}
inline void FieldParam::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.FieldParam.name)
}
inline void FieldParam::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.FieldParam.name)
}
inline void FieldParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.FieldParam.name)
}
inline void FieldParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.FieldParam.name)
}
inline std::string* FieldParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.FieldParam.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldParam::release_name() {
  // @@protoc_insertion_point(field_release:demo.FieldParam.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.FieldParam.name)
}

// .demo.FieldType type = 3;
inline bool FieldParam::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline void FieldParam::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::demo::FieldType& FieldParam::type() const {
  const ::demo::FieldType* p = type_;
  // @@protoc_insertion_point(field_get:demo.FieldParam.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::FieldType*>(
      &::demo::_FieldType_default_instance_);
}
inline ::demo::FieldType* FieldParam::release_type() {
  // @@protoc_insertion_point(field_release:demo.FieldParam.type)
  
  ::demo::FieldType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::demo::FieldType* FieldParam::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::FieldType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.FieldParam.type)
  return type_;
}
inline void FieldParam::set_allocated_type(::demo::FieldType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:demo.FieldParam.type)
}

// -------------------------------------------------------------------

// VectorFieldValue

// repeated float float_value = 1;
inline int VectorFieldValue::float_value_size() const {
  return float_value_.size();
}
inline void VectorFieldValue::clear_float_value() {
  float_value_.Clear();
}
inline float VectorFieldValue::float_value(int index) const {
  // @@protoc_insertion_point(field_get:demo.VectorFieldValue.float_value)
  return float_value_.Get(index);
}
inline void VectorFieldValue::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.VectorFieldValue.float_value)
}
inline void VectorFieldValue::add_float_value(float value) {
  float_value_.Add(value);
  // @@protoc_insertion_point(field_add:demo.VectorFieldValue.float_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorFieldValue::float_value() const {
  // @@protoc_insertion_point(field_list:demo.VectorFieldValue.float_value)
  return float_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorFieldValue::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:demo.VectorFieldValue.float_value)
  return &float_value_;
}

// bytes binary_value = 2;
inline void VectorFieldValue::clear_binary_value() {
  binary_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorFieldValue::binary_value() const {
  // @@protoc_insertion_point(field_get:demo.VectorFieldValue.binary_value)
  return binary_value_.GetNoArena();
}
inline void VectorFieldValue::set_binary_value(const std::string& value) {
  
  binary_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.VectorFieldValue.binary_value)
}
inline void VectorFieldValue::set_binary_value(std::string&& value) {
  
  binary_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.VectorFieldValue.binary_value)
}
inline void VectorFieldValue::set_binary_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binary_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.VectorFieldValue.binary_value)
}
inline void VectorFieldValue::set_binary_value(const void* value, size_t size) {
  
  binary_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.VectorFieldValue.binary_value)
}
inline std::string* VectorFieldValue::mutable_binary_value() {
  
  // @@protoc_insertion_point(field_mutable:demo.VectorFieldValue.binary_value)
  return binary_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorFieldValue::release_binary_value() {
  // @@protoc_insertion_point(field_release:demo.VectorFieldValue.binary_value)
  
  return binary_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorFieldValue::set_allocated_binary_value(std::string* binary_value) {
  if (binary_value != nullptr) {
    
  } else {
    
  }
  binary_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary_value);
  // @@protoc_insertion_point(field_set_allocated:demo.VectorFieldValue.binary_value)
}

// -------------------------------------------------------------------

// CollectionName

// string collection_name = 1;
inline void CollectionName::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionName::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.CollectionName.collection_name)
  return collection_name_.GetNoArena();
}
inline void CollectionName::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.CollectionName.collection_name)
}
inline void CollectionName::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.CollectionName.collection_name)
}
inline void CollectionName::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.CollectionName.collection_name)
}
inline void CollectionName::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.CollectionName.collection_name)
}
inline std::string* CollectionName::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.CollectionName.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionName::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.CollectionName.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionName::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.CollectionName.collection_name)
}

// -------------------------------------------------------------------

// Mapping

// uint64 id = 1;
inline void Mapping::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mapping::id() const {
  // @@protoc_insertion_point(field_get:demo.Mapping.id)
  return id_;
}
inline void Mapping::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:demo.Mapping.id)
}

// string name = 2;
inline void Mapping::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Mapping::name() const {
  // @@protoc_insertion_point(field_get:demo.Mapping.name)
  return name_.GetNoArena();
}
inline void Mapping::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.Mapping.name)
}
inline void Mapping::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Mapping.name)
}
inline void Mapping::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Mapping.name)
}
inline void Mapping::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Mapping.name)
}
inline std::string* Mapping::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.Mapping.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mapping::release_name() {
  // @@protoc_insertion_point(field_release:demo.Mapping.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mapping::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:demo.Mapping.name)
}

// repeated .demo.FieldParam fields = 3;
inline int Mapping::fields_size() const {
  return fields_.size();
}
inline void Mapping::clear_fields() {
  fields_.Clear();
}
inline ::demo::FieldParam* Mapping::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:demo.Mapping.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::FieldParam >*
Mapping::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:demo.Mapping.fields)
  return &fields_;
}
inline const ::demo::FieldParam& Mapping::fields(int index) const {
  // @@protoc_insertion_point(field_get:demo.Mapping.fields)
  return fields_.Get(index);
}
inline ::demo::FieldParam* Mapping::add_fields() {
  // @@protoc_insertion_point(field_add:demo.Mapping.fields)
  return fields_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::FieldParam >&
Mapping::fields() const {
  // @@protoc_insertion_point(field_list:demo.Mapping.fields)
  return fields_;
}

// -------------------------------------------------------------------

// MappingList

// .demo.Status status = 1;
inline bool MappingList::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& MappingList::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.MappingList.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* MappingList::release_status() {
  // @@protoc_insertion_point(field_release:demo.MappingList.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* MappingList::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.MappingList.status)
  return status_;
}
inline void MappingList::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.MappingList.status)
}

// repeated .demo.Mapping mapping_list = 2;
inline int MappingList::mapping_list_size() const {
  return mapping_list_.size();
}
inline void MappingList::clear_mapping_list() {
  mapping_list_.Clear();
}
inline ::demo::Mapping* MappingList::mutable_mapping_list(int index) {
  // @@protoc_insertion_point(field_mutable:demo.MappingList.mapping_list)
  return mapping_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Mapping >*
MappingList::mutable_mapping_list() {
  // @@protoc_insertion_point(field_mutable_list:demo.MappingList.mapping_list)
  return &mapping_list_;
}
inline const ::demo::Mapping& MappingList::mapping_list(int index) const {
  // @@protoc_insertion_point(field_get:demo.MappingList.mapping_list)
  return mapping_list_.Get(index);
}
inline ::demo::Mapping* MappingList::add_mapping_list() {
  // @@protoc_insertion_point(field_add:demo.MappingList.mapping_list)
  return mapping_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Mapping >&
MappingList::mapping_list() const {
  // @@protoc_insertion_point(field_list:demo.MappingList.mapping_list)
  return mapping_list_;
}

// -------------------------------------------------------------------

// TermQuery

// string field_name = 1;
inline void TermQuery::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TermQuery::field_name() const {
  // @@protoc_insertion_point(field_get:demo.TermQuery.field_name)
  return field_name_.GetNoArena();
}
inline void TermQuery::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.TermQuery.field_name)
}
inline void TermQuery::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.TermQuery.field_name)
}
inline void TermQuery::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.TermQuery.field_name)
}
inline void TermQuery::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.TermQuery.field_name)
}
inline std::string* TermQuery::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.TermQuery.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TermQuery::release_field_name() {
  // @@protoc_insertion_point(field_release:demo.TermQuery.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TermQuery::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:demo.TermQuery.field_name)
}

// repeated string values = 2;
inline int TermQuery::values_size() const {
  return values_.size();
}
inline void TermQuery::clear_values() {
  values_.Clear();
}
inline const std::string& TermQuery::values(int index) const {
  // @@protoc_insertion_point(field_get:demo.TermQuery.values)
  return values_.Get(index);
}
inline std::string* TermQuery::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:demo.TermQuery.values)
  return values_.Mutable(index);
}
inline void TermQuery::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.TermQuery.values)
  values_.Mutable(index)->assign(value);
}
inline void TermQuery::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.TermQuery.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void TermQuery::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.TermQuery.values)
}
inline void TermQuery::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.TermQuery.values)
}
inline std::string* TermQuery::add_values() {
  // @@protoc_insertion_point(field_add_mutable:demo.TermQuery.values)
  return values_.Add();
}
inline void TermQuery::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.TermQuery.values)
}
inline void TermQuery::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.TermQuery.values)
}
inline void TermQuery::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.TermQuery.values)
}
inline void TermQuery::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.TermQuery.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TermQuery::values() const {
  // @@protoc_insertion_point(field_list:demo.TermQuery.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TermQuery::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:demo.TermQuery.values)
  return &values_;
}

// float boost = 3;
inline void TermQuery::clear_boost() {
  boost_ = 0;
}
inline float TermQuery::boost() const {
  // @@protoc_insertion_point(field_get:demo.TermQuery.boost)
  return boost_;
}
inline void TermQuery::set_boost(float value) {
  
  boost_ = value;
  // @@protoc_insertion_point(field_set:demo.TermQuery.boost)
}

// -------------------------------------------------------------------

// CompareExpr

// .demo.CompareOperator operator = 1;
inline void CompareExpr::clear_operator_() {
  operator__ = 0;
}
inline ::demo::CompareOperator CompareExpr::operator_() const {
  // @@protoc_insertion_point(field_get:demo.CompareExpr.operator)
  return static_cast< ::demo::CompareOperator >(operator__);
}
inline void CompareExpr::set_operator_(::demo::CompareOperator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:demo.CompareExpr.operator)
}

// string operand = 2;
inline void CompareExpr::clear_operand() {
  operand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompareExpr::operand() const {
  // @@protoc_insertion_point(field_get:demo.CompareExpr.operand)
  return operand_.GetNoArena();
}
inline void CompareExpr::set_operand(const std::string& value) {
  
  operand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.CompareExpr.operand)
}
inline void CompareExpr::set_operand(std::string&& value) {
  
  operand_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.CompareExpr.operand)
}
inline void CompareExpr::set_operand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.CompareExpr.operand)
}
inline void CompareExpr::set_operand(const char* value, size_t size) {
  
  operand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.CompareExpr.operand)
}
inline std::string* CompareExpr::mutable_operand() {
  
  // @@protoc_insertion_point(field_mutable:demo.CompareExpr.operand)
  return operand_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompareExpr::release_operand() {
  // @@protoc_insertion_point(field_release:demo.CompareExpr.operand)
  
  return operand_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompareExpr::set_allocated_operand(std::string* operand) {
  if (operand != nullptr) {
    
  } else {
    
  }
  operand_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operand);
  // @@protoc_insertion_point(field_set_allocated:demo.CompareExpr.operand)
}

// -------------------------------------------------------------------

// RangeQuery

// string field_name = 1;
inline void RangeQuery::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeQuery::field_name() const {
  // @@protoc_insertion_point(field_get:demo.RangeQuery.field_name)
  return field_name_.GetNoArena();
}
inline void RangeQuery::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.RangeQuery.field_name)
}
inline void RangeQuery::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.RangeQuery.field_name)
}
inline void RangeQuery::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.RangeQuery.field_name)
}
inline void RangeQuery::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.RangeQuery.field_name)
}
inline std::string* RangeQuery::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.RangeQuery.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeQuery::release_field_name() {
  // @@protoc_insertion_point(field_release:demo.RangeQuery.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeQuery::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:demo.RangeQuery.field_name)
}

// repeated .demo.CompareExpr operand = 2;
inline int RangeQuery::operand_size() const {
  return operand_.size();
}
inline void RangeQuery::clear_operand() {
  operand_.Clear();
}
inline ::demo::CompareExpr* RangeQuery::mutable_operand(int index) {
  // @@protoc_insertion_point(field_mutable:demo.RangeQuery.operand)
  return operand_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExpr >*
RangeQuery::mutable_operand() {
  // @@protoc_insertion_point(field_mutable_list:demo.RangeQuery.operand)
  return &operand_;
}
inline const ::demo::CompareExpr& RangeQuery::operand(int index) const {
  // @@protoc_insertion_point(field_get:demo.RangeQuery.operand)
  return operand_.Get(index);
}
inline ::demo::CompareExpr* RangeQuery::add_operand() {
  // @@protoc_insertion_point(field_add:demo.RangeQuery.operand)
  return operand_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::CompareExpr >&
RangeQuery::operand() const {
  // @@protoc_insertion_point(field_list:demo.RangeQuery.operand)
  return operand_;
}

// float boost = 3;
inline void RangeQuery::clear_boost() {
  boost_ = 0;
}
inline float RangeQuery::boost() const {
  // @@protoc_insertion_point(field_get:demo.RangeQuery.boost)
  return boost_;
}
inline void RangeQuery::set_boost(float value) {
  
  boost_ = value;
  // @@protoc_insertion_point(field_set:demo.RangeQuery.boost)
}

// -------------------------------------------------------------------

// VectorRecord

// repeated float float_data = 1;
inline int VectorRecord::float_data_size() const {
  return float_data_.size();
}
inline void VectorRecord::clear_float_data() {
  float_data_.Clear();
}
inline float VectorRecord::float_data(int index) const {
  // @@protoc_insertion_point(field_get:demo.VectorRecord.float_data)
  return float_data_.Get(index);
}
inline void VectorRecord::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.VectorRecord.float_data)
}
inline void VectorRecord::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:demo.VectorRecord.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorRecord::float_data() const {
  // @@protoc_insertion_point(field_list:demo.VectorRecord.float_data)
  return float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorRecord::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:demo.VectorRecord.float_data)
  return &float_data_;
}

// bytes binary_data = 2;
inline void VectorRecord::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorRecord::binary_data() const {
  // @@protoc_insertion_point(field_get:demo.VectorRecord.binary_data)
  return binary_data_.GetNoArena();
}
inline void VectorRecord::set_binary_data(const std::string& value) {
  
  binary_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.VectorRecord.binary_data)
}
inline void VectorRecord::set_binary_data(std::string&& value) {
  
  binary_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.VectorRecord.binary_data)
}
inline void VectorRecord::set_binary_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binary_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.VectorRecord.binary_data)
}
inline void VectorRecord::set_binary_data(const void* value, size_t size) {
  
  binary_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.VectorRecord.binary_data)
}
inline std::string* VectorRecord::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:demo.VectorRecord.binary_data)
  return binary_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorRecord::release_binary_data() {
  // @@protoc_insertion_point(field_release:demo.VectorRecord.binary_data)
  
  return binary_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorRecord::set_allocated_binary_data(std::string* binary_data) {
  if (binary_data != nullptr) {
    
  } else {
    
  }
  binary_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:demo.VectorRecord.binary_data)
}

// -------------------------------------------------------------------

// VectorQuery

// string field_name = 1;
inline void VectorQuery::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VectorQuery::field_name() const {
  // @@protoc_insertion_point(field_get:demo.VectorQuery.field_name)
  return field_name_.GetNoArena();
}
inline void VectorQuery::set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.VectorQuery.field_name)
}
inline void VectorQuery::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.VectorQuery.field_name)
}
inline void VectorQuery::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.VectorQuery.field_name)
}
inline void VectorQuery::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.VectorQuery.field_name)
}
inline std::string* VectorQuery::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.VectorQuery.field_name)
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VectorQuery::release_field_name() {
  // @@protoc_insertion_point(field_release:demo.VectorQuery.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VectorQuery::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:demo.VectorQuery.field_name)
}

// int64 topk = 2;
inline void VectorQuery::clear_topk() {
  topk_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VectorQuery::topk() const {
  // @@protoc_insertion_point(field_get:demo.VectorQuery.topk)
  return topk_;
}
inline void VectorQuery::set_topk(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  topk_ = value;
  // @@protoc_insertion_point(field_set:demo.VectorQuery.topk)
}

// float query_boost = 3;
inline void VectorQuery::clear_query_boost() {
  query_boost_ = 0;
}
inline float VectorQuery::query_boost() const {
  // @@protoc_insertion_point(field_get:demo.VectorQuery.query_boost)
  return query_boost_;
}
inline void VectorQuery::set_query_boost(float value) {
  
  query_boost_ = value;
  // @@protoc_insertion_point(field_set:demo.VectorQuery.query_boost)
}

// repeated .demo.VectorRecord records = 4;
inline int VectorQuery::records_size() const {
  return records_.size();
}
inline void VectorQuery::clear_records() {
  records_.Clear();
}
inline ::demo::VectorRecord* VectorQuery::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:demo.VectorQuery.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::VectorRecord >*
VectorQuery::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:demo.VectorQuery.records)
  return &records_;
}
inline const ::demo::VectorRecord& VectorQuery::records(int index) const {
  // @@protoc_insertion_point(field_get:demo.VectorQuery.records)
  return records_.Get(index);
}
inline ::demo::VectorRecord* VectorQuery::add_records() {
  // @@protoc_insertion_point(field_add:demo.VectorQuery.records)
  return records_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::VectorRecord >&
VectorQuery::records() const {
  // @@protoc_insertion_point(field_list:demo.VectorQuery.records)
  return records_;
}

// repeated .demo.KeyValuePair extra_params = 5;
inline int VectorQuery::extra_params_size() const {
  return extra_params_.size();
}
inline void VectorQuery::clear_extra_params() {
  extra_params_.Clear();
}
inline ::demo::KeyValuePair* VectorQuery::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:demo.VectorQuery.extra_params)
  return extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
VectorQuery::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:demo.VectorQuery.extra_params)
  return &extra_params_;
}
inline const ::demo::KeyValuePair& VectorQuery::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:demo.VectorQuery.extra_params)
  return extra_params_.Get(index);
}
inline ::demo::KeyValuePair* VectorQuery::add_extra_params() {
  // @@protoc_insertion_point(field_add:demo.VectorQuery.extra_params)
  return extra_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
VectorQuery::extra_params() const {
  // @@protoc_insertion_point(field_list:demo.VectorQuery.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// BooleanQuery

// .demo.Occur occur = 1;
inline void BooleanQuery::clear_occur() {
  occur_ = 0;
}
inline ::demo::Occur BooleanQuery::occur() const {
  // @@protoc_insertion_point(field_get:demo.BooleanQuery.occur)
  return static_cast< ::demo::Occur >(occur_);
}
inline void BooleanQuery::set_occur(::demo::Occur value) {
  
  occur_ = value;
  // @@protoc_insertion_point(field_set:demo.BooleanQuery.occur)
}

// repeated .demo.GeneralQuery general_query = 2;
inline int BooleanQuery::general_query_size() const {
  return general_query_.size();
}
inline void BooleanQuery::clear_general_query() {
  general_query_.Clear();
}
inline ::demo::GeneralQuery* BooleanQuery::mutable_general_query(int index) {
  // @@protoc_insertion_point(field_mutable:demo.BooleanQuery.general_query)
  return general_query_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >*
BooleanQuery::mutable_general_query() {
  // @@protoc_insertion_point(field_mutable_list:demo.BooleanQuery.general_query)
  return &general_query_;
}
inline const ::demo::GeneralQuery& BooleanQuery::general_query(int index) const {
  // @@protoc_insertion_point(field_get:demo.BooleanQuery.general_query)
  return general_query_.Get(index);
}
inline ::demo::GeneralQuery* BooleanQuery::add_general_query() {
  // @@protoc_insertion_point(field_add:demo.BooleanQuery.general_query)
  return general_query_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >&
BooleanQuery::general_query() const {
  // @@protoc_insertion_point(field_list:demo.BooleanQuery.general_query)
  return general_query_;
}

// -------------------------------------------------------------------

// GeneralQuery

// .demo.BooleanQuery boolean_query = 1;
inline bool GeneralQuery::has_boolean_query() const {
  return query_case() == kBooleanQuery;
}
inline void GeneralQuery::set_has_boolean_query() {
  _oneof_case_[0] = kBooleanQuery;
}
inline void GeneralQuery::clear_boolean_query() {
  if (has_boolean_query()) {
    delete query_.boolean_query_;
    clear_has_query();
  }
}
inline ::demo::BooleanQuery* GeneralQuery::release_boolean_query() {
  // @@protoc_insertion_point(field_release:demo.GeneralQuery.boolean_query)
  if (has_boolean_query()) {
    clear_has_query();
      ::demo::BooleanQuery* temp = query_.boolean_query_;
    query_.boolean_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::BooleanQuery& GeneralQuery::boolean_query() const {
  // @@protoc_insertion_point(field_get:demo.GeneralQuery.boolean_query)
  return has_boolean_query()
      ? *query_.boolean_query_
      : *reinterpret_cast< ::demo::BooleanQuery*>(&::demo::_BooleanQuery_default_instance_);
}
inline ::demo::BooleanQuery* GeneralQuery::mutable_boolean_query() {
  if (!has_boolean_query()) {
    clear_query();
    set_has_boolean_query();
    query_.boolean_query_ = CreateMaybeMessage< ::demo::BooleanQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:demo.GeneralQuery.boolean_query)
  return query_.boolean_query_;
}

// .demo.TermQuery term_query = 2;
inline bool GeneralQuery::has_term_query() const {
  return query_case() == kTermQuery;
}
inline void GeneralQuery::set_has_term_query() {
  _oneof_case_[0] = kTermQuery;
}
inline void GeneralQuery::clear_term_query() {
  if (has_term_query()) {
    delete query_.term_query_;
    clear_has_query();
  }
}
inline ::demo::TermQuery* GeneralQuery::release_term_query() {
  // @@protoc_insertion_point(field_release:demo.GeneralQuery.term_query)
  if (has_term_query()) {
    clear_has_query();
      ::demo::TermQuery* temp = query_.term_query_;
    query_.term_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::TermQuery& GeneralQuery::term_query() const {
  // @@protoc_insertion_point(field_get:demo.GeneralQuery.term_query)
  return has_term_query()
      ? *query_.term_query_
      : *reinterpret_cast< ::demo::TermQuery*>(&::demo::_TermQuery_default_instance_);
}
inline ::demo::TermQuery* GeneralQuery::mutable_term_query() {
  if (!has_term_query()) {
    clear_query();
    set_has_term_query();
    query_.term_query_ = CreateMaybeMessage< ::demo::TermQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:demo.GeneralQuery.term_query)
  return query_.term_query_;
}

// .demo.RangeQuery range_query = 3;
inline bool GeneralQuery::has_range_query() const {
  return query_case() == kRangeQuery;
}
inline void GeneralQuery::set_has_range_query() {
  _oneof_case_[0] = kRangeQuery;
}
inline void GeneralQuery::clear_range_query() {
  if (has_range_query()) {
    delete query_.range_query_;
    clear_has_query();
  }
}
inline ::demo::RangeQuery* GeneralQuery::release_range_query() {
  // @@protoc_insertion_point(field_release:demo.GeneralQuery.range_query)
  if (has_range_query()) {
    clear_has_query();
      ::demo::RangeQuery* temp = query_.range_query_;
    query_.range_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::RangeQuery& GeneralQuery::range_query() const {
  // @@protoc_insertion_point(field_get:demo.GeneralQuery.range_query)
  return has_range_query()
      ? *query_.range_query_
      : *reinterpret_cast< ::demo::RangeQuery*>(&::demo::_RangeQuery_default_instance_);
}
inline ::demo::RangeQuery* GeneralQuery::mutable_range_query() {
  if (!has_range_query()) {
    clear_query();
    set_has_range_query();
    query_.range_query_ = CreateMaybeMessage< ::demo::RangeQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:demo.GeneralQuery.range_query)
  return query_.range_query_;
}

// .demo.VectorQuery vector_query = 4;
inline bool GeneralQuery::has_vector_query() const {
  return query_case() == kVectorQuery;
}
inline void GeneralQuery::set_has_vector_query() {
  _oneof_case_[0] = kVectorQuery;
}
inline void GeneralQuery::clear_vector_query() {
  if (has_vector_query()) {
    delete query_.vector_query_;
    clear_has_query();
  }
}
inline ::demo::VectorQuery* GeneralQuery::release_vector_query() {
  // @@protoc_insertion_point(field_release:demo.GeneralQuery.vector_query)
  if (has_vector_query()) {
    clear_has_query();
      ::demo::VectorQuery* temp = query_.vector_query_;
    query_.vector_query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::demo::VectorQuery& GeneralQuery::vector_query() const {
  // @@protoc_insertion_point(field_get:demo.GeneralQuery.vector_query)
  return has_vector_query()
      ? *query_.vector_query_
      : *reinterpret_cast< ::demo::VectorQuery*>(&::demo::_VectorQuery_default_instance_);
}
inline ::demo::VectorQuery* GeneralQuery::mutable_vector_query() {
  if (!has_vector_query()) {
    clear_query();
    set_has_vector_query();
    query_.vector_query_ = CreateMaybeMessage< ::demo::VectorQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:demo.GeneralQuery.vector_query)
  return query_.vector_query_;
}

inline bool GeneralQuery::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void GeneralQuery::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline GeneralQuery::QueryCase GeneralQuery::query_case() const {
  return GeneralQuery::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SearchParam

// string collection_name = 1;
inline void SearchParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchParam::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.SearchParam.collection_name)
  return collection_name_.GetNoArena();
}
inline void SearchParam::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.SearchParam.collection_name)
}
inline void SearchParam::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.SearchParam.collection_name)
}
inline void SearchParam::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.SearchParam.collection_name)
}
inline void SearchParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.SearchParam.collection_name)
}
inline std::string* SearchParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.SearchParam.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.SearchParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchParam::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.SearchParam.collection_name)
}

// repeated string partition_tag_array = 2;
inline int SearchParam::partition_tag_array_size() const {
  return partition_tag_array_.size();
}
inline void SearchParam::clear_partition_tag_array() {
  partition_tag_array_.Clear();
}
inline const std::string& SearchParam::partition_tag_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.SearchParam.partition_tag_array)
  return partition_tag_array_.Get(index);
}
inline std::string* SearchParam::mutable_partition_tag_array(int index) {
  // @@protoc_insertion_point(field_mutable:demo.SearchParam.partition_tag_array)
  return partition_tag_array_.Mutable(index);
}
inline void SearchParam::set_partition_tag_array(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.SearchParam.partition_tag_array)
  partition_tag_array_.Mutable(index)->assign(value);
}
inline void SearchParam::set_partition_tag_array(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.SearchParam.partition_tag_array)
  partition_tag_array_.Mutable(index)->assign(std::move(value));
}
inline void SearchParam::set_partition_tag_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tag_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.SearchParam.partition_tag_array)
}
inline void SearchParam::set_partition_tag_array(int index, const char* value, size_t size) {
  partition_tag_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.SearchParam.partition_tag_array)
}
inline std::string* SearchParam::add_partition_tag_array() {
  // @@protoc_insertion_point(field_add_mutable:demo.SearchParam.partition_tag_array)
  return partition_tag_array_.Add();
}
inline void SearchParam::add_partition_tag_array(const std::string& value) {
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.SearchParam.partition_tag_array)
}
inline void SearchParam::add_partition_tag_array(std::string&& value) {
  partition_tag_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.SearchParam.partition_tag_array)
}
inline void SearchParam::add_partition_tag_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.SearchParam.partition_tag_array)
}
inline void SearchParam::add_partition_tag_array(const char* value, size_t size) {
  partition_tag_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.SearchParam.partition_tag_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchParam::partition_tag_array() const {
  // @@protoc_insertion_point(field_list:demo.SearchParam.partition_tag_array)
  return partition_tag_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchParam::mutable_partition_tag_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.SearchParam.partition_tag_array)
  return &partition_tag_array_;
}

// repeated .demo.GeneralQuery general_query = 3;
inline int SearchParam::general_query_size() const {
  return general_query_.size();
}
inline void SearchParam::clear_general_query() {
  general_query_.Clear();
}
inline ::demo::GeneralQuery* SearchParam::mutable_general_query(int index) {
  // @@protoc_insertion_point(field_mutable:demo.SearchParam.general_query)
  return general_query_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >*
SearchParam::mutable_general_query() {
  // @@protoc_insertion_point(field_mutable_list:demo.SearchParam.general_query)
  return &general_query_;
}
inline const ::demo::GeneralQuery& SearchParam::general_query(int index) const {
  // @@protoc_insertion_point(field_get:demo.SearchParam.general_query)
  return general_query_.Get(index);
}
inline ::demo::GeneralQuery* SearchParam::add_general_query() {
  // @@protoc_insertion_point(field_add:demo.SearchParam.general_query)
  return general_query_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::GeneralQuery >&
SearchParam::general_query() const {
  // @@protoc_insertion_point(field_list:demo.SearchParam.general_query)
  return general_query_;
}

// repeated .demo.KeyValuePair extra_params = 4;
inline int SearchParam::extra_params_size() const {
  return extra_params_.size();
}
inline void SearchParam::clear_extra_params() {
  extra_params_.Clear();
}
inline ::demo::KeyValuePair* SearchParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:demo.SearchParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
SearchParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:demo.SearchParam.extra_params)
  return &extra_params_;
}
inline const ::demo::KeyValuePair& SearchParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:demo.SearchParam.extra_params)
  return extra_params_.Get(index);
}
inline ::demo::KeyValuePair* SearchParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:demo.SearchParam.extra_params)
  return extra_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
SearchParam::extra_params() const {
  // @@protoc_insertion_point(field_list:demo.SearchParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// SearchInFilesParam

// repeated string file_id_array = 1;
inline int SearchInFilesParam::file_id_array_size() const {
  return file_id_array_.size();
}
inline void SearchInFilesParam::clear_file_id_array() {
  file_id_array_.Clear();
}
inline const std::string& SearchInFilesParam::file_id_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.SearchInFilesParam.file_id_array)
  return file_id_array_.Get(index);
}
inline std::string* SearchInFilesParam::mutable_file_id_array(int index) {
  // @@protoc_insertion_point(field_mutable:demo.SearchInFilesParam.file_id_array)
  return file_id_array_.Mutable(index);
}
inline void SearchInFilesParam::set_file_id_array(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.SearchInFilesParam.file_id_array)
  file_id_array_.Mutable(index)->assign(value);
}
inline void SearchInFilesParam::set_file_id_array(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.SearchInFilesParam.file_id_array)
  file_id_array_.Mutable(index)->assign(std::move(value));
}
inline void SearchInFilesParam::set_file_id_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_id_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.SearchInFilesParam.file_id_array)
}
inline void SearchInFilesParam::set_file_id_array(int index, const char* value, size_t size) {
  file_id_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.SearchInFilesParam.file_id_array)
}
inline std::string* SearchInFilesParam::add_file_id_array() {
  // @@protoc_insertion_point(field_add_mutable:demo.SearchInFilesParam.file_id_array)
  return file_id_array_.Add();
}
inline void SearchInFilesParam::add_file_id_array(const std::string& value) {
  file_id_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.SearchInFilesParam.file_id_array)
}
inline void SearchInFilesParam::add_file_id_array(std::string&& value) {
  file_id_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.SearchInFilesParam.file_id_array)
}
inline void SearchInFilesParam::add_file_id_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_id_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.SearchInFilesParam.file_id_array)
}
inline void SearchInFilesParam::add_file_id_array(const char* value, size_t size) {
  file_id_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.SearchInFilesParam.file_id_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchInFilesParam::file_id_array() const {
  // @@protoc_insertion_point(field_list:demo.SearchInFilesParam.file_id_array)
  return file_id_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchInFilesParam::mutable_file_id_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.SearchInFilesParam.file_id_array)
  return &file_id_array_;
}

// .demo.SearchParam search_param = 2;
inline bool SearchInFilesParam::has_search_param() const {
  return this != internal_default_instance() && search_param_ != nullptr;
}
inline void SearchInFilesParam::clear_search_param() {
  if (GetArenaNoVirtual() == nullptr && search_param_ != nullptr) {
    delete search_param_;
  }
  search_param_ = nullptr;
}
inline const ::demo::SearchParam& SearchInFilesParam::search_param() const {
  const ::demo::SearchParam* p = search_param_;
  // @@protoc_insertion_point(field_get:demo.SearchInFilesParam.search_param)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::SearchParam*>(
      &::demo::_SearchParam_default_instance_);
}
inline ::demo::SearchParam* SearchInFilesParam::release_search_param() {
  // @@protoc_insertion_point(field_release:demo.SearchInFilesParam.search_param)
  
  ::demo::SearchParam* temp = search_param_;
  search_param_ = nullptr;
  return temp;
}
inline ::demo::SearchParam* SearchInFilesParam::mutable_search_param() {
  
  if (search_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::SearchParam>(GetArenaNoVirtual());
    search_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.SearchInFilesParam.search_param)
  return search_param_;
}
inline void SearchInFilesParam::set_allocated_search_param(::demo::SearchParam* search_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete search_param_;
  }
  if (search_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_param, submessage_arena);
    }
    
  } else {
    
  }
  search_param_ = search_param;
  // @@protoc_insertion_point(field_set_allocated:demo.SearchInFilesParam.search_param)
}

// -------------------------------------------------------------------

// Entity

// .demo.Status status = 1;
inline bool Entity::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& Entity::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.Entity.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* Entity::release_status() {
  // @@protoc_insertion_point(field_release:demo.Entity.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* Entity::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.Entity.status)
  return status_;
}
inline void Entity::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.Entity.status)
}

// int64 entity_id = 2;
inline void Entity::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:demo.Entity.entity_id)
  return entity_id_;
}
inline void Entity::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:demo.Entity.entity_id)
}

// repeated string field_names = 3;
inline int Entity::field_names_size() const {
  return field_names_.size();
}
inline void Entity::clear_field_names() {
  field_names_.Clear();
}
inline const std::string& Entity::field_names(int index) const {
  // @@protoc_insertion_point(field_get:demo.Entity.field_names)
  return field_names_.Get(index);
}
inline std::string* Entity::mutable_field_names(int index) {
  // @@protoc_insertion_point(field_mutable:demo.Entity.field_names)
  return field_names_.Mutable(index);
}
inline void Entity::set_field_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.Entity.field_names)
  field_names_.Mutable(index)->assign(value);
}
inline void Entity::set_field_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.Entity.field_names)
  field_names_.Mutable(index)->assign(std::move(value));
}
inline void Entity::set_field_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.Entity.field_names)
}
inline void Entity::set_field_names(int index, const char* value, size_t size) {
  field_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.Entity.field_names)
}
inline std::string* Entity::add_field_names() {
  // @@protoc_insertion_point(field_add_mutable:demo.Entity.field_names)
  return field_names_.Add();
}
inline void Entity::add_field_names(const std::string& value) {
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.Entity.field_names)
}
inline void Entity::add_field_names(std::string&& value) {
  field_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.Entity.field_names)
}
inline void Entity::add_field_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.Entity.field_names)
}
inline void Entity::add_field_names(const char* value, size_t size) {
  field_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.Entity.field_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Entity::field_names() const {
  // @@protoc_insertion_point(field_list:demo.Entity.field_names)
  return field_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Entity::mutable_field_names() {
  // @@protoc_insertion_point(field_mutable_list:demo.Entity.field_names)
  return &field_names_;
}

// repeated string vaules = 4;
inline int Entity::vaules_size() const {
  return vaules_.size();
}
inline void Entity::clear_vaules() {
  vaules_.Clear();
}
inline const std::string& Entity::vaules(int index) const {
  // @@protoc_insertion_point(field_get:demo.Entity.vaules)
  return vaules_.Get(index);
}
inline std::string* Entity::mutable_vaules(int index) {
  // @@protoc_insertion_point(field_mutable:demo.Entity.vaules)
  return vaules_.Mutable(index);
}
inline void Entity::set_vaules(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.Entity.vaules)
  vaules_.Mutable(index)->assign(value);
}
inline void Entity::set_vaules(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.Entity.vaules)
  vaules_.Mutable(index)->assign(std::move(value));
}
inline void Entity::set_vaules(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vaules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.Entity.vaules)
}
inline void Entity::set_vaules(int index, const char* value, size_t size) {
  vaules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.Entity.vaules)
}
inline std::string* Entity::add_vaules() {
  // @@protoc_insertion_point(field_add_mutable:demo.Entity.vaules)
  return vaules_.Add();
}
inline void Entity::add_vaules(const std::string& value) {
  vaules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.Entity.vaules)
}
inline void Entity::add_vaules(std::string&& value) {
  vaules_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.Entity.vaules)
}
inline void Entity::add_vaules(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vaules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.Entity.vaules)
}
inline void Entity::add_vaules(const char* value, size_t size) {
  vaules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.Entity.vaules)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Entity::vaules() const {
  // @@protoc_insertion_point(field_list:demo.Entity.vaules)
  return vaules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Entity::mutable_vaules() {
  // @@protoc_insertion_point(field_mutable_list:demo.Entity.vaules)
  return &vaules_;
}

// -------------------------------------------------------------------

// QueryResult

// .demo.Status status = 1;
inline bool QueryResult::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& QueryResult::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.QueryResult.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* QueryResult::release_status() {
  // @@protoc_insertion_point(field_release:demo.QueryResult.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* QueryResult::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.QueryResult.status)
  return status_;
}
inline void QueryResult::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.QueryResult.status)
}

// repeated .demo.Entity entities = 2;
inline int QueryResult::entities_size() const {
  return entities_.size();
}
inline void QueryResult::clear_entities() {
  entities_.Clear();
}
inline ::demo::Entity* QueryResult::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:demo.QueryResult.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >*
QueryResult::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:demo.QueryResult.entities)
  return &entities_;
}
inline const ::demo::Entity& QueryResult::entities(int index) const {
  // @@protoc_insertion_point(field_get:demo.QueryResult.entities)
  return entities_.Get(index);
}
inline ::demo::Entity* QueryResult::add_entities() {
  // @@protoc_insertion_point(field_add:demo.QueryResult.entities)
  return entities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >&
QueryResult::entities() const {
  // @@protoc_insertion_point(field_list:demo.QueryResult.entities)
  return entities_;
}

// int64 row_num = 3;
inline void QueryResult::clear_row_num() {
  row_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResult::row_num() const {
  // @@protoc_insertion_point(field_get:demo.QueryResult.row_num)
  return row_num_;
}
inline void QueryResult::set_row_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  row_num_ = value;
  // @@protoc_insertion_point(field_set:demo.QueryResult.row_num)
}

// repeated float score = 4;
inline int QueryResult::score_size() const {
  return score_.size();
}
inline void QueryResult::clear_score() {
  score_.Clear();
}
inline float QueryResult::score(int index) const {
  // @@protoc_insertion_point(field_get:demo.QueryResult.score)
  return score_.Get(index);
}
inline void QueryResult::set_score(int index, float value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.QueryResult.score)
}
inline void QueryResult::add_score(float value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:demo.QueryResult.score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResult::score() const {
  // @@protoc_insertion_point(field_list:demo.QueryResult.score)
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResult::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:demo.QueryResult.score)
  return &score_;
}

// repeated float distance = 5;
inline int QueryResult::distance_size() const {
  return distance_.size();
}
inline void QueryResult::clear_distance() {
  distance_.Clear();
}
inline float QueryResult::distance(int index) const {
  // @@protoc_insertion_point(field_get:demo.QueryResult.distance)
  return distance_.Get(index);
}
inline void QueryResult::set_distance(int index, float value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.QueryResult.distance)
}
inline void QueryResult::add_distance(float value) {
  distance_.Add(value);
  // @@protoc_insertion_point(field_add:demo.QueryResult.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResult::distance() const {
  // @@protoc_insertion_point(field_list:demo.QueryResult.distance)
  return distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResult::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:demo.QueryResult.distance)
  return &distance_;
}

// -------------------------------------------------------------------

// InsertParam

// string collection_name = 1;
inline void InsertParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InsertParam::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.InsertParam.collection_name)
  return collection_name_.GetNoArena();
}
inline void InsertParam::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.InsertParam.collection_name)
}
inline void InsertParam::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.InsertParam.collection_name)
}
inline void InsertParam::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.InsertParam.collection_name)
}
inline void InsertParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.InsertParam.collection_name)
}
inline std::string* InsertParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.InsertParam.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsertParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.InsertParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsertParam::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.InsertParam.collection_name)
}

// string partition_tag = 2;
inline void InsertParam::clear_partition_tag() {
  partition_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InsertParam::partition_tag() const {
  // @@protoc_insertion_point(field_get:demo.InsertParam.partition_tag)
  return partition_tag_.GetNoArena();
}
inline void InsertParam::set_partition_tag(const std::string& value) {
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.InsertParam.partition_tag)
}
inline void InsertParam::set_partition_tag(std::string&& value) {
  
  partition_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.InsertParam.partition_tag)
}
inline void InsertParam::set_partition_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.InsertParam.partition_tag)
}
inline void InsertParam::set_partition_tag(const char* value, size_t size) {
  
  partition_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.InsertParam.partition_tag)
}
inline std::string* InsertParam::mutable_partition_tag() {
  
  // @@protoc_insertion_point(field_mutable:demo.InsertParam.partition_tag)
  return partition_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsertParam::release_partition_tag() {
  // @@protoc_insertion_point(field_release:demo.InsertParam.partition_tag)
  
  return partition_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsertParam::set_allocated_partition_tag(std::string* partition_tag) {
  if (partition_tag != nullptr) {
    
  } else {
    
  }
  partition_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_tag);
  // @@protoc_insertion_point(field_set_allocated:demo.InsertParam.partition_tag)
}

// repeated .demo.Entity entities = 3;
inline int InsertParam::entities_size() const {
  return entities_.size();
}
inline void InsertParam::clear_entities() {
  entities_.Clear();
}
inline ::demo::Entity* InsertParam::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:demo.InsertParam.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >*
InsertParam::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:demo.InsertParam.entities)
  return &entities_;
}
inline const ::demo::Entity& InsertParam::entities(int index) const {
  // @@protoc_insertion_point(field_get:demo.InsertParam.entities)
  return entities_.Get(index);
}
inline ::demo::Entity* InsertParam::add_entities() {
  // @@protoc_insertion_point(field_add:demo.InsertParam.entities)
  return entities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::Entity >&
InsertParam::entities() const {
  // @@protoc_insertion_point(field_list:demo.InsertParam.entities)
  return entities_;
}

// repeated int64 entity_id_array = 4;
inline int InsertParam::entity_id_array_size() const {
  return entity_id_array_.size();
}
inline void InsertParam::clear_entity_id_array() {
  entity_id_array_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InsertParam::entity_id_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.InsertParam.entity_id_array)
  return entity_id_array_.Get(index);
}
inline void InsertParam::set_entity_id_array(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  entity_id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.InsertParam.entity_id_array)
}
inline void InsertParam::add_entity_id_array(::PROTOBUF_NAMESPACE_ID::int64 value) {
  entity_id_array_.Add(value);
  // @@protoc_insertion_point(field_add:demo.InsertParam.entity_id_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
InsertParam::entity_id_array() const {
  // @@protoc_insertion_point(field_list:demo.InsertParam.entity_id_array)
  return entity_id_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
InsertParam::mutable_entity_id_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.InsertParam.entity_id_array)
  return &entity_id_array_;
}

// repeated .demo.KeyValuePair extra_params = 5;
inline int InsertParam::extra_params_size() const {
  return extra_params_.size();
}
inline void InsertParam::clear_extra_params() {
  extra_params_.Clear();
}
inline ::demo::KeyValuePair* InsertParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:demo.InsertParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
InsertParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:demo.InsertParam.extra_params)
  return &extra_params_;
}
inline const ::demo::KeyValuePair& InsertParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:demo.InsertParam.extra_params)
  return extra_params_.Get(index);
}
inline ::demo::KeyValuePair* InsertParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:demo.InsertParam.extra_params)
  return extra_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
InsertParam::extra_params() const {
  // @@protoc_insertion_point(field_list:demo.InsertParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// EntityIdentity

// string collection_name = 1;
inline void EntityIdentity::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EntityIdentity::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.EntityIdentity.collection_name)
  return collection_name_.GetNoArena();
}
inline void EntityIdentity::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.EntityIdentity.collection_name)
}
inline void EntityIdentity::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.EntityIdentity.collection_name)
}
inline void EntityIdentity::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.EntityIdentity.collection_name)
}
inline void EntityIdentity::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.EntityIdentity.collection_name)
}
inline std::string* EntityIdentity::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.EntityIdentity.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityIdentity::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.EntityIdentity.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityIdentity::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.EntityIdentity.collection_name)
}

// int64 id = 2;
inline void EntityIdentity::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EntityIdentity::id() const {
  // @@protoc_insertion_point(field_get:demo.EntityIdentity.id)
  return id_;
}
inline void EntityIdentity::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:demo.EntityIdentity.id)
}

// -------------------------------------------------------------------

// EntityIDs

// .demo.Status status = 1;
inline bool EntityIDs::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& EntityIDs::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.EntityIDs.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* EntityIDs::release_status() {
  // @@protoc_insertion_point(field_release:demo.EntityIDs.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* EntityIDs::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.EntityIDs.status)
  return status_;
}
inline void EntityIDs::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.EntityIDs.status)
}

// repeated int64 entity_id_array = 2;
inline int EntityIDs::entity_id_array_size() const {
  return entity_id_array_.size();
}
inline void EntityIDs::clear_entity_id_array() {
  entity_id_array_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EntityIDs::entity_id_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.EntityIDs.entity_id_array)
  return entity_id_array_.Get(index);
}
inline void EntityIDs::set_entity_id_array(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  entity_id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.EntityIDs.entity_id_array)
}
inline void EntityIDs::add_entity_id_array(::PROTOBUF_NAMESPACE_ID::int64 value) {
  entity_id_array_.Add(value);
  // @@protoc_insertion_point(field_add:demo.EntityIDs.entity_id_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
EntityIDs::entity_id_array() const {
  // @@protoc_insertion_point(field_list:demo.EntityIDs.entity_id_array)
  return entity_id_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
EntityIDs::mutable_entity_id_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.EntityIDs.entity_id_array)
  return &entity_id_array_;
}

// -------------------------------------------------------------------

// GetEntityIDsParam

// string collection_name = 1;
inline void GetEntityIDsParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEntityIDsParam::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.GetEntityIDsParam.collection_name)
  return collection_name_.GetNoArena();
}
inline void GetEntityIDsParam::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.GetEntityIDsParam.collection_name)
}
inline void GetEntityIDsParam::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.GetEntityIDsParam.collection_name)
}
inline void GetEntityIDsParam::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.GetEntityIDsParam.collection_name)
}
inline void GetEntityIDsParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.GetEntityIDsParam.collection_name)
}
inline std::string* GetEntityIDsParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.GetEntityIDsParam.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEntityIDsParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.GetEntityIDsParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEntityIDsParam::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.GetEntityIDsParam.collection_name)
}

// string segment_name = 2;
inline void GetEntityIDsParam::clear_segment_name() {
  segment_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEntityIDsParam::segment_name() const {
  // @@protoc_insertion_point(field_get:demo.GetEntityIDsParam.segment_name)
  return segment_name_.GetNoArena();
}
inline void GetEntityIDsParam::set_segment_name(const std::string& value) {
  
  segment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.GetEntityIDsParam.segment_name)
}
inline void GetEntityIDsParam::set_segment_name(std::string&& value) {
  
  segment_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.GetEntityIDsParam.segment_name)
}
inline void GetEntityIDsParam::set_segment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  segment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.GetEntityIDsParam.segment_name)
}
inline void GetEntityIDsParam::set_segment_name(const char* value, size_t size) {
  
  segment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.GetEntityIDsParam.segment_name)
}
inline std::string* GetEntityIDsParam::mutable_segment_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.GetEntityIDsParam.segment_name)
  return segment_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEntityIDsParam::release_segment_name() {
  // @@protoc_insertion_point(field_release:demo.GetEntityIDsParam.segment_name)
  
  return segment_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEntityIDsParam::set_allocated_segment_name(std::string* segment_name) {
  if (segment_name != nullptr) {
    
  } else {
    
  }
  segment_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), segment_name);
  // @@protoc_insertion_point(field_set_allocated:demo.GetEntityIDsParam.segment_name)
}

// -------------------------------------------------------------------

// DeleteByIDParam

// string collection_name = 1;
inline void DeleteByIDParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteByIDParam::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.DeleteByIDParam.collection_name)
  return collection_name_.GetNoArena();
}
inline void DeleteByIDParam::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.DeleteByIDParam.collection_name)
}
inline void DeleteByIDParam::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.DeleteByIDParam.collection_name)
}
inline void DeleteByIDParam::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.DeleteByIDParam.collection_name)
}
inline void DeleteByIDParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.DeleteByIDParam.collection_name)
}
inline std::string* DeleteByIDParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.DeleteByIDParam.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteByIDParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.DeleteByIDParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteByIDParam::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.DeleteByIDParam.collection_name)
}

// repeated int64 id_array = 2;
inline int DeleteByIDParam::id_array_size() const {
  return id_array_.size();
}
inline void DeleteByIDParam::clear_id_array() {
  id_array_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteByIDParam::id_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.DeleteByIDParam.id_array)
  return id_array_.Get(index);
}
inline void DeleteByIDParam::set_id_array(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  id_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:demo.DeleteByIDParam.id_array)
}
inline void DeleteByIDParam::add_id_array(::PROTOBUF_NAMESPACE_ID::int64 value) {
  id_array_.Add(value);
  // @@protoc_insertion_point(field_add:demo.DeleteByIDParam.id_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DeleteByIDParam::id_array() const {
  // @@protoc_insertion_point(field_list:demo.DeleteByIDParam.id_array)
  return id_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DeleteByIDParam::mutable_id_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.DeleteByIDParam.id_array)
  return &id_array_;
}

// -------------------------------------------------------------------

// PartitionParam

// string collection_name = 1;
inline void PartitionParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PartitionParam::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.PartitionParam.collection_name)
  return collection_name_.GetNoArena();
}
inline void PartitionParam::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.PartitionParam.collection_name)
}
inline void PartitionParam::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.PartitionParam.collection_name)
}
inline void PartitionParam::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.PartitionParam.collection_name)
}
inline void PartitionParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.PartitionParam.collection_name)
}
inline std::string* PartitionParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.PartitionParam.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PartitionParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.PartitionParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionParam::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.PartitionParam.collection_name)
}

// string tag = 2;
inline void PartitionParam::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PartitionParam::tag() const {
  // @@protoc_insertion_point(field_get:demo.PartitionParam.tag)
  return tag_.GetNoArena();
}
inline void PartitionParam::set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.PartitionParam.tag)
}
inline void PartitionParam::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.PartitionParam.tag)
}
inline void PartitionParam::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.PartitionParam.tag)
}
inline void PartitionParam::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.PartitionParam.tag)
}
inline std::string* PartitionParam::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:demo.PartitionParam.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PartitionParam::release_tag() {
  // @@protoc_insertion_point(field_release:demo.PartitionParam.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionParam::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:demo.PartitionParam.tag)
}

// -------------------------------------------------------------------

// PartitionList

// .demo.Status status = 1;
inline bool PartitionList::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& PartitionList::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.PartitionList.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* PartitionList::release_status() {
  // @@protoc_insertion_point(field_release:demo.PartitionList.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* PartitionList::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.PartitionList.status)
  return status_;
}
inline void PartitionList::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.PartitionList.status)
}

// repeated string partition_tag_array = 2;
inline int PartitionList::partition_tag_array_size() const {
  return partition_tag_array_.size();
}
inline void PartitionList::clear_partition_tag_array() {
  partition_tag_array_.Clear();
}
inline const std::string& PartitionList::partition_tag_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.PartitionList.partition_tag_array)
  return partition_tag_array_.Get(index);
}
inline std::string* PartitionList::mutable_partition_tag_array(int index) {
  // @@protoc_insertion_point(field_mutable:demo.PartitionList.partition_tag_array)
  return partition_tag_array_.Mutable(index);
}
inline void PartitionList::set_partition_tag_array(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.PartitionList.partition_tag_array)
  partition_tag_array_.Mutable(index)->assign(value);
}
inline void PartitionList::set_partition_tag_array(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.PartitionList.partition_tag_array)
  partition_tag_array_.Mutable(index)->assign(std::move(value));
}
inline void PartitionList::set_partition_tag_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tag_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.PartitionList.partition_tag_array)
}
inline void PartitionList::set_partition_tag_array(int index, const char* value, size_t size) {
  partition_tag_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.PartitionList.partition_tag_array)
}
inline std::string* PartitionList::add_partition_tag_array() {
  // @@protoc_insertion_point(field_add_mutable:demo.PartitionList.partition_tag_array)
  return partition_tag_array_.Add();
}
inline void PartitionList::add_partition_tag_array(const std::string& value) {
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.PartitionList.partition_tag_array)
}
inline void PartitionList::add_partition_tag_array(std::string&& value) {
  partition_tag_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.PartitionList.partition_tag_array)
}
inline void PartitionList::add_partition_tag_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_tag_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.PartitionList.partition_tag_array)
}
inline void PartitionList::add_partition_tag_array(const char* value, size_t size) {
  partition_tag_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.PartitionList.partition_tag_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PartitionList::partition_tag_array() const {
  // @@protoc_insertion_point(field_list:demo.PartitionList.partition_tag_array)
  return partition_tag_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PartitionList::mutable_partition_tag_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.PartitionList.partition_tag_array)
  return &partition_tag_array_;
}

// -------------------------------------------------------------------

// BoolReply

// .demo.Status status = 1;
inline bool BoolReply::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& BoolReply::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.BoolReply.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* BoolReply::release_status() {
  // @@protoc_insertion_point(field_release:demo.BoolReply.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* BoolReply::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.BoolReply.status)
  return status_;
}
inline void BoolReply::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.BoolReply.status)
}

// bool bool_reply = 2;
inline void BoolReply::clear_bool_reply() {
  bool_reply_ = false;
}
inline bool BoolReply::bool_reply() const {
  // @@protoc_insertion_point(field_get:demo.BoolReply.bool_reply)
  return bool_reply_;
}
inline void BoolReply::set_bool_reply(bool value) {
  
  bool_reply_ = value;
  // @@protoc_insertion_point(field_set:demo.BoolReply.bool_reply)
}

// -------------------------------------------------------------------

// CollectionRowCount

// .demo.Status status = 1;
inline bool CollectionRowCount::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& CollectionRowCount::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.CollectionRowCount.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* CollectionRowCount::release_status() {
  // @@protoc_insertion_point(field_release:demo.CollectionRowCount.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* CollectionRowCount::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.CollectionRowCount.status)
  return status_;
}
inline void CollectionRowCount::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.CollectionRowCount.status)
}

// int64 collection_row_count = 2;
inline void CollectionRowCount::clear_collection_row_count() {
  collection_row_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionRowCount::collection_row_count() const {
  // @@protoc_insertion_point(field_get:demo.CollectionRowCount.collection_row_count)
  return collection_row_count_;
}
inline void CollectionRowCount::set_collection_row_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  collection_row_count_ = value;
  // @@protoc_insertion_point(field_set:demo.CollectionRowCount.collection_row_count)
}

// -------------------------------------------------------------------

// SegmentStat

// string segment_name = 1;
inline void SegmentStat::clear_segment_name() {
  segment_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SegmentStat::segment_name() const {
  // @@protoc_insertion_point(field_get:demo.SegmentStat.segment_name)
  return segment_name_.GetNoArena();
}
inline void SegmentStat::set_segment_name(const std::string& value) {
  
  segment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.SegmentStat.segment_name)
}
inline void SegmentStat::set_segment_name(std::string&& value) {
  
  segment_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.SegmentStat.segment_name)
}
inline void SegmentStat::set_segment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  segment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.SegmentStat.segment_name)
}
inline void SegmentStat::set_segment_name(const char* value, size_t size) {
  
  segment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.SegmentStat.segment_name)
}
inline std::string* SegmentStat::mutable_segment_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.SegmentStat.segment_name)
  return segment_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentStat::release_segment_name() {
  // @@protoc_insertion_point(field_release:demo.SegmentStat.segment_name)
  
  return segment_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentStat::set_allocated_segment_name(std::string* segment_name) {
  if (segment_name != nullptr) {
    
  } else {
    
  }
  segment_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), segment_name);
  // @@protoc_insertion_point(field_set_allocated:demo.SegmentStat.segment_name)
}

// int64 row_count = 2;
inline void SegmentStat::clear_row_count() {
  row_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentStat::row_count() const {
  // @@protoc_insertion_point(field_get:demo.SegmentStat.row_count)
  return row_count_;
}
inline void SegmentStat::set_row_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  row_count_ = value;
  // @@protoc_insertion_point(field_set:demo.SegmentStat.row_count)
}

// string index_name = 3;
inline void SegmentStat::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SegmentStat::index_name() const {
  // @@protoc_insertion_point(field_get:demo.SegmentStat.index_name)
  return index_name_.GetNoArena();
}
inline void SegmentStat::set_index_name(const std::string& value) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.SegmentStat.index_name)
}
inline void SegmentStat::set_index_name(std::string&& value) {
  
  index_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.SegmentStat.index_name)
}
inline void SegmentStat::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.SegmentStat.index_name)
}
inline void SegmentStat::set_index_name(const char* value, size_t size) {
  
  index_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.SegmentStat.index_name)
}
inline std::string* SegmentStat::mutable_index_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.SegmentStat.index_name)
  return index_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentStat::release_index_name() {
  // @@protoc_insertion_point(field_release:demo.SegmentStat.index_name)
  
  return index_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentStat::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:demo.SegmentStat.index_name)
}

// int64 data_size = 4;
inline void SegmentStat::clear_data_size() {
  data_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentStat::data_size() const {
  // @@protoc_insertion_point(field_get:demo.SegmentStat.data_size)
  return data_size_;
}
inline void SegmentStat::set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:demo.SegmentStat.data_size)
}

// -------------------------------------------------------------------

// PartitionStat

// string tag = 1;
inline void PartitionStat::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PartitionStat::tag() const {
  // @@protoc_insertion_point(field_get:demo.PartitionStat.tag)
  return tag_.GetNoArena();
}
inline void PartitionStat::set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.PartitionStat.tag)
}
inline void PartitionStat::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.PartitionStat.tag)
}
inline void PartitionStat::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.PartitionStat.tag)
}
inline void PartitionStat::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.PartitionStat.tag)
}
inline std::string* PartitionStat::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:demo.PartitionStat.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PartitionStat::release_tag() {
  // @@protoc_insertion_point(field_release:demo.PartitionStat.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionStat::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:demo.PartitionStat.tag)
}

// int64 total_row_count = 2;
inline void PartitionStat::clear_total_row_count() {
  total_row_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PartitionStat::total_row_count() const {
  // @@protoc_insertion_point(field_get:demo.PartitionStat.total_row_count)
  return total_row_count_;
}
inline void PartitionStat::set_total_row_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_row_count_ = value;
  // @@protoc_insertion_point(field_set:demo.PartitionStat.total_row_count)
}

// repeated .demo.SegmentStat segments_stat = 3;
inline int PartitionStat::segments_stat_size() const {
  return segments_stat_.size();
}
inline void PartitionStat::clear_segments_stat() {
  segments_stat_.Clear();
}
inline ::demo::SegmentStat* PartitionStat::mutable_segments_stat(int index) {
  // @@protoc_insertion_point(field_mutable:demo.PartitionStat.segments_stat)
  return segments_stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::SegmentStat >*
PartitionStat::mutable_segments_stat() {
  // @@protoc_insertion_point(field_mutable_list:demo.PartitionStat.segments_stat)
  return &segments_stat_;
}
inline const ::demo::SegmentStat& PartitionStat::segments_stat(int index) const {
  // @@protoc_insertion_point(field_get:demo.PartitionStat.segments_stat)
  return segments_stat_.Get(index);
}
inline ::demo::SegmentStat* PartitionStat::add_segments_stat() {
  // @@protoc_insertion_point(field_add:demo.PartitionStat.segments_stat)
  return segments_stat_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::SegmentStat >&
PartitionStat::segments_stat() const {
  // @@protoc_insertion_point(field_list:demo.PartitionStat.segments_stat)
  return segments_stat_;
}

// -------------------------------------------------------------------

// CollectionInfo

// .demo.Status status = 1;
inline bool CollectionInfo::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& CollectionInfo::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.CollectionInfo.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* CollectionInfo::release_status() {
  // @@protoc_insertion_point(field_release:demo.CollectionInfo.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* CollectionInfo::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.CollectionInfo.status)
  return status_;
}
inline void CollectionInfo::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.CollectionInfo.status)
}

// int64 total_row_count = 2;
inline void CollectionInfo::clear_total_row_count() {
  total_row_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionInfo::total_row_count() const {
  // @@protoc_insertion_point(field_get:demo.CollectionInfo.total_row_count)
  return total_row_count_;
}
inline void CollectionInfo::set_total_row_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_row_count_ = value;
  // @@protoc_insertion_point(field_set:demo.CollectionInfo.total_row_count)
}

// repeated .demo.PartitionStat partitions_stat = 3;
inline int CollectionInfo::partitions_stat_size() const {
  return partitions_stat_.size();
}
inline void CollectionInfo::clear_partitions_stat() {
  partitions_stat_.Clear();
}
inline ::demo::PartitionStat* CollectionInfo::mutable_partitions_stat(int index) {
  // @@protoc_insertion_point(field_mutable:demo.CollectionInfo.partitions_stat)
  return partitions_stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::PartitionStat >*
CollectionInfo::mutable_partitions_stat() {
  // @@protoc_insertion_point(field_mutable_list:demo.CollectionInfo.partitions_stat)
  return &partitions_stat_;
}
inline const ::demo::PartitionStat& CollectionInfo::partitions_stat(int index) const {
  // @@protoc_insertion_point(field_get:demo.CollectionInfo.partitions_stat)
  return partitions_stat_.Get(index);
}
inline ::demo::PartitionStat* CollectionInfo::add_partitions_stat() {
  // @@protoc_insertion_point(field_add:demo.CollectionInfo.partitions_stat)
  return partitions_stat_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::PartitionStat >&
CollectionInfo::partitions_stat() const {
  // @@protoc_insertion_point(field_list:demo.CollectionInfo.partitions_stat)
  return partitions_stat_;
}

// -------------------------------------------------------------------

// IndexParam

// .demo.Status status = 1;
inline bool IndexParam::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& IndexParam::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.IndexParam.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* IndexParam::release_status() {
  // @@protoc_insertion_point(field_release:demo.IndexParam.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* IndexParam::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.IndexParam.status)
  return status_;
}
inline void IndexParam::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.IndexParam.status)
}

// string collection_name = 2;
inline void IndexParam::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexParam::collection_name() const {
  // @@protoc_insertion_point(field_get:demo.IndexParam.collection_name)
  return collection_name_.GetNoArena();
}
inline void IndexParam::set_collection_name(const std::string& value) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.IndexParam.collection_name)
}
inline void IndexParam::set_collection_name(std::string&& value) {
  
  collection_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.IndexParam.collection_name)
}
inline void IndexParam::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.IndexParam.collection_name)
}
inline void IndexParam::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.IndexParam.collection_name)
}
inline std::string* IndexParam::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:demo.IndexParam.collection_name)
  return collection_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexParam::release_collection_name() {
  // @@protoc_insertion_point(field_release:demo.IndexParam.collection_name)
  
  return collection_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexParam::set_allocated_collection_name(std::string* collection_name) {
  if (collection_name != nullptr) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:demo.IndexParam.collection_name)
}

// int32 index_type = 3;
inline void IndexParam::clear_index_type() {
  index_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexParam::index_type() const {
  // @@protoc_insertion_point(field_get:demo.IndexParam.index_type)
  return index_type_;
}
inline void IndexParam::set_index_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_type_ = value;
  // @@protoc_insertion_point(field_set:demo.IndexParam.index_type)
}

// repeated .demo.KeyValuePair extra_params = 4;
inline int IndexParam::extra_params_size() const {
  return extra_params_.size();
}
inline void IndexParam::clear_extra_params() {
  extra_params_.Clear();
}
inline ::demo::KeyValuePair* IndexParam::mutable_extra_params(int index) {
  // @@protoc_insertion_point(field_mutable:demo.IndexParam.extra_params)
  return extra_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >*
IndexParam::mutable_extra_params() {
  // @@protoc_insertion_point(field_mutable_list:demo.IndexParam.extra_params)
  return &extra_params_;
}
inline const ::demo::KeyValuePair& IndexParam::extra_params(int index) const {
  // @@protoc_insertion_point(field_get:demo.IndexParam.extra_params)
  return extra_params_.Get(index);
}
inline ::demo::KeyValuePair* IndexParam::add_extra_params() {
  // @@protoc_insertion_point(field_add:demo.IndexParam.extra_params)
  return extra_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::KeyValuePair >&
IndexParam::extra_params() const {
  // @@protoc_insertion_point(field_list:demo.IndexParam.extra_params)
  return extra_params_;
}

// -------------------------------------------------------------------

// Command

// string cmd = 1;
inline void Command::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::cmd() const {
  // @@protoc_insertion_point(field_get:demo.Command.cmd)
  return cmd_.GetNoArena();
}
inline void Command::set_cmd(const std::string& value) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.Command.cmd)
}
inline void Command::set_cmd(std::string&& value) {
  
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Command.cmd)
}
inline void Command::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Command.cmd)
}
inline void Command::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Command.cmd)
}
inline std::string* Command::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:demo.Command.cmd)
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_cmd() {
  // @@protoc_insertion_point(field_release:demo.Command.cmd)
  
  return cmd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:demo.Command.cmd)
}

// -------------------------------------------------------------------

// StringReply

// .demo.Status status = 1;
inline bool StringReply::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::demo::Status& StringReply::status() const {
  const ::demo::Status* p = status_;
  // @@protoc_insertion_point(field_get:demo.StringReply.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::demo::Status*>(
      &::demo::_Status_default_instance_);
}
inline ::demo::Status* StringReply::release_status() {
  // @@protoc_insertion_point(field_release:demo.StringReply.status)
  
  ::demo::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::demo::Status* StringReply::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:demo.StringReply.status)
  return status_;
}
inline void StringReply::set_allocated_status(::demo::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:demo.StringReply.status)
}

// string string_reply = 2;
inline void StringReply::clear_string_reply() {
  string_reply_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StringReply::string_reply() const {
  // @@protoc_insertion_point(field_get:demo.StringReply.string_reply)
  return string_reply_.GetNoArena();
}
inline void StringReply::set_string_reply(const std::string& value) {
  
  string_reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:demo.StringReply.string_reply)
}
inline void StringReply::set_string_reply(std::string&& value) {
  
  string_reply_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.StringReply.string_reply)
}
inline void StringReply::set_string_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.StringReply.string_reply)
}
inline void StringReply::set_string_reply(const char* value, size_t size) {
  
  string_reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.StringReply.string_reply)
}
inline std::string* StringReply::mutable_string_reply() {
  
  // @@protoc_insertion_point(field_mutable:demo.StringReply.string_reply)
  return string_reply_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringReply::release_string_reply() {
  // @@protoc_insertion_point(field_release:demo.StringReply.string_reply)
  
  return string_reply_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringReply::set_allocated_string_reply(std::string* string_reply) {
  if (string_reply != nullptr) {
    
  } else {
    
  }
  string_reply_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_reply);
  // @@protoc_insertion_point(field_set_allocated:demo.StringReply.string_reply)
}

// -------------------------------------------------------------------

// FlushParam

// repeated string collection_name_array = 1;
inline int FlushParam::collection_name_array_size() const {
  return collection_name_array_.size();
}
inline void FlushParam::clear_collection_name_array() {
  collection_name_array_.Clear();
}
inline const std::string& FlushParam::collection_name_array(int index) const {
  // @@protoc_insertion_point(field_get:demo.FlushParam.collection_name_array)
  return collection_name_array_.Get(index);
}
inline std::string* FlushParam::mutable_collection_name_array(int index) {
  // @@protoc_insertion_point(field_mutable:demo.FlushParam.collection_name_array)
  return collection_name_array_.Mutable(index);
}
inline void FlushParam::set_collection_name_array(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:demo.FlushParam.collection_name_array)
  collection_name_array_.Mutable(index)->assign(value);
}
inline void FlushParam::set_collection_name_array(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:demo.FlushParam.collection_name_array)
  collection_name_array_.Mutable(index)->assign(std::move(value));
}
inline void FlushParam::set_collection_name_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_name_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.FlushParam.collection_name_array)
}
inline void FlushParam::set_collection_name_array(int index, const char* value, size_t size) {
  collection_name_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.FlushParam.collection_name_array)
}
inline std::string* FlushParam::add_collection_name_array() {
  // @@protoc_insertion_point(field_add_mutable:demo.FlushParam.collection_name_array)
  return collection_name_array_.Add();
}
inline void FlushParam::add_collection_name_array(const std::string& value) {
  collection_name_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.FlushParam.collection_name_array)
}
inline void FlushParam::add_collection_name_array(std::string&& value) {
  collection_name_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.FlushParam.collection_name_array)
}
inline void FlushParam::add_collection_name_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collection_name_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.FlushParam.collection_name_array)
}
inline void FlushParam::add_collection_name_array(const char* value, size_t size) {
  collection_name_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.FlushParam.collection_name_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FlushParam::collection_name_array() const {
  // @@protoc_insertion_point(field_list:demo.FlushParam.collection_name_array)
  return collection_name_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FlushParam::mutable_collection_name_array() {
  // @@protoc_insertion_point(field_mutable_list:demo.FlushParam.collection_name_array)
  return &collection_name_array_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::demo::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::DataType>() {
  return ::demo::DataType_descriptor();
}
template <> struct is_proto_enum< ::demo::CompareOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::CompareOperator>() {
  return ::demo::CompareOperator_descriptor();
}
template <> struct is_proto_enum< ::demo::Occur> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::Occur>() {
  return ::demo::Occur_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_milvus_2eproto
