// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: milvus.proto

#include "milvus.pb.h"
#include "milvus.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace demo {

static const char* DemoService_method_names[] = {
  "/demo.DemoService/CreateCollection",
  "/demo.DemoService/HasCollection",
  "/demo.DemoService/DropCollection",
  "/demo.DemoService/DescribeCollection",
  "/demo.DemoService/CountCollection",
  "/demo.DemoService/ShowCollections",
  "/demo.DemoService/ShowCollectionInfo",
  "/demo.DemoService/PreloadCollection",
  "/demo.DemoService/CreateIndex",
  "/demo.DemoService/DescribeIndex",
  "/demo.DemoService/DropIndex",
  "/demo.DemoService/Insert",
  "/demo.DemoService/Search",
  "/demo.DemoService/SearchInFiles",
  "/demo.DemoService/GetEntityByID",
  "/demo.DemoService/GetEntityIDs",
  "/demo.DemoService/DeleteByID",
  "/demo.DemoService/CreatePartition",
  "/demo.DemoService/ShowPartitions",
  "/demo.DemoService/DropPartition",
  "/demo.DemoService/Cmd",
  "/demo.DemoService/Flush",
  "/demo.DemoService/Compact",
};

std::unique_ptr< DemoService::Stub> DemoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DemoService::Stub> stub(new DemoService::Stub(channel));
  return stub;
}

DemoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateCollection_(DemoService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasCollection_(DemoService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropCollection_(DemoService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeCollection_(DemoService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CountCollection_(DemoService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowCollections_(DemoService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowCollectionInfo_(DemoService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PreloadCollection_(DemoService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIndex_(DemoService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeIndex_(DemoService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIndex_(DemoService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Insert_(DemoService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(DemoService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchInFiles_(DemoService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntityByID_(DemoService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntityIDs_(DemoService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteByID_(DemoService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePartition_(DemoService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowPartitions_(DemoService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropPartition_(DemoService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cmd_(DemoService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Flush_(DemoService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Compact_(DemoService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DemoService::Stub::CreateCollection(::grpc::ClientContext* context, const ::demo::Mapping& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::demo::Mapping* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::demo::Mapping* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::Mapping& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::Mapping& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::HasCollection(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HasCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::BoolReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::HasCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::BoolReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::BoolReply>* DemoService::Stub::AsyncHasCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::BoolReply>::Create(channel_.get(), cq, rpcmethod_HasCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::BoolReply>* DemoService::Stub::PrepareAsyncHasCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::BoolReply>::Create(channel_.get(), cq, rpcmethod_HasCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::DropCollection(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DropCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DropCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::DescribeCollection(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::Mapping* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Mapping* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Mapping* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Mapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DescribeCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Mapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Mapping>* DemoService::Stub::AsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Mapping>::Create(channel_.get(), cq, rpcmethod_DescribeCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Mapping>* DemoService::Stub::PrepareAsyncDescribeCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Mapping>::Create(channel_.get(), cq, rpcmethod_DescribeCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::CountCollection(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::CollectionRowCount* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CountCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::CountCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::CollectionRowCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CountCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CountCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionRowCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CountCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CountCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::CollectionRowCount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CountCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::CountCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionRowCount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CountCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionRowCount>* DemoService::Stub::AsyncCountCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionRowCount>::Create(channel_.get(), cq, rpcmethod_CountCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionRowCount>* DemoService::Stub::PrepareAsyncCountCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionRowCount>::Create(channel_.get(), cq, rpcmethod_CountCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::ShowCollections(::grpc::ClientContext* context, const ::demo::Command& request, ::demo::MappingList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowCollections_, context, request, response);
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::demo::Command* request, ::demo::MappingList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::MappingList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::demo::Command* request, ::demo::MappingList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::MappingList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::MappingList>* DemoService::Stub::AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::MappingList>::Create(channel_.get(), cq, rpcmethod_ShowCollections_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::MappingList>* DemoService::Stub::PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::MappingList>::Create(channel_.get(), cq, rpcmethod_ShowCollections_, context, request, false);
}

::grpc::Status DemoService::Stub::ShowCollectionInfo(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::CollectionInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowCollectionInfo_, context, request, response);
}

void DemoService::Stub::experimental_async::ShowCollectionInfo(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::CollectionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollectionInfo_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowCollectionInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCollectionInfo_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowCollectionInfo(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::CollectionInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollectionInfo_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::ShowCollectionInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowCollectionInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionInfo>* DemoService::Stub::AsyncShowCollectionInfoRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionInfo>::Create(channel_.get(), cq, rpcmethod_ShowCollectionInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::CollectionInfo>* DemoService::Stub::PrepareAsyncShowCollectionInfoRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::CollectionInfo>::Create(channel_.get(), cq, rpcmethod_ShowCollectionInfo_, context, request, false);
}

::grpc::Status DemoService::Stub::PreloadCollection(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PreloadCollection_, context, request, response);
}

void DemoService::Stub::experimental_async::PreloadCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PreloadCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::PreloadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PreloadCollection_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::PreloadCollection(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PreloadCollection_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::PreloadCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PreloadCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncPreloadCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_PreloadCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncPreloadCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_PreloadCollection_, context, request, false);
}

::grpc::Status DemoService::Stub::CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParam& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateIndex_, context, request, response);
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParam* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParam* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_CreateIndex_, context, request, false);
}

::grpc::Status DemoService::Stub::DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::IndexParam* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeIndex_, context, request, response);
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::IndexParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::IndexParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::IndexParam>* DemoService::Stub::AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::IndexParam>::Create(channel_.get(), cq, rpcmethod_DescribeIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::IndexParam>* DemoService::Stub::PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::IndexParam>::Create(channel_.get(), cq, rpcmethod_DescribeIndex_, context, request, false);
}

::grpc::Status DemoService::Stub::DropIndex(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropIndex_, context, request, response);
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DropIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DropIndex_, context, request, false);
}

::grpc::Status DemoService::Stub::Insert(::grpc::ClientContext* context, const ::demo::InsertParam& request, ::demo::EntityIDs* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Insert_, context, request, response);
}

void DemoService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::demo::InsertParam* request, ::demo::EntityIDs* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::EntityIDs* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::demo::InsertParam* request, ::demo::EntityIDs* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::EntityIDs* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::EntityIDs>* DemoService::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::demo::InsertParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::EntityIDs>::Create(channel_.get(), cq, rpcmethod_Insert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::EntityIDs>* DemoService::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::demo::InsertParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::EntityIDs>::Create(channel_.get(), cq, rpcmethod_Insert_, context, request, false);
}

::grpc::Status DemoService::Stub::Search(::grpc::ClientContext* context, const ::demo::SearchParam& request, ::demo::QueryResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::demo::SearchParam* request, ::demo::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::demo::SearchParam* request, ::demo::QueryResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::QueryResult>* DemoService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::demo::SearchParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::QueryResult>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::QueryResult>* DemoService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::demo::SearchParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::QueryResult>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

::grpc::Status DemoService::Stub::SearchInFiles(::grpc::ClientContext* context, const ::demo::SearchInFilesParam& request, ::demo::QueryResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchInFiles_, context, request, response);
}

void DemoService::Stub::experimental_async::SearchInFiles(::grpc::ClientContext* context, const ::demo::SearchInFilesParam* request, ::demo::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchInFiles_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::SearchInFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchInFiles_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::SearchInFiles(::grpc::ClientContext* context, const ::demo::SearchInFilesParam* request, ::demo::QueryResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchInFiles_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::SearchInFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchInFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::QueryResult>* DemoService::Stub::AsyncSearchInFilesRaw(::grpc::ClientContext* context, const ::demo::SearchInFilesParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::QueryResult>::Create(channel_.get(), cq, rpcmethod_SearchInFiles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::QueryResult>* DemoService::Stub::PrepareAsyncSearchInFilesRaw(::grpc::ClientContext* context, const ::demo::SearchInFilesParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::QueryResult>::Create(channel_.get(), cq, rpcmethod_SearchInFiles_, context, request, false);
}

::grpc::Status DemoService::Stub::GetEntityByID(::grpc::ClientContext* context, const ::demo::EntityIdentity& request, ::demo::Entity* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEntityByID_, context, request, response);
}

void DemoService::Stub::experimental_async::GetEntityByID(::grpc::ClientContext* context, const ::demo::EntityIdentity* request, ::demo::Entity* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntityByID_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::GetEntityByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Entity* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntityByID_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::GetEntityByID(::grpc::ClientContext* context, const ::demo::EntityIdentity* request, ::demo::Entity* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntityByID_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::GetEntityByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Entity* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntityByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Entity>* DemoService::Stub::AsyncGetEntityByIDRaw(::grpc::ClientContext* context, const ::demo::EntityIdentity& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Entity>::Create(channel_.get(), cq, rpcmethod_GetEntityByID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Entity>* DemoService::Stub::PrepareAsyncGetEntityByIDRaw(::grpc::ClientContext* context, const ::demo::EntityIdentity& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Entity>::Create(channel_.get(), cq, rpcmethod_GetEntityByID_, context, request, false);
}

::grpc::Status DemoService::Stub::GetEntityIDs(::grpc::ClientContext* context, const ::demo::GetEntityIDsParam& request, ::demo::EntityIDs* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEntityIDs_, context, request, response);
}

void DemoService::Stub::experimental_async::GetEntityIDs(::grpc::ClientContext* context, const ::demo::GetEntityIDsParam* request, ::demo::EntityIDs* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntityIDs_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::GetEntityIDs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::EntityIDs* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntityIDs_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::GetEntityIDs(::grpc::ClientContext* context, const ::demo::GetEntityIDsParam* request, ::demo::EntityIDs* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntityIDs_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::GetEntityIDs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::EntityIDs* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntityIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::EntityIDs>* DemoService::Stub::AsyncGetEntityIDsRaw(::grpc::ClientContext* context, const ::demo::GetEntityIDsParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::EntityIDs>::Create(channel_.get(), cq, rpcmethod_GetEntityIDs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::EntityIDs>* DemoService::Stub::PrepareAsyncGetEntityIDsRaw(::grpc::ClientContext* context, const ::demo::GetEntityIDsParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::EntityIDs>::Create(channel_.get(), cq, rpcmethod_GetEntityIDs_, context, request, false);
}

::grpc::Status DemoService::Stub::DeleteByID(::grpc::ClientContext* context, const ::demo::DeleteByIDParam& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteByID_, context, request, response);
}

void DemoService::Stub::experimental_async::DeleteByID(::grpc::ClientContext* context, const ::demo::DeleteByIDParam* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteByID_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DeleteByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteByID_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DeleteByID(::grpc::ClientContext* context, const ::demo::DeleteByIDParam* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteByID_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DeleteByID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncDeleteByIDRaw(::grpc::ClientContext* context, const ::demo::DeleteByIDParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DeleteByID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncDeleteByIDRaw(::grpc::ClientContext* context, const ::demo::DeleteByIDParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DeleteByID_, context, request, false);
}

::grpc::Status DemoService::Stub::CreatePartition(::grpc::ClientContext* context, const ::demo::PartitionParam& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePartition_, context, request, response);
}

void DemoService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::demo::PartitionParam* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::demo::PartitionParam* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::CreatePartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatePartition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::demo::PartitionParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_CreatePartition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncCreatePartitionRaw(::grpc::ClientContext* context, const ::demo::PartitionParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_CreatePartition_, context, request, false);
}

::grpc::Status DemoService::Stub::ShowPartitions(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::PartitionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowPartitions_, context, request, response);
}

void DemoService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::PartitionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::PartitionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::PartitionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::ShowPartitions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::PartitionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShowPartitions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::PartitionList>* DemoService::Stub::AsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::PartitionList>::Create(channel_.get(), cq, rpcmethod_ShowPartitions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::PartitionList>* DemoService::Stub::PrepareAsyncShowPartitionsRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::PartitionList>::Create(channel_.get(), cq, rpcmethod_ShowPartitions_, context, request, false);
}

::grpc::Status DemoService::Stub::DropPartition(::grpc::ClientContext* context, const ::demo::PartitionParam& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropPartition_, context, request, response);
}

void DemoService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::demo::PartitionParam* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::demo::PartitionParam* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::DropPartition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DropPartition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncDropPartitionRaw(::grpc::ClientContext* context, const ::demo::PartitionParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DropPartition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncDropPartitionRaw(::grpc::ClientContext* context, const ::demo::PartitionParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_DropPartition_, context, request, false);
}

::grpc::Status DemoService::Stub::Cmd(::grpc::ClientContext* context, const ::demo::Command& request, ::demo::StringReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Cmd_, context, request, response);
}

void DemoService::Stub::experimental_async::Cmd(::grpc::ClientContext* context, const ::demo::Command* request, ::demo::StringReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Cmd_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Cmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::StringReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Cmd_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Cmd(::grpc::ClientContext* context, const ::demo::Command* request, ::demo::StringReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Cmd_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::Cmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::StringReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Cmd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::StringReply>* DemoService::Stub::AsyncCmdRaw(::grpc::ClientContext* context, const ::demo::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::StringReply>::Create(channel_.get(), cq, rpcmethod_Cmd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::StringReply>* DemoService::Stub::PrepareAsyncCmdRaw(::grpc::ClientContext* context, const ::demo::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::StringReply>::Create(channel_.get(), cq, rpcmethod_Cmd_, context, request, false);
}

::grpc::Status DemoService::Stub::Flush(::grpc::ClientContext* context, const ::demo::FlushParam& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Flush_, context, request, response);
}

void DemoService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::demo::FlushParam* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::demo::FlushParam* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncFlushRaw(::grpc::ClientContext* context, const ::demo::FlushParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::demo::FlushParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, false);
}

::grpc::Status DemoService::Stub::Compact(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::demo::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Compact_, context, request, response);
}

void DemoService::Stub::experimental_async::Compact(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Compact_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Compact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Compact_, context, request, response, std::move(f));
}

void DemoService::Stub::experimental_async::Compact(::grpc::ClientContext* context, const ::demo::CollectionName* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Compact_, context, request, response, reactor);
}

void DemoService::Stub::experimental_async::Compact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Compact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::AsyncCompactRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_Compact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Status>* DemoService::Stub::PrepareAsyncCompactRaw(::grpc::ClientContext* context, const ::demo::CollectionName& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::demo::Status>::Create(channel_.get(), cq, rpcmethod_Compact_, context, request, false);
}

DemoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::Mapping, ::demo::Status>(
          std::mem_fn(&DemoService::Service::CreateCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::BoolReply>(
          std::mem_fn(&DemoService::Service::HasCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::Status>(
          std::mem_fn(&DemoService::Service::DropCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::Mapping>(
          std::mem_fn(&DemoService::Service::DescribeCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::CollectionRowCount>(
          std::mem_fn(&DemoService::Service::CountCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::Command, ::demo::MappingList>(
          std::mem_fn(&DemoService::Service::ShowCollections), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::CollectionInfo>(
          std::mem_fn(&DemoService::Service::ShowCollectionInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::Status>(
          std::mem_fn(&DemoService::Service::PreloadCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::IndexParam, ::demo::Status>(
          std::mem_fn(&DemoService::Service::CreateIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::IndexParam>(
          std::mem_fn(&DemoService::Service::DescribeIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::Status>(
          std::mem_fn(&DemoService::Service::DropIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::InsertParam, ::demo::EntityIDs>(
          std::mem_fn(&DemoService::Service::Insert), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::SearchParam, ::demo::QueryResult>(
          std::mem_fn(&DemoService::Service::Search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::SearchInFilesParam, ::demo::QueryResult>(
          std::mem_fn(&DemoService::Service::SearchInFiles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::EntityIdentity, ::demo::Entity>(
          std::mem_fn(&DemoService::Service::GetEntityByID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::GetEntityIDsParam, ::demo::EntityIDs>(
          std::mem_fn(&DemoService::Service::GetEntityIDs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::DeleteByIDParam, ::demo::Status>(
          std::mem_fn(&DemoService::Service::DeleteByID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::PartitionParam, ::demo::Status>(
          std::mem_fn(&DemoService::Service::CreatePartition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::PartitionList>(
          std::mem_fn(&DemoService::Service::ShowPartitions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::PartitionParam, ::demo::Status>(
          std::mem_fn(&DemoService::Service::DropPartition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::Command, ::demo::StringReply>(
          std::mem_fn(&DemoService::Service::Cmd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::FlushParam, ::demo::Status>(
          std::mem_fn(&DemoService::Service::Flush), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::demo::CollectionName, ::demo::Status>(
          std::mem_fn(&DemoService::Service::Compact), this)));
}

DemoService::Service::~Service() {
}

::grpc::Status DemoService::Service::CreateCollection(::grpc::ServerContext* context, const ::demo::Mapping* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::HasCollection(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DropCollection(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DescribeCollection(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::Mapping* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::CountCollection(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::CollectionRowCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::ShowCollections(::grpc::ServerContext* context, const ::demo::Command* request, ::demo::MappingList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::ShowCollectionInfo(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::CollectionInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::PreloadCollection(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::CreateIndex(::grpc::ServerContext* context, const ::demo::IndexParam* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DescribeIndex(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::IndexParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DropIndex(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::Insert(::grpc::ServerContext* context, const ::demo::InsertParam* request, ::demo::EntityIDs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::Search(::grpc::ServerContext* context, const ::demo::SearchParam* request, ::demo::QueryResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::SearchInFiles(::grpc::ServerContext* context, const ::demo::SearchInFilesParam* request, ::demo::QueryResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::GetEntityByID(::grpc::ServerContext* context, const ::demo::EntityIdentity* request, ::demo::Entity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::GetEntityIDs(::grpc::ServerContext* context, const ::demo::GetEntityIDsParam* request, ::demo::EntityIDs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DeleteByID(::grpc::ServerContext* context, const ::demo::DeleteByIDParam* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::CreatePartition(::grpc::ServerContext* context, const ::demo::PartitionParam* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::ShowPartitions(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::PartitionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::DropPartition(::grpc::ServerContext* context, const ::demo::PartitionParam* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::Cmd(::grpc::ServerContext* context, const ::demo::Command* request, ::demo::StringReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::Flush(::grpc::ServerContext* context, const ::demo::FlushParam* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DemoService::Service::Compact(::grpc::ServerContext* context, const ::demo::CollectionName* request, ::demo::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace demo

