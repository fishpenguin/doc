// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: common.proto
#ifndef GRPC_common_2eproto__INCLUDED
#define GRPC_common_2eproto__INCLUDED

#include "common.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace demo {

class DemoService final {
 public:
  static constexpr char const* service_full_name() {
    return "demo.DemoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::demo::QueryResponsePB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::QueryResponsePB>> AsyncSearch(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::QueryResponsePB>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::QueryResponsePB>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::QueryResponsePB>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::demo::CollectionSchemaResponsePB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaResponsePB>> AsyncCreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaResponsePB>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaResponsePB>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaResponsePB>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::demo::CollectionSchemaListPB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaListPB>> AsyncShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaListPB>>(AsyncShowCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaListPB>> PrepareAsyncShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaListPB>>(PrepareAsyncShowCollectionsRaw(context, request, cq));
    }
    virtual ::grpc::Status DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::GeneralResponsePB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> AsyncDropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(AsyncDropCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> PrepareAsyncDropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(PrepareAsyncDropCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::demo::GeneralResponsePB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> AsyncInsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(AsyncInsertDocsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> PrepareAsyncInsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(PrepareAsyncInsertDocsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::demo::GeneralResponsePB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> AsyncCreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::GeneralResponsePB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> AsyncDropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(AsyncDropIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>> PrepareAsyncDropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>>(PrepareAsyncDropIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::IndexParamPB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::IndexParamPB>> AsyncDescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::IndexParamPB>>(AsyncDescribeIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::IndexParamPB>> PrepareAsyncDescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::IndexParamPB>>(PrepareAsyncDescribeIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::demo::ConfigPB* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::ConfigPB>> AsyncGetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::ConfigPB>>(AsyncGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::ConfigPB>> PrepareAsyncGetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::ConfigPB>>(PrepareAsyncGetConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::demo::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::Status>> AsyncSetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::Status>>(AsyncSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::Status>> PrepareAsyncSetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::demo::Status>>(PrepareAsyncSetConfigRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaListPB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaListPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertDocs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void InsertDocs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParamPB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParamPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::ConfigPB* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::ConfigPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB* request, ::demo::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::QueryResponsePB>* AsyncSearchRaw(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::QueryResponsePB>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaResponsePB>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaResponsePB>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaListPB>* AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::CollectionSchemaListPB>* PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* AsyncInsertDocsRaw(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* PrepareAsyncInsertDocsRaw(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* AsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::GeneralResponsePB>* PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::IndexParamPB>* AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::IndexParamPB>* PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::ConfigPB>* AsyncGetConfigRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::ConfigPB>* PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::Status>* AsyncSetConfigRaw(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::demo::Status>* PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::demo::QueryResponsePB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>> AsyncSearch(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::demo::CollectionSchemaResponsePB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>> AsyncCreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    ::grpc::Status ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::demo::CollectionSchemaListPB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>> AsyncShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>>(AsyncShowCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>> PrepareAsyncShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>>(PrepareAsyncShowCollectionsRaw(context, request, cq));
    }
    ::grpc::Status DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::GeneralResponsePB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> AsyncDropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(AsyncDropCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> PrepareAsyncDropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(PrepareAsyncDropCollectionRaw(context, request, cq));
    }
    ::grpc::Status InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::demo::GeneralResponsePB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> AsyncInsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(AsyncInsertDocsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> PrepareAsyncInsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(PrepareAsyncInsertDocsRaw(context, request, cq));
    }
    ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::demo::GeneralResponsePB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> AsyncCreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    ::grpc::Status DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::GeneralResponsePB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> AsyncDropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(AsyncDropIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>> PrepareAsyncDropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>>(PrepareAsyncDropIndexRaw(context, request, cq));
    }
    ::grpc::Status DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::demo::IndexParamPB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>> AsyncDescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>>(AsyncDescribeIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>> PrepareAsyncDescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>>(PrepareAsyncDescribeIndexRaw(context, request, cq));
    }
    ::grpc::Status GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::demo::ConfigPB* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>> AsyncGetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>>(AsyncGetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>> PrepareAsyncGetConfig(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>>(PrepareAsyncGetConfigRaw(context, request, cq));
    }
    ::grpc::Status SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::demo::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::Status>> AsyncSetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::Status>>(AsyncSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::Status>> PrepareAsyncSetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::demo::Status>>(PrepareAsyncSetConfigRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResponsePB* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::QueryResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response, std::function<void(::grpc::Status)>) override;
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaResponsePB* response, std::function<void(::grpc::Status)>) override;
      void CreateCollection(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response, std::function<void(::grpc::Status)>) override;
      void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaListPB* response, std::function<void(::grpc::Status)>) override;
      void ShowCollections(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ShowCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::CollectionSchemaListPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void DropCollection(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DropCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void InsertDocs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void InsertDocs(::grpc::ClientContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void InsertDocs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void CreateIndex(::grpc::ClientContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, std::function<void(::grpc::Status)>) override;
      void DropIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DropIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::GeneralResponsePB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response, std::function<void(::grpc::Status)>) override;
      void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParamPB* response, std::function<void(::grpc::Status)>) override;
      void DescribeIndex(::grpc::ClientContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DescribeIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::IndexParamPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response, std::function<void(::grpc::Status)>) override;
      void GetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::ConfigPB* response, std::function<void(::grpc::Status)>) override;
      void GetConfig(::grpc::ClientContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::ConfigPB* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB* request, ::demo::Status* response, std::function<void(::grpc::Status)>) override;
      void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, std::function<void(::grpc::Status)>) override;
      void SetConfig(::grpc::ClientContext* context, const ::demo::ConfigPB* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::demo::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>* AsyncSearchRaw(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::QueryResponsePB>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::demo::QueryRequestPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaResponsePB>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::demo::CreateCollectionRequestPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>* AsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::CollectionSchemaListPB>* PrepareAsyncShowCollectionsRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* AsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* PrepareAsyncDropCollectionRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* AsyncInsertDocsRaw(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* PrepareAsyncInsertDocsRaw(::grpc::ClientContext* context, const ::demo::InsertRequestPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::demo::IndexParamPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* AsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::GeneralResponsePB>* PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>* AsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::IndexParamPB>* PrepareAsyncDescribeIndexRaw(::grpc::ClientContext* context, const ::demo::CollectionNamePB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>* AsyncGetConfigRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::ConfigPB>* PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::demo::CommandPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::Status>* AsyncSetConfigRaw(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::demo::Status>* PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::demo::ConfigPB& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_ShowCollections_;
    const ::grpc::internal::RpcMethod rpcmethod_DropCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertDocs_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_DropIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribeIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::demo::QueryRequestPB* request, ::demo::QueryResponsePB* response);
    virtual ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::demo::CreateCollectionRequestPB* request, ::demo::CollectionSchemaResponsePB* response);
    virtual ::grpc::Status ShowCollections(::grpc::ServerContext* context, const ::demo::CommandPB* request, ::demo::CollectionSchemaListPB* response);
    virtual ::grpc::Status DropCollection(::grpc::ServerContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response);
    virtual ::grpc::Status InsertDocs(::grpc::ServerContext* context, const ::demo::InsertRequestPB* request, ::demo::GeneralResponsePB* response);
    virtual ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::demo::IndexParamPB* request, ::demo::GeneralResponsePB* response);
    virtual ::grpc::Status DropIndex(::grpc::ServerContext* context, const ::demo::CollectionNamePB* request, ::demo::GeneralResponsePB* response);
    virtual ::grpc::Status DescribeIndex(::grpc::ServerContext* context, const ::demo::CollectionNamePB* request, ::demo::IndexParamPB* response);
    virtual ::grpc::Status GetConfig(::grpc::ServerContext* context, const ::demo::CommandPB* request, ::demo::ConfigPB* response);
    virtual ::grpc::Status SetConfig(::grpc::ServerContext* context, const ::demo::ConfigPB* request, ::demo::Status* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::demo::QueryRequestPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::QueryResponsePB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCollection() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::demo::CreateCollectionRequestPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::CollectionSchemaResponsePB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShowCollections() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowCollections(::grpc::ServerContext* context, ::demo::CommandPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::CollectionSchemaListPB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropCollection() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropCollection(::grpc::ServerContext* context, ::demo::CollectionNamePB* request, ::grpc::ServerAsyncResponseWriter< ::demo::GeneralResponsePB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertDocs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertDocs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_InsertDocs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertDocs(::grpc::ServerContext* context, ::demo::InsertRequestPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::GeneralResponsePB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateIndex() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::demo::IndexParamPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::GeneralResponsePB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DropIndex() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropIndex(::grpc::ServerContext* context, ::demo::CollectionNamePB* request, ::grpc::ServerAsyncResponseWriter< ::demo::GeneralResponsePB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeIndex(::grpc::ServerContext* context, ::demo::CollectionNamePB* request, ::grpc::ServerAsyncResponseWriter< ::demo::IndexParamPB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConfig() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfig(::grpc::ServerContext* context, ::demo::CommandPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::ConfigPB>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetConfig() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConfig(::grpc::ServerContext* context, ::demo::ConfigPB* request, ::grpc::ServerAsyncResponseWriter< ::demo::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Search<WithAsyncMethod_CreateCollection<WithAsyncMethod_ShowCollections<WithAsyncMethod_DropCollection<WithAsyncMethod_InsertDocs<WithAsyncMethod_CreateIndex<WithAsyncMethod_DropIndex<WithAsyncMethod_DescribeIndex<WithAsyncMethod_GetConfig<WithAsyncMethod_SetConfig<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Search() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::QueryRequestPB, ::demo::QueryResponsePB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::QueryRequestPB* request,
                 ::demo::QueryResponsePB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Search(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Search(
        ::grpc::experimental::MessageAllocator< ::demo::QueryRequestPB, ::demo::QueryResponsePB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::QueryRequestPB, ::demo::QueryResponsePB>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCollection() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::CreateCollectionRequestPB, ::demo::CollectionSchemaResponsePB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::CreateCollectionRequestPB* request,
                 ::demo::CollectionSchemaResponsePB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateCollection(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateCollection(
        ::grpc::experimental::MessageAllocator< ::demo::CreateCollectionRequestPB, ::demo::CollectionSchemaResponsePB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::CreateCollectionRequestPB, ::demo::CollectionSchemaResponsePB>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShowCollections() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::CommandPB, ::demo::CollectionSchemaListPB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::CommandPB* request,
                 ::demo::CollectionSchemaListPB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ShowCollections(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ShowCollections(
        ::grpc::experimental::MessageAllocator< ::demo::CommandPB, ::demo::CollectionSchemaListPB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::CommandPB, ::demo::CollectionSchemaListPB>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropCollection() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::CollectionNamePB* request,
                 ::demo::GeneralResponsePB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DropCollection(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DropCollection(
        ::grpc::experimental::MessageAllocator< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InsertDocs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InsertDocs() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::InsertRequestPB, ::demo::GeneralResponsePB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::InsertRequestPB* request,
                 ::demo::GeneralResponsePB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->InsertDocs(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_InsertDocs(
        ::grpc::experimental::MessageAllocator< ::demo::InsertRequestPB, ::demo::GeneralResponsePB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::InsertRequestPB, ::demo::GeneralResponsePB>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InsertDocs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateIndex() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::IndexParamPB, ::demo::GeneralResponsePB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::IndexParamPB* request,
                 ::demo::GeneralResponsePB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateIndex(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateIndex(
        ::grpc::experimental::MessageAllocator< ::demo::IndexParamPB, ::demo::GeneralResponsePB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::IndexParamPB, ::demo::GeneralResponsePB>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DropIndex() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::CollectionNamePB* request,
                 ::demo::GeneralResponsePB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DropIndex(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DropIndex(
        ::grpc::experimental::MessageAllocator< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribeIndex() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::CollectionNamePB, ::demo::IndexParamPB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::CollectionNamePB* request,
                 ::demo::IndexParamPB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DescribeIndex(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DescribeIndex(
        ::grpc::experimental::MessageAllocator< ::demo::CollectionNamePB, ::demo::IndexParamPB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::CollectionNamePB, ::demo::IndexParamPB>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::CommandPB, ::demo::ConfigPB>(
          [this](::grpc::ServerContext* context,
                 const ::demo::CommandPB* request,
                 ::demo::ConfigPB* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetConfig(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetConfig(
        ::grpc::experimental::MessageAllocator< ::demo::CommandPB, ::demo::ConfigPB>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::CommandPB, ::demo::ConfigPB>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::demo::ConfigPB, ::demo::Status>(
          [this](::grpc::ServerContext* context,
                 const ::demo::ConfigPB* request,
                 ::demo::Status* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetConfig(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetConfig(
        ::grpc::experimental::MessageAllocator< ::demo::ConfigPB, ::demo::Status>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::demo::ConfigPB, ::demo::Status>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Search<ExperimentalWithCallbackMethod_CreateCollection<ExperimentalWithCallbackMethod_ShowCollections<ExperimentalWithCallbackMethod_DropCollection<ExperimentalWithCallbackMethod_InsertDocs<ExperimentalWithCallbackMethod_CreateIndex<ExperimentalWithCallbackMethod_DropIndex<ExperimentalWithCallbackMethod_DescribeIndex<ExperimentalWithCallbackMethod_GetConfig<ExperimentalWithCallbackMethod_SetConfig<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCollection() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShowCollections() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropCollection() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertDocs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertDocs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_InsertDocs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateIndex() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DropIndex() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConfig() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetConfig() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCollection() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShowCollections() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowCollections(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropCollection() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertDocs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertDocs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_InsertDocs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertDocs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateIndex() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DropIndex() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDropIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribeIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConfig() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetConfig() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Search() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Search(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Search(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCollection() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateCollection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateCollection(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShowCollections() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ShowCollections(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ShowCollections(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropCollection() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DropCollection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DropCollection(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InsertDocs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InsertDocs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->InsertDocs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_InsertDocs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void InsertDocs(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateIndex() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateIndex(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateIndex(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DropIndex() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DropIndex(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DropIndex(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribeIndex() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DescribeIndex(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DescribeIndex(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetConfig(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetConfig(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::QueryRequestPB, ::demo::QueryResponsePB>(std::bind(&WithStreamedUnaryMethod_Search<BaseClass>::StreamedSearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::demo::QueryRequestPB* /*request*/, ::demo::QueryResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::QueryRequestPB,::demo::QueryResponsePB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCollection() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::CreateCollectionRequestPB, ::demo::CollectionSchemaResponsePB>(std::bind(&WithStreamedUnaryMethod_CreateCollection<BaseClass>::StreamedCreateCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::demo::CreateCollectionRequestPB* /*request*/, ::demo::CollectionSchemaResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::CreateCollectionRequestPB,::demo::CollectionSchemaResponsePB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShowCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShowCollections() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::CommandPB, ::demo::CollectionSchemaListPB>(std::bind(&WithStreamedUnaryMethod_ShowCollections<BaseClass>::StreamedShowCollections, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ShowCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShowCollections(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::CollectionSchemaListPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShowCollections(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::CommandPB,::demo::CollectionSchemaListPB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropCollection() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>(std::bind(&WithStreamedUnaryMethod_DropCollection<BaseClass>::StreamedDropCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DropCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropCollection(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::CollectionNamePB,::demo::GeneralResponsePB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertDocs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertDocs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::InsertRequestPB, ::demo::GeneralResponsePB>(std::bind(&WithStreamedUnaryMethod_InsertDocs<BaseClass>::StreamedInsertDocs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InsertDocs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertDocs(::grpc::ServerContext* /*context*/, const ::demo::InsertRequestPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertDocs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::InsertRequestPB,::demo::GeneralResponsePB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateIndex() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::IndexParamPB, ::demo::GeneralResponsePB>(std::bind(&WithStreamedUnaryMethod_CreateIndex<BaseClass>::StreamedCreateIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::demo::IndexParamPB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::IndexParamPB,::demo::GeneralResponsePB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DropIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DropIndex() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::CollectionNamePB, ::demo::GeneralResponsePB>(std::bind(&WithStreamedUnaryMethod_DropIndex<BaseClass>::StreamedDropIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DropIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DropIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::GeneralResponsePB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDropIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::CollectionNamePB,::demo::GeneralResponsePB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribeIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribeIndex() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::CollectionNamePB, ::demo::IndexParamPB>(std::bind(&WithStreamedUnaryMethod_DescribeIndex<BaseClass>::StreamedDescribeIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DescribeIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribeIndex(::grpc::ServerContext* /*context*/, const ::demo::CollectionNamePB* /*request*/, ::demo::IndexParamPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribeIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::CollectionNamePB,::demo::IndexParamPB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConfig() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::CommandPB, ::demo::ConfigPB>(std::bind(&WithStreamedUnaryMethod_GetConfig<BaseClass>::StreamedGetConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConfig(::grpc::ServerContext* /*context*/, const ::demo::CommandPB* /*request*/, ::demo::ConfigPB* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::CommandPB,::demo::ConfigPB>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetConfig() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::demo::ConfigPB, ::demo::Status>(std::bind(&WithStreamedUnaryMethod_SetConfig<BaseClass>::StreamedSetConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::demo::ConfigPB* /*request*/, ::demo::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::demo::ConfigPB,::demo::Status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_ShowCollections<WithStreamedUnaryMethod_DropCollection<WithStreamedUnaryMethod_InsertDocs<WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_DropIndex<WithStreamedUnaryMethod_DescribeIndex<WithStreamedUnaryMethod_GetConfig<WithStreamedUnaryMethod_SetConfig<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_ShowCollections<WithStreamedUnaryMethod_DropCollection<WithStreamedUnaryMethod_InsertDocs<WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_DropIndex<WithStreamedUnaryMethod_DescribeIndex<WithStreamedUnaryMethod_GetConfig<WithStreamedUnaryMethod_SetConfig<Service > > > > > > > > > > StreamedService;
};

}  // namespace demo


#endif  // GRPC_common_2eproto__INCLUDED
